
UART_ROS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005908  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000039c  08005a14  08005a14  00015a14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005db0  08005db0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  08005db0  08005db0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005db0  08005db0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08005db0  08005db0  00015db0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005db8  08005db8  00015db8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08005dbc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c58  20000070  08005e2c  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000cc8  08005e2c  00020cc8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020099  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f542  00000000  00000000  000200dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000238e  00000000  00000000  0002f61e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009f0  00000000  00000000  000319b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000079b  00000000  00000000  000323a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000175f7  00000000  00000000  00032b3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b873  00000000  00000000  0004a132  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000865a8  00000000  00000000  000559a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002b84  00000000  00000000  000dbf50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  000dead4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000070 	.word	0x20000070
 8000128:	00000000 	.word	0x00000000
 800012c:	080059fc 	.word	0x080059fc

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000074 	.word	0x20000074
 8000148:	080059fc 	.word	0x080059fc

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 800015c:	b480      	push	{r7}
 800015e:	b085      	sub	sp, #20
 8000160:	af00      	add	r7, sp, #0
 8000162:	6078      	str	r0, [r7, #4]
 8000164:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 8000166:	683b      	ldr	r3, [r7, #0]
 8000168:	681b      	ldr	r3, [r3, #0]
 800016a:	0a5a      	lsrs	r2, r3, #9
 800016c:	490f      	ldr	r1, [pc, #60]	; (80001ac <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800016e:	fba1 1202 	umull	r1, r2, r1, r2
 8000172:	09d2      	lsrs	r2, r2, #7
 8000174:	490e      	ldr	r1, [pc, #56]	; (80001b0 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 8000176:	fb01 f202 	mul.w	r2, r1, r2
 800017a:	1a9b      	subs	r3, r3, r2
 800017c:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 800017e:	683b      	ldr	r3, [r7, #0]
 8000180:	681b      	ldr	r3, [r3, #0]
 8000182:	0a5b      	lsrs	r3, r3, #9
 8000184:	4a09      	ldr	r2, [pc, #36]	; (80001ac <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8000186:	fba2 2303 	umull	r2, r3, r2, r3
 800018a:	09db      	lsrs	r3, r3, #7
 800018c:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 800018e:	687b      	ldr	r3, [r7, #4]
 8000190:	681a      	ldr	r2, [r3, #0]
 8000192:	68bb      	ldr	r3, [r7, #8]
 8000194:	441a      	add	r2, r3
 8000196:	687b      	ldr	r3, [r7, #4]
 8000198:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800019a:	683b      	ldr	r3, [r7, #0]
 800019c:	68fa      	ldr	r2, [r7, #12]
 800019e:	601a      	str	r2, [r3, #0]
}
 80001a0:	bf00      	nop
 80001a2:	3714      	adds	r7, #20
 80001a4:	46bd      	mov	sp, r7
 80001a6:	bc80      	pop	{r7}
 80001a8:	4770      	bx	lr
 80001aa:	bf00      	nop
 80001ac:	00044b83 	.word	0x00044b83
 80001b0:	3b9aca00 	.word	0x3b9aca00

080001b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001b4:	b580      	push	{r7, lr}
 80001b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001b8:	f003 f8ba 	bl	8003330 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001bc:	f000 f80b 	bl	80001d6 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001c0:	f000 f89e 	bl	8000300 <MX_GPIO_Init>
  MX_DMA_Init();
 80001c4:	f000 f876 	bl	80002b4 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80001c8:	f000 f84a 	bl	8000260 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  setup();
 80001cc:	f002 f848 	bl	8002260 <setup>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  loop();
 80001d0:	f002 f86e 	bl	80022b0 <loop>
 80001d4:	e7fc      	b.n	80001d0 <main+0x1c>

080001d6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001d6:	b580      	push	{r7, lr}
 80001d8:	b090      	sub	sp, #64	; 0x40
 80001da:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001dc:	f107 0318 	add.w	r3, r7, #24
 80001e0:	2228      	movs	r2, #40	; 0x28
 80001e2:	2100      	movs	r1, #0
 80001e4:	4618      	mov	r0, r3
 80001e6:	f005 faba 	bl	800575e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80001ea:	1d3b      	adds	r3, r7, #4
 80001ec:	2200      	movs	r2, #0
 80001ee:	601a      	str	r2, [r3, #0]
 80001f0:	605a      	str	r2, [r3, #4]
 80001f2:	609a      	str	r2, [r3, #8]
 80001f4:	60da      	str	r2, [r3, #12]
 80001f6:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80001f8:	2301      	movs	r3, #1
 80001fa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80001fc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000200:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8000202:	2300      	movs	r3, #0
 8000204:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000206:	2301      	movs	r3, #1
 8000208:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800020a:	2302      	movs	r3, #2
 800020c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800020e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000212:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000214:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8000218:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800021a:	f107 0318 	add.w	r3, r7, #24
 800021e:	4618      	mov	r0, r3
 8000220:	f003 fe74 	bl	8003f0c <HAL_RCC_OscConfig>
 8000224:	4603      	mov	r3, r0
 8000226:	2b00      	cmp	r3, #0
 8000228:	d001      	beq.n	800022e <SystemClock_Config+0x58>
  {
    Error_Handler();
 800022a:	f000 f904 	bl	8000436 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800022e:	230f      	movs	r3, #15
 8000230:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000232:	2302      	movs	r3, #2
 8000234:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000236:	2300      	movs	r3, #0
 8000238:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800023a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800023e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000240:	2300      	movs	r3, #0
 8000242:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000244:	1d3b      	adds	r3, r7, #4
 8000246:	2102      	movs	r1, #2
 8000248:	4618      	mov	r0, r3
 800024a:	f004 f8e1 	bl	8004410 <HAL_RCC_ClockConfig>
 800024e:	4603      	mov	r3, r0
 8000250:	2b00      	cmp	r3, #0
 8000252:	d001      	beq.n	8000258 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8000254:	f000 f8ef 	bl	8000436 <Error_Handler>
  }
}
 8000258:	bf00      	nop
 800025a:	3740      	adds	r7, #64	; 0x40
 800025c:	46bd      	mov	sp, r7
 800025e:	bd80      	pop	{r7, pc}

08000260 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000264:	4b11      	ldr	r3, [pc, #68]	; (80002ac <MX_USART2_UART_Init+0x4c>)
 8000266:	4a12      	ldr	r2, [pc, #72]	; (80002b0 <MX_USART2_UART_Init+0x50>)
 8000268:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 57600;
 800026a:	4b10      	ldr	r3, [pc, #64]	; (80002ac <MX_USART2_UART_Init+0x4c>)
 800026c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8000270:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000272:	4b0e      	ldr	r3, [pc, #56]	; (80002ac <MX_USART2_UART_Init+0x4c>)
 8000274:	2200      	movs	r2, #0
 8000276:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000278:	4b0c      	ldr	r3, [pc, #48]	; (80002ac <MX_USART2_UART_Init+0x4c>)
 800027a:	2200      	movs	r2, #0
 800027c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800027e:	4b0b      	ldr	r3, [pc, #44]	; (80002ac <MX_USART2_UART_Init+0x4c>)
 8000280:	2200      	movs	r2, #0
 8000282:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000284:	4b09      	ldr	r3, [pc, #36]	; (80002ac <MX_USART2_UART_Init+0x4c>)
 8000286:	220c      	movs	r2, #12
 8000288:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800028a:	4b08      	ldr	r3, [pc, #32]	; (80002ac <MX_USART2_UART_Init+0x4c>)
 800028c:	2200      	movs	r2, #0
 800028e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000290:	4b06      	ldr	r3, [pc, #24]	; (80002ac <MX_USART2_UART_Init+0x4c>)
 8000292:	2200      	movs	r2, #0
 8000294:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000296:	4805      	ldr	r0, [pc, #20]	; (80002ac <MX_USART2_UART_Init+0x4c>)
 8000298:	f004 fa48 	bl	800472c <HAL_UART_Init>
 800029c:	4603      	mov	r3, r0
 800029e:	2b00      	cmp	r3, #0
 80002a0:	d001      	beq.n	80002a6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80002a2:	f000 f8c8 	bl	8000436 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002a6:	bf00      	nop
 80002a8:	bd80      	pop	{r7, pc}
 80002aa:	bf00      	nop
 80002ac:	2000008c 	.word	0x2000008c
 80002b0:	40004400 	.word	0x40004400

080002b4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b082      	sub	sp, #8
 80002b8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80002ba:	4b10      	ldr	r3, [pc, #64]	; (80002fc <MX_DMA_Init+0x48>)
 80002bc:	695b      	ldr	r3, [r3, #20]
 80002be:	4a0f      	ldr	r2, [pc, #60]	; (80002fc <MX_DMA_Init+0x48>)
 80002c0:	f043 0301 	orr.w	r3, r3, #1
 80002c4:	6153      	str	r3, [r2, #20]
 80002c6:	4b0d      	ldr	r3, [pc, #52]	; (80002fc <MX_DMA_Init+0x48>)
 80002c8:	695b      	ldr	r3, [r3, #20]
 80002ca:	f003 0301 	and.w	r3, r3, #1
 80002ce:	607b      	str	r3, [r7, #4]
 80002d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 80002d2:	2200      	movs	r2, #0
 80002d4:	2100      	movs	r1, #0
 80002d6:	2010      	movs	r0, #16
 80002d8:	f003 f963 	bl	80035a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 80002dc:	2010      	movs	r0, #16
 80002de:	f003 f97c 	bl	80035da <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 80002e2:	2200      	movs	r2, #0
 80002e4:	2100      	movs	r1, #0
 80002e6:	2011      	movs	r0, #17
 80002e8:	f003 f95b 	bl	80035a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80002ec:	2011      	movs	r0, #17
 80002ee:	f003 f974 	bl	80035da <HAL_NVIC_EnableIRQ>

}
 80002f2:	bf00      	nop
 80002f4:	3708      	adds	r7, #8
 80002f6:	46bd      	mov	sp, r7
 80002f8:	bd80      	pop	{r7, pc}
 80002fa:	bf00      	nop
 80002fc:	40021000 	.word	0x40021000

08000300 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000300:	b580      	push	{r7, lr}
 8000302:	b088      	sub	sp, #32
 8000304:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000306:	f107 0310 	add.w	r3, r7, #16
 800030a:	2200      	movs	r2, #0
 800030c:	601a      	str	r2, [r3, #0]
 800030e:	605a      	str	r2, [r3, #4]
 8000310:	609a      	str	r2, [r3, #8]
 8000312:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000314:	4b38      	ldr	r3, [pc, #224]	; (80003f8 <MX_GPIO_Init+0xf8>)
 8000316:	699b      	ldr	r3, [r3, #24]
 8000318:	4a37      	ldr	r2, [pc, #220]	; (80003f8 <MX_GPIO_Init+0xf8>)
 800031a:	f043 0310 	orr.w	r3, r3, #16
 800031e:	6193      	str	r3, [r2, #24]
 8000320:	4b35      	ldr	r3, [pc, #212]	; (80003f8 <MX_GPIO_Init+0xf8>)
 8000322:	699b      	ldr	r3, [r3, #24]
 8000324:	f003 0310 	and.w	r3, r3, #16
 8000328:	60fb      	str	r3, [r7, #12]
 800032a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800032c:	4b32      	ldr	r3, [pc, #200]	; (80003f8 <MX_GPIO_Init+0xf8>)
 800032e:	699b      	ldr	r3, [r3, #24]
 8000330:	4a31      	ldr	r2, [pc, #196]	; (80003f8 <MX_GPIO_Init+0xf8>)
 8000332:	f043 0320 	orr.w	r3, r3, #32
 8000336:	6193      	str	r3, [r2, #24]
 8000338:	4b2f      	ldr	r3, [pc, #188]	; (80003f8 <MX_GPIO_Init+0xf8>)
 800033a:	699b      	ldr	r3, [r3, #24]
 800033c:	f003 0320 	and.w	r3, r3, #32
 8000340:	60bb      	str	r3, [r7, #8]
 8000342:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000344:	4b2c      	ldr	r3, [pc, #176]	; (80003f8 <MX_GPIO_Init+0xf8>)
 8000346:	699b      	ldr	r3, [r3, #24]
 8000348:	4a2b      	ldr	r2, [pc, #172]	; (80003f8 <MX_GPIO_Init+0xf8>)
 800034a:	f043 0304 	orr.w	r3, r3, #4
 800034e:	6193      	str	r3, [r2, #24]
 8000350:	4b29      	ldr	r3, [pc, #164]	; (80003f8 <MX_GPIO_Init+0xf8>)
 8000352:	699b      	ldr	r3, [r3, #24]
 8000354:	f003 0304 	and.w	r3, r3, #4
 8000358:	607b      	str	r3, [r7, #4]
 800035a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800035c:	4b26      	ldr	r3, [pc, #152]	; (80003f8 <MX_GPIO_Init+0xf8>)
 800035e:	699b      	ldr	r3, [r3, #24]
 8000360:	4a25      	ldr	r2, [pc, #148]	; (80003f8 <MX_GPIO_Init+0xf8>)
 8000362:	f043 0308 	orr.w	r3, r3, #8
 8000366:	6193      	str	r3, [r2, #24]
 8000368:	4b23      	ldr	r3, [pc, #140]	; (80003f8 <MX_GPIO_Init+0xf8>)
 800036a:	699b      	ldr	r3, [r3, #24]
 800036c:	f003 0308 	and.w	r3, r3, #8
 8000370:	603b      	str	r3, [r7, #0]
 8000372:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_RESET);
 8000374:	2200      	movs	r2, #0
 8000376:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800037a:	4820      	ldr	r0, [pc, #128]	; (80003fc <MX_GPIO_Init+0xfc>)
 800037c:	f003 fd7d 	bl	8003e7a <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_BUILTIN_Pin */
  GPIO_InitStruct.Pin = LED_BUILTIN_Pin;
 8000380:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000384:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000386:	2301      	movs	r3, #1
 8000388:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800038a:	2300      	movs	r3, #0
 800038c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800038e:	2302      	movs	r3, #2
 8000390:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_BUILTIN_GPIO_Port, &GPIO_InitStruct);
 8000392:	f107 0310 	add.w	r3, r7, #16
 8000396:	4619      	mov	r1, r3
 8000398:	4818      	ldr	r0, [pc, #96]	; (80003fc <MX_GPIO_Init+0xfc>)
 800039a:	f003 fbdb 	bl	8003b54 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC_IN_LEFT_A_Pin ENC_IN_RIGHT_A_Pin */
  GPIO_InitStruct.Pin = ENC_IN_LEFT_A_Pin|ENC_IN_RIGHT_A_Pin;
 800039e:	2303      	movs	r3, #3
 80003a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80003a2:	4b17      	ldr	r3, [pc, #92]	; (8000400 <MX_GPIO_Init+0x100>)
 80003a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a6:	2300      	movs	r3, #0
 80003a8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003aa:	f107 0310 	add.w	r3, r7, #16
 80003ae:	4619      	mov	r1, r3
 80003b0:	4814      	ldr	r0, [pc, #80]	; (8000404 <MX_GPIO_Init+0x104>)
 80003b2:	f003 fbcf 	bl	8003b54 <HAL_GPIO_Init>

  /*Configure GPIO pins : ENC_IN_LEFT_B_Pin ENC_IN_RIGHT_B_Pin */
  GPIO_InitStruct.Pin = ENC_IN_LEFT_B_Pin|ENC_IN_RIGHT_B_Pin;
 80003b6:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 80003ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80003bc:	2300      	movs	r3, #0
 80003be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003c0:	2300      	movs	r3, #0
 80003c2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80003c4:	f107 0310 	add.w	r3, r7, #16
 80003c8:	4619      	mov	r1, r3
 80003ca:	480f      	ldr	r0, [pc, #60]	; (8000408 <MX_GPIO_Init+0x108>)
 80003cc:	f003 fbc2 	bl	8003b54 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80003d0:	2200      	movs	r2, #0
 80003d2:	2100      	movs	r1, #0
 80003d4:	2006      	movs	r0, #6
 80003d6:	f003 f8e4 	bl	80035a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80003da:	2006      	movs	r0, #6
 80003dc:	f003 f8fd 	bl	80035da <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80003e0:	2200      	movs	r2, #0
 80003e2:	2100      	movs	r1, #0
 80003e4:	2007      	movs	r0, #7
 80003e6:	f003 f8dc 	bl	80035a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80003ea:	2007      	movs	r0, #7
 80003ec:	f003 f8f5 	bl	80035da <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003f0:	bf00      	nop
 80003f2:	3720      	adds	r7, #32
 80003f4:	46bd      	mov	sp, r7
 80003f6:	bd80      	pop	{r7, pc}
 80003f8:	40021000 	.word	0x40021000
 80003fc:	40011000 	.word	0x40011000
 8000400:	10110000 	.word	0x10110000
 8000404:	40010800 	.word	0x40010800
 8000408:	40010c00 	.word	0x40010c00

0800040c <HAL_GPIO_EXTI_Callback>:
/* USER CODE BEGIN 4 */



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	b082      	sub	sp, #8
 8000410:	af00      	add	r7, sp, #0
 8000412:	4603      	mov	r3, r0
 8000414:	80fb      	strh	r3, [r7, #6]
    switch(GPIO_Pin){
 8000416:	88fb      	ldrh	r3, [r7, #6]
 8000418:	2b01      	cmp	r3, #1
 800041a:	d002      	beq.n	8000422 <HAL_GPIO_EXTI_Callback+0x16>
 800041c:	2b02      	cmp	r3, #2
 800041e:	d003      	beq.n	8000428 <HAL_GPIO_EXTI_Callback+0x1c>
    	break;
    case ENC_IN_RIGHT_A_Pin:
    	right_wheel_tick();
    	break;
    }
}
 8000420:	e005      	b.n	800042e <HAL_GPIO_EXTI_Callback+0x22>
    	left_wheel_tick();
 8000422:	f001 ff83 	bl	800232c <left_wheel_tick>
    	break;
 8000426:	e002      	b.n	800042e <HAL_GPIO_EXTI_Callback+0x22>
    	right_wheel_tick();
 8000428:	f001 ffd2 	bl	80023d0 <right_wheel_tick>
    	break;
 800042c:	bf00      	nop
}
 800042e:	bf00      	nop
 8000430:	3708      	adds	r7, #8
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}

08000436 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000436:	b480      	push	{r7}
 8000438:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800043a:	b672      	cpsid	i
}
 800043c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800043e:	e7fe      	b.n	800043e <Error_Handler+0x8>

08000440 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8000440:	b480      	push	{r7}
 8000442:	b083      	sub	sp, #12
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
 8000448:	687b      	ldr	r3, [r7, #4]
 800044a:	2200      	movs	r2, #0
 800044c:	601a      	str	r2, [r3, #0]
 800044e:	687b      	ldr	r3, [r7, #4]
 8000450:	2200      	movs	r2, #0
 8000452:	605a      	str	r2, [r3, #4]
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	4618      	mov	r0, r3
 8000458:	370c      	adds	r7, #12
 800045a:	46bd      	mov	sp, r7
 800045c:	bc80      	pop	{r7}
 800045e:	4770      	bx	lr

08000460 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8000460:	b480      	push	{r7}
 8000462:	b083      	sub	sp, #12
 8000464:	af00      	add	r7, sp, #0
 8000466:	6078      	str	r0, [r7, #4]
 8000468:	4a04      	ldr	r2, [pc, #16]	; (800047c <_ZN3ros3MsgC1Ev+0x1c>)
 800046a:	687b      	ldr	r3, [r7, #4]
 800046c:	601a      	str	r2, [r3, #0]
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	4618      	mov	r0, r3
 8000472:	370c      	adds	r7, #12
 8000474:	46bd      	mov	sp, r7
 8000476:	bc80      	pop	{r7}
 8000478:	4770      	bx	lr
 800047a:	bf00      	nop
 800047c:	08005d74 	.word	0x08005d74

08000480 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 8000480:	b580      	push	{r7, lr}
 8000482:	b082      	sub	sp, #8
 8000484:	af00      	add	r7, sp, #0
 8000486:	6078      	str	r0, [r7, #4]
      data()
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	4618      	mov	r0, r3
 800048c:	f7ff ffe8 	bl	8000460 <_ZN3ros3MsgC1Ev>
 8000490:	4a06      	ldr	r2, [pc, #24]	; (80004ac <_ZN8std_msgs4TimeC1Ev+0x2c>)
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	601a      	str	r2, [r3, #0]
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	3304      	adds	r3, #4
 800049a:	4618      	mov	r0, r3
 800049c:	f7ff ffd0 	bl	8000440 <_ZN3ros4TimeC1Ev>
    {
    }
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	4618      	mov	r0, r3
 80004a4:	3708      	adds	r7, #8
 80004a6:	46bd      	mov	sp, r7
 80004a8:	bd80      	pop	{r7, pc}
 80004aa:	bf00      	nop
 80004ac:	08005d5c 	.word	0x08005d5c

080004b0 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80004b0:	b480      	push	{r7}
 80004b2:	b085      	sub	sp, #20
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	6078      	str	r0, [r7, #4]
 80004b8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80004ba:	2300      	movs	r3, #0
 80004bc:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80004be:	687b      	ldr	r3, [r7, #4]
 80004c0:	6859      	ldr	r1, [r3, #4]
 80004c2:	68fb      	ldr	r3, [r7, #12]
 80004c4:	683a      	ldr	r2, [r7, #0]
 80004c6:	4413      	add	r3, r2
 80004c8:	b2ca      	uxtb	r2, r1
 80004ca:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	685b      	ldr	r3, [r3, #4]
 80004d0:	0a19      	lsrs	r1, r3, #8
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	3301      	adds	r3, #1
 80004d6:	683a      	ldr	r2, [r7, #0]
 80004d8:	4413      	add	r3, r2
 80004da:	b2ca      	uxtb	r2, r1
 80004dc:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	685b      	ldr	r3, [r3, #4]
 80004e2:	0c19      	lsrs	r1, r3, #16
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	3302      	adds	r3, #2
 80004e8:	683a      	ldr	r2, [r7, #0]
 80004ea:	4413      	add	r3, r2
 80004ec:	b2ca      	uxtb	r2, r1
 80004ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	685b      	ldr	r3, [r3, #4]
 80004f4:	0e19      	lsrs	r1, r3, #24
 80004f6:	68fb      	ldr	r3, [r7, #12]
 80004f8:	3303      	adds	r3, #3
 80004fa:	683a      	ldr	r2, [r7, #0]
 80004fc:	4413      	add	r3, r2
 80004fe:	b2ca      	uxtb	r2, r1
 8000500:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8000502:	68fb      	ldr	r3, [r7, #12]
 8000504:	3304      	adds	r3, #4
 8000506:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	6899      	ldr	r1, [r3, #8]
 800050c:	68fb      	ldr	r3, [r7, #12]
 800050e:	683a      	ldr	r2, [r7, #0]
 8000510:	4413      	add	r3, r2
 8000512:	b2ca      	uxtb	r2, r1
 8000514:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	689b      	ldr	r3, [r3, #8]
 800051a:	0a19      	lsrs	r1, r3, #8
 800051c:	68fb      	ldr	r3, [r7, #12]
 800051e:	3301      	adds	r3, #1
 8000520:	683a      	ldr	r2, [r7, #0]
 8000522:	4413      	add	r3, r2
 8000524:	b2ca      	uxtb	r2, r1
 8000526:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	689b      	ldr	r3, [r3, #8]
 800052c:	0c19      	lsrs	r1, r3, #16
 800052e:	68fb      	ldr	r3, [r7, #12]
 8000530:	3302      	adds	r3, #2
 8000532:	683a      	ldr	r2, [r7, #0]
 8000534:	4413      	add	r3, r2
 8000536:	b2ca      	uxtb	r2, r1
 8000538:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	689b      	ldr	r3, [r3, #8]
 800053e:	0e19      	lsrs	r1, r3, #24
 8000540:	68fb      	ldr	r3, [r7, #12]
 8000542:	3303      	adds	r3, #3
 8000544:	683a      	ldr	r2, [r7, #0]
 8000546:	4413      	add	r3, r2
 8000548:	b2ca      	uxtb	r2, r1
 800054a:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	3304      	adds	r3, #4
 8000550:	60fb      	str	r3, [r7, #12]
      return offset;
 8000552:	68fb      	ldr	r3, [r7, #12]
    }
 8000554:	4618      	mov	r0, r3
 8000556:	3714      	adds	r7, #20
 8000558:	46bd      	mov	sp, r7
 800055a:	bc80      	pop	{r7}
 800055c:	4770      	bx	lr

0800055e <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800055e:	b480      	push	{r7}
 8000560:	b085      	sub	sp, #20
 8000562:	af00      	add	r7, sp, #0
 8000564:	6078      	str	r0, [r7, #4]
 8000566:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000568:	2300      	movs	r3, #0
 800056a:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	683a      	ldr	r2, [r7, #0]
 8000570:	4413      	add	r3, r2
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	461a      	mov	r2, r3
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	685a      	ldr	r2, [r3, #4]
 800057e:	68fb      	ldr	r3, [r7, #12]
 8000580:	3301      	adds	r3, #1
 8000582:	6839      	ldr	r1, [r7, #0]
 8000584:	440b      	add	r3, r1
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	021b      	lsls	r3, r3, #8
 800058a:	431a      	orrs	r2, r3
 800058c:	687b      	ldr	r3, [r7, #4]
 800058e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	685a      	ldr	r2, [r3, #4]
 8000594:	68fb      	ldr	r3, [r7, #12]
 8000596:	3302      	adds	r3, #2
 8000598:	6839      	ldr	r1, [r7, #0]
 800059a:	440b      	add	r3, r1
 800059c:	781b      	ldrb	r3, [r3, #0]
 800059e:	041b      	lsls	r3, r3, #16
 80005a0:	431a      	orrs	r2, r3
 80005a2:	687b      	ldr	r3, [r7, #4]
 80005a4:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	685a      	ldr	r2, [r3, #4]
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	3303      	adds	r3, #3
 80005ae:	6839      	ldr	r1, [r7, #0]
 80005b0:	440b      	add	r3, r1
 80005b2:	781b      	ldrb	r3, [r3, #0]
 80005b4:	061b      	lsls	r3, r3, #24
 80005b6:	431a      	orrs	r2, r3
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80005bc:	68fb      	ldr	r3, [r7, #12]
 80005be:	3304      	adds	r3, #4
 80005c0:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	683a      	ldr	r2, [r7, #0]
 80005c6:	4413      	add	r3, r2
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	461a      	mov	r2, r3
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	689a      	ldr	r2, [r3, #8]
 80005d4:	68fb      	ldr	r3, [r7, #12]
 80005d6:	3301      	adds	r3, #1
 80005d8:	6839      	ldr	r1, [r7, #0]
 80005da:	440b      	add	r3, r1
 80005dc:	781b      	ldrb	r3, [r3, #0]
 80005de:	021b      	lsls	r3, r3, #8
 80005e0:	431a      	orrs	r2, r3
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	689a      	ldr	r2, [r3, #8]
 80005ea:	68fb      	ldr	r3, [r7, #12]
 80005ec:	3302      	adds	r3, #2
 80005ee:	6839      	ldr	r1, [r7, #0]
 80005f0:	440b      	add	r3, r1
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	041b      	lsls	r3, r3, #16
 80005f6:	431a      	orrs	r2, r3
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	689a      	ldr	r2, [r3, #8]
 8000600:	68fb      	ldr	r3, [r7, #12]
 8000602:	3303      	adds	r3, #3
 8000604:	6839      	ldr	r1, [r7, #0]
 8000606:	440b      	add	r3, r1
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	061b      	lsls	r3, r3, #24
 800060c:	431a      	orrs	r2, r3
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	3304      	adds	r3, #4
 8000616:	60fb      	str	r3, [r7, #12]
     return offset;
 8000618:	68fb      	ldr	r3, [r7, #12]
    }
 800061a:	4618      	mov	r0, r3
 800061c:	3714      	adds	r7, #20
 800061e:	46bd      	mov	sp, r7
 8000620:	bc80      	pop	{r7}
 8000622:	4770      	bx	lr

08000624 <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 8000624:	b480      	push	{r7}
 8000626:	b083      	sub	sp, #12
 8000628:	af00      	add	r7, sp, #0
 800062a:	6078      	str	r0, [r7, #4]
 800062c:	4b02      	ldr	r3, [pc, #8]	; (8000638 <_ZN8std_msgs4Time7getTypeEv+0x14>)
 800062e:	4618      	mov	r0, r3
 8000630:	370c      	adds	r7, #12
 8000632:	46bd      	mov	sp, r7
 8000634:	bc80      	pop	{r7}
 8000636:	4770      	bx	lr
 8000638:	08005a14 	.word	0x08005a14

0800063c <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 800063c:	b480      	push	{r7}
 800063e:	b083      	sub	sp, #12
 8000640:	af00      	add	r7, sp, #0
 8000642:	6078      	str	r0, [r7, #4]
 8000644:	4b02      	ldr	r3, [pc, #8]	; (8000650 <_ZN8std_msgs4Time6getMD5Ev+0x14>)
 8000646:	4618      	mov	r0, r3
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	bc80      	pop	{r7}
 800064e:	4770      	bx	lr
 8000650:	08005a24 	.word	0x08005a24

08000654 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	4618      	mov	r0, r3
 8000660:	f7ff fefe 	bl	8000460 <_ZN3ros3MsgC1Ev>
 8000664:	4a0b      	ldr	r2, [pc, #44]	; (8000694 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	601a      	str	r2, [r3, #0]
      topic_id(0),
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	2200      	movs	r2, #0
 800066e:	809a      	strh	r2, [r3, #4]
      topic_name(""),
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	4a09      	ldr	r2, [pc, #36]	; (8000698 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000674:	609a      	str	r2, [r3, #8]
      message_type(""),
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	4a07      	ldr	r2, [pc, #28]	; (8000698 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 800067a:	60da      	str	r2, [r3, #12]
      md5sum(""),
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	4a06      	ldr	r2, [pc, #24]	; (8000698 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 8000680:	611a      	str	r2, [r3, #16]
      buffer_size(0)
 8000682:	687b      	ldr	r3, [r7, #4]
 8000684:	2200      	movs	r2, #0
 8000686:	615a      	str	r2, [r3, #20]
    {
    }
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	4618      	mov	r0, r3
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
 8000692:	bf00      	nop
 8000694:	08005d44 	.word	0x08005d44
 8000698:	08005a48 	.word	0x08005a48

0800069c <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800069c:	b580      	push	{r7, lr}
 800069e:	b088      	sub	sp, #32
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
 80006a4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80006a6:	2300      	movs	r3, #0
 80006a8:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	8899      	ldrh	r1, [r3, #4]
 80006ae:	69fb      	ldr	r3, [r7, #28]
 80006b0:	683a      	ldr	r2, [r7, #0]
 80006b2:	4413      	add	r3, r2
 80006b4:	b2ca      	uxtb	r2, r1
 80006b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	889b      	ldrh	r3, [r3, #4]
 80006bc:	0a1b      	lsrs	r3, r3, #8
 80006be:	b299      	uxth	r1, r3
 80006c0:	69fb      	ldr	r3, [r7, #28]
 80006c2:	3301      	adds	r3, #1
 80006c4:	683a      	ldr	r2, [r7, #0]
 80006c6:	4413      	add	r3, r2
 80006c8:	b2ca      	uxtb	r2, r1
 80006ca:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80006cc:	69fb      	ldr	r3, [r7, #28]
 80006ce:	3302      	adds	r3, #2
 80006d0:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	689b      	ldr	r3, [r3, #8]
 80006d6:	4618      	mov	r0, r3
 80006d8:	f7ff fd38 	bl	800014c <strlen>
 80006dc:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 80006de:	69fb      	ldr	r3, [r7, #28]
 80006e0:	683a      	ldr	r2, [r7, #0]
 80006e2:	4413      	add	r3, r2
 80006e4:	69b9      	ldr	r1, [r7, #24]
 80006e6:	4618      	mov	r0, r3
 80006e8:	f001 fec2 	bl	8002470 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80006ec:	69fb      	ldr	r3, [r7, #28]
 80006ee:	3304      	adds	r3, #4
 80006f0:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 80006f2:	69fb      	ldr	r3, [r7, #28]
 80006f4:	683a      	ldr	r2, [r7, #0]
 80006f6:	18d0      	adds	r0, r2, r3
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	689b      	ldr	r3, [r3, #8]
 80006fc:	69ba      	ldr	r2, [r7, #24]
 80006fe:	4619      	mov	r1, r3
 8000700:	f005 f862 	bl	80057c8 <memcpy>
      offset += length_topic_name;
 8000704:	69fa      	ldr	r2, [r7, #28]
 8000706:	69bb      	ldr	r3, [r7, #24]
 8000708:	4413      	add	r3, r2
 800070a:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	68db      	ldr	r3, [r3, #12]
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff fd1b 	bl	800014c <strlen>
 8000716:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8000718:	69fb      	ldr	r3, [r7, #28]
 800071a:	683a      	ldr	r2, [r7, #0]
 800071c:	4413      	add	r3, r2
 800071e:	6979      	ldr	r1, [r7, #20]
 8000720:	4618      	mov	r0, r3
 8000722:	f001 fea5 	bl	8002470 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000726:	69fb      	ldr	r3, [r7, #28]
 8000728:	3304      	adds	r3, #4
 800072a:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 800072c:	69fb      	ldr	r3, [r7, #28]
 800072e:	683a      	ldr	r2, [r7, #0]
 8000730:	18d0      	adds	r0, r2, r3
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	68db      	ldr	r3, [r3, #12]
 8000736:	697a      	ldr	r2, [r7, #20]
 8000738:	4619      	mov	r1, r3
 800073a:	f005 f845 	bl	80057c8 <memcpy>
      offset += length_message_type;
 800073e:	69fa      	ldr	r2, [r7, #28]
 8000740:	697b      	ldr	r3, [r7, #20]
 8000742:	4413      	add	r3, r2
 8000744:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	691b      	ldr	r3, [r3, #16]
 800074a:	4618      	mov	r0, r3
 800074c:	f7ff fcfe 	bl	800014c <strlen>
 8000750:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8000752:	69fb      	ldr	r3, [r7, #28]
 8000754:	683a      	ldr	r2, [r7, #0]
 8000756:	4413      	add	r3, r2
 8000758:	6939      	ldr	r1, [r7, #16]
 800075a:	4618      	mov	r0, r3
 800075c:	f001 fe88 	bl	8002470 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000760:	69fb      	ldr	r3, [r7, #28]
 8000762:	3304      	adds	r3, #4
 8000764:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8000766:	69fb      	ldr	r3, [r7, #28]
 8000768:	683a      	ldr	r2, [r7, #0]
 800076a:	18d0      	adds	r0, r2, r3
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	691b      	ldr	r3, [r3, #16]
 8000770:	693a      	ldr	r2, [r7, #16]
 8000772:	4619      	mov	r1, r3
 8000774:	f005 f828 	bl	80057c8 <memcpy>
      offset += length_md5sum;
 8000778:	69fa      	ldr	r2, [r7, #28]
 800077a:	693b      	ldr	r3, [r7, #16]
 800077c:	4413      	add	r3, r2
 800077e:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	695b      	ldr	r3, [r3, #20]
 8000784:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 8000786:	68f9      	ldr	r1, [r7, #12]
 8000788:	69fb      	ldr	r3, [r7, #28]
 800078a:	683a      	ldr	r2, [r7, #0]
 800078c:	4413      	add	r3, r2
 800078e:	b2ca      	uxtb	r2, r1
 8000790:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 8000792:	68fb      	ldr	r3, [r7, #12]
 8000794:	0a19      	lsrs	r1, r3, #8
 8000796:	69fb      	ldr	r3, [r7, #28]
 8000798:	3301      	adds	r3, #1
 800079a:	683a      	ldr	r2, [r7, #0]
 800079c:	4413      	add	r3, r2
 800079e:	b2ca      	uxtb	r2, r1
 80007a0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	0c19      	lsrs	r1, r3, #16
 80007a6:	69fb      	ldr	r3, [r7, #28]
 80007a8:	3302      	adds	r3, #2
 80007aa:	683a      	ldr	r2, [r7, #0]
 80007ac:	4413      	add	r3, r2
 80007ae:	b2ca      	uxtb	r2, r1
 80007b0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80007b2:	68fb      	ldr	r3, [r7, #12]
 80007b4:	0e19      	lsrs	r1, r3, #24
 80007b6:	69fb      	ldr	r3, [r7, #28]
 80007b8:	3303      	adds	r3, #3
 80007ba:	683a      	ldr	r2, [r7, #0]
 80007bc:	4413      	add	r3, r2
 80007be:	b2ca      	uxtb	r2, r1
 80007c0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80007c2:	69fb      	ldr	r3, [r7, #28]
 80007c4:	3304      	adds	r3, #4
 80007c6:	61fb      	str	r3, [r7, #28]
      return offset;
 80007c8:	69fb      	ldr	r3, [r7, #28]
    }
 80007ca:	4618      	mov	r0, r3
 80007cc:	3720      	adds	r7, #32
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}

080007d2 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80007d2:	b580      	push	{r7, lr}
 80007d4:	b08a      	sub	sp, #40	; 0x28
 80007d6:	af00      	add	r7, sp, #0
 80007d8:	6078      	str	r0, [r7, #4]
 80007da:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 80007e0:	69bb      	ldr	r3, [r7, #24]
 80007e2:	683a      	ldr	r2, [r7, #0]
 80007e4:	4413      	add	r3, r2
 80007e6:	781b      	ldrb	r3, [r3, #0]
 80007e8:	b29a      	uxth	r2, r3
 80007ea:	687b      	ldr	r3, [r7, #4]
 80007ec:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	889b      	ldrh	r3, [r3, #4]
 80007f2:	b21a      	sxth	r2, r3
 80007f4:	69bb      	ldr	r3, [r7, #24]
 80007f6:	3301      	adds	r3, #1
 80007f8:	6839      	ldr	r1, [r7, #0]
 80007fa:	440b      	add	r3, r1
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	021b      	lsls	r3, r3, #8
 8000800:	b21b      	sxth	r3, r3
 8000802:	4313      	orrs	r3, r2
 8000804:	b21b      	sxth	r3, r3
 8000806:	b29a      	uxth	r2, r3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 800080c:	69bb      	ldr	r3, [r7, #24]
 800080e:	3302      	adds	r3, #2
 8000810:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8000812:	69bb      	ldr	r3, [r7, #24]
 8000814:	683a      	ldr	r2, [r7, #0]
 8000816:	441a      	add	r2, r3
 8000818:	f107 0314 	add.w	r3, r7, #20
 800081c:	4611      	mov	r1, r2
 800081e:	4618      	mov	r0, r3
 8000820:	f001 fe44 	bl	80024ac <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000824:	69bb      	ldr	r3, [r7, #24]
 8000826:	3304      	adds	r3, #4
 8000828:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800082a:	69bb      	ldr	r3, [r7, #24]
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
 800082e:	e00b      	b.n	8000848 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x76>
          inbuffer[k-1]=inbuffer[k];
 8000830:	683a      	ldr	r2, [r7, #0]
 8000832:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000834:	441a      	add	r2, r3
 8000836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000838:	3b01      	subs	r3, #1
 800083a:	6839      	ldr	r1, [r7, #0]
 800083c:	440b      	add	r3, r1
 800083e:	7812      	ldrb	r2, [r2, #0]
 8000840:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 8000842:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000844:	3301      	adds	r3, #1
 8000846:	627b      	str	r3, [r7, #36]	; 0x24
 8000848:	69ba      	ldr	r2, [r7, #24]
 800084a:	697b      	ldr	r3, [r7, #20]
 800084c:	4413      	add	r3, r2
 800084e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000850:	429a      	cmp	r2, r3
 8000852:	d3ed      	bcc.n	8000830 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5e>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8000854:	69ba      	ldr	r2, [r7, #24]
 8000856:	697b      	ldr	r3, [r7, #20]
 8000858:	4413      	add	r3, r2
 800085a:	3b01      	subs	r3, #1
 800085c:	683a      	ldr	r2, [r7, #0]
 800085e:	4413      	add	r3, r2
 8000860:	2200      	movs	r2, #0
 8000862:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8000864:	69bb      	ldr	r3, [r7, #24]
 8000866:	3b01      	subs	r3, #1
 8000868:	683a      	ldr	r2, [r7, #0]
 800086a:	441a      	add	r2, r3
 800086c:	687b      	ldr	r3, [r7, #4]
 800086e:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 8000870:	69ba      	ldr	r2, [r7, #24]
 8000872:	697b      	ldr	r3, [r7, #20]
 8000874:	4413      	add	r3, r2
 8000876:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 8000878:	69bb      	ldr	r3, [r7, #24]
 800087a:	683a      	ldr	r2, [r7, #0]
 800087c:	441a      	add	r2, r3
 800087e:	f107 0310 	add.w	r3, r7, #16
 8000882:	4611      	mov	r1, r2
 8000884:	4618      	mov	r0, r3
 8000886:	f001 fe11 	bl	80024ac <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800088a:	69bb      	ldr	r3, [r7, #24]
 800088c:	3304      	adds	r3, #4
 800088e:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 8000890:	69bb      	ldr	r3, [r7, #24]
 8000892:	623b      	str	r3, [r7, #32]
 8000894:	e00b      	b.n	80008ae <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xdc>
          inbuffer[k-1]=inbuffer[k];
 8000896:	683a      	ldr	r2, [r7, #0]
 8000898:	6a3b      	ldr	r3, [r7, #32]
 800089a:	441a      	add	r2, r3
 800089c:	6a3b      	ldr	r3, [r7, #32]
 800089e:	3b01      	subs	r3, #1
 80008a0:	6839      	ldr	r1, [r7, #0]
 80008a2:	440b      	add	r3, r1
 80008a4:	7812      	ldrb	r2, [r2, #0]
 80008a6:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80008a8:	6a3b      	ldr	r3, [r7, #32]
 80008aa:	3301      	adds	r3, #1
 80008ac:	623b      	str	r3, [r7, #32]
 80008ae:	69ba      	ldr	r2, [r7, #24]
 80008b0:	693b      	ldr	r3, [r7, #16]
 80008b2:	4413      	add	r3, r2
 80008b4:	6a3a      	ldr	r2, [r7, #32]
 80008b6:	429a      	cmp	r2, r3
 80008b8:	d3ed      	bcc.n	8000896 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc4>
      }
      inbuffer[offset+length_message_type-1]=0;
 80008ba:	69ba      	ldr	r2, [r7, #24]
 80008bc:	693b      	ldr	r3, [r7, #16]
 80008be:	4413      	add	r3, r2
 80008c0:	3b01      	subs	r3, #1
 80008c2:	683a      	ldr	r2, [r7, #0]
 80008c4:	4413      	add	r3, r2
 80008c6:	2200      	movs	r2, #0
 80008c8:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80008ca:	69bb      	ldr	r3, [r7, #24]
 80008cc:	3b01      	subs	r3, #1
 80008ce:	683a      	ldr	r2, [r7, #0]
 80008d0:	441a      	add	r2, r3
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 80008d6:	69ba      	ldr	r2, [r7, #24]
 80008d8:	693b      	ldr	r3, [r7, #16]
 80008da:	4413      	add	r3, r2
 80008dc:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 80008de:	69bb      	ldr	r3, [r7, #24]
 80008e0:	683a      	ldr	r2, [r7, #0]
 80008e2:	441a      	add	r2, r3
 80008e4:	f107 030c 	add.w	r3, r7, #12
 80008e8:	4611      	mov	r1, r2
 80008ea:	4618      	mov	r0, r3
 80008ec:	f001 fdde 	bl	80024ac <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80008f0:	69bb      	ldr	r3, [r7, #24]
 80008f2:	3304      	adds	r3, #4
 80008f4:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 80008f6:	69bb      	ldr	r3, [r7, #24]
 80008f8:	61fb      	str	r3, [r7, #28]
 80008fa:	e00b      	b.n	8000914 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x142>
          inbuffer[k-1]=inbuffer[k];
 80008fc:	683a      	ldr	r2, [r7, #0]
 80008fe:	69fb      	ldr	r3, [r7, #28]
 8000900:	441a      	add	r2, r3
 8000902:	69fb      	ldr	r3, [r7, #28]
 8000904:	3b01      	subs	r3, #1
 8000906:	6839      	ldr	r1, [r7, #0]
 8000908:	440b      	add	r3, r1
 800090a:	7812      	ldrb	r2, [r2, #0]
 800090c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 800090e:	69fb      	ldr	r3, [r7, #28]
 8000910:	3301      	adds	r3, #1
 8000912:	61fb      	str	r3, [r7, #28]
 8000914:	69ba      	ldr	r2, [r7, #24]
 8000916:	68fb      	ldr	r3, [r7, #12]
 8000918:	4413      	add	r3, r2
 800091a:	69fa      	ldr	r2, [r7, #28]
 800091c:	429a      	cmp	r2, r3
 800091e:	d3ed      	bcc.n	80008fc <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x12a>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8000920:	69ba      	ldr	r2, [r7, #24]
 8000922:	68fb      	ldr	r3, [r7, #12]
 8000924:	4413      	add	r3, r2
 8000926:	3b01      	subs	r3, #1
 8000928:	683a      	ldr	r2, [r7, #0]
 800092a:	4413      	add	r3, r2
 800092c:	2200      	movs	r2, #0
 800092e:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8000930:	69bb      	ldr	r3, [r7, #24]
 8000932:	3b01      	subs	r3, #1
 8000934:	683a      	ldr	r2, [r7, #0]
 8000936:	441a      	add	r2, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 800093c:	69ba      	ldr	r2, [r7, #24]
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	4413      	add	r3, r2
 8000942:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8000944:	2300      	movs	r3, #0
 8000946:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000948:	68bb      	ldr	r3, [r7, #8]
 800094a:	69ba      	ldr	r2, [r7, #24]
 800094c:	6839      	ldr	r1, [r7, #0]
 800094e:	440a      	add	r2, r1
 8000950:	7812      	ldrb	r2, [r2, #0]
 8000952:	4313      	orrs	r3, r2
 8000954:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000956:	68ba      	ldr	r2, [r7, #8]
 8000958:	69bb      	ldr	r3, [r7, #24]
 800095a:	3301      	adds	r3, #1
 800095c:	6839      	ldr	r1, [r7, #0]
 800095e:	440b      	add	r3, r1
 8000960:	781b      	ldrb	r3, [r3, #0]
 8000962:	021b      	lsls	r3, r3, #8
 8000964:	4313      	orrs	r3, r2
 8000966:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000968:	68ba      	ldr	r2, [r7, #8]
 800096a:	69bb      	ldr	r3, [r7, #24]
 800096c:	3302      	adds	r3, #2
 800096e:	6839      	ldr	r1, [r7, #0]
 8000970:	440b      	add	r3, r1
 8000972:	781b      	ldrb	r3, [r3, #0]
 8000974:	041b      	lsls	r3, r3, #16
 8000976:	4313      	orrs	r3, r2
 8000978:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800097a:	68ba      	ldr	r2, [r7, #8]
 800097c:	69bb      	ldr	r3, [r7, #24]
 800097e:	3303      	adds	r3, #3
 8000980:	6839      	ldr	r1, [r7, #0]
 8000982:	440b      	add	r3, r1
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	061b      	lsls	r3, r3, #24
 8000988:	4313      	orrs	r3, r2
 800098a:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 800098c:	68ba      	ldr	r2, [r7, #8]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 8000992:	69bb      	ldr	r3, [r7, #24]
 8000994:	3304      	adds	r3, #4
 8000996:	61bb      	str	r3, [r7, #24]
     return offset;
 8000998:	69bb      	ldr	r3, [r7, #24]
    }
 800099a:	4618      	mov	r0, r3
 800099c:	3728      	adds	r7, #40	; 0x28
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
	...

080009a4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 80009a4:	b480      	push	{r7}
 80009a6:	b083      	sub	sp, #12
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
 80009ac:	4b02      	ldr	r3, [pc, #8]	; (80009b8 <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x14>)
 80009ae:	4618      	mov	r0, r3
 80009b0:	370c      	adds	r7, #12
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bc80      	pop	{r7}
 80009b6:	4770      	bx	lr
 80009b8:	08005a4c 	.word	0x08005a4c

080009bc <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
 80009c4:	4b02      	ldr	r3, [pc, #8]	; (80009d0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x14>)
 80009c6:	4618      	mov	r0, r3
 80009c8:	370c      	adds	r7, #12
 80009ca:	46bd      	mov	sp, r7
 80009cc:	bc80      	pop	{r7}
 80009ce:	4770      	bx	lr
 80009d0:	08005a68 	.word	0x08005a68

080009d4 <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b082      	sub	sp, #8
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	4618      	mov	r0, r3
 80009e0:	f7ff fd3e 	bl	8000460 <_ZN3ros3MsgC1Ev>
 80009e4:	4a06      	ldr	r2, [pc, #24]	; (8000a00 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	601a      	str	r2, [r3, #0]
      level(0),
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	2200      	movs	r2, #0
 80009ee:	711a      	strb	r2, [r3, #4]
      msg("")
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	4a04      	ldr	r2, [pc, #16]	; (8000a04 <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 80009f4:	609a      	str	r2, [r3, #8]
    {
    }
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	4618      	mov	r0, r3
 80009fa:	3708      	adds	r7, #8
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	08005d2c 	.word	0x08005d2c
 8000a04:	08005a48 	.word	0x08005a48

08000a08 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
 8000a10:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000a12:	2300      	movs	r3, #0
 8000a14:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	683a      	ldr	r2, [r7, #0]
 8000a1a:	4413      	add	r3, r2
 8000a1c:	687a      	ldr	r2, [r7, #4]
 8000a1e:	7912      	ldrb	r2, [r2, #4]
 8000a20:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 8000a22:	68fb      	ldr	r3, [r7, #12]
 8000a24:	3301      	adds	r3, #1
 8000a26:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	689b      	ldr	r3, [r3, #8]
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff fb8d 	bl	800014c <strlen>
 8000a32:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	683a      	ldr	r2, [r7, #0]
 8000a38:	4413      	add	r3, r2
 8000a3a:	68b9      	ldr	r1, [r7, #8]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f001 fd17 	bl	8002470 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000a42:	68fb      	ldr	r3, [r7, #12]
 8000a44:	3304      	adds	r3, #4
 8000a46:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8000a48:	68fb      	ldr	r3, [r7, #12]
 8000a4a:	683a      	ldr	r2, [r7, #0]
 8000a4c:	18d0      	adds	r0, r2, r3
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	689b      	ldr	r3, [r3, #8]
 8000a52:	68ba      	ldr	r2, [r7, #8]
 8000a54:	4619      	mov	r1, r3
 8000a56:	f004 feb7 	bl	80057c8 <memcpy>
      offset += length_msg;
 8000a5a:	68fa      	ldr	r2, [r7, #12]
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	4413      	add	r3, r2
 8000a60:	60fb      	str	r3, [r7, #12]
      return offset;
 8000a62:	68fb      	ldr	r3, [r7, #12]
    }
 8000a64:	4618      	mov	r0, r3
 8000a66:	3710      	adds	r7, #16
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b086      	sub	sp, #24
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000a76:	2300      	movs	r3, #0
 8000a78:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 8000a7a:	693b      	ldr	r3, [r7, #16]
 8000a7c:	683a      	ldr	r2, [r7, #0]
 8000a7e:	4413      	add	r3, r2
 8000a80:	781a      	ldrb	r2, [r3, #0]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 8000a8c:	693b      	ldr	r3, [r7, #16]
 8000a8e:	683a      	ldr	r2, [r7, #0]
 8000a90:	441a      	add	r2, r3
 8000a92:	f107 030c 	add.w	r3, r7, #12
 8000a96:	4611      	mov	r1, r2
 8000a98:	4618      	mov	r0, r3
 8000a9a:	f001 fd07 	bl	80024ac <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8000a9e:	693b      	ldr	r3, [r7, #16]
 8000aa0:	3304      	adds	r3, #4
 8000aa2:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000aa4:	693b      	ldr	r3, [r7, #16]
 8000aa6:	617b      	str	r3, [r7, #20]
 8000aa8:	e00b      	b.n	8000ac2 <_ZN14rosserial_msgs3Log11deserializeEPh+0x56>
          inbuffer[k-1]=inbuffer[k];
 8000aaa:	683a      	ldr	r2, [r7, #0]
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	441a      	add	r2, r3
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	3b01      	subs	r3, #1
 8000ab4:	6839      	ldr	r1, [r7, #0]
 8000ab6:	440b      	add	r3, r1
 8000ab8:	7812      	ldrb	r2, [r2, #0]
 8000aba:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 8000abc:	697b      	ldr	r3, [r7, #20]
 8000abe:	3301      	adds	r3, #1
 8000ac0:	617b      	str	r3, [r7, #20]
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	697a      	ldr	r2, [r7, #20]
 8000aca:	429a      	cmp	r2, r3
 8000acc:	d3ed      	bcc.n	8000aaa <_ZN14rosserial_msgs3Log11deserializeEPh+0x3e>
      }
      inbuffer[offset+length_msg-1]=0;
 8000ace:	693a      	ldr	r2, [r7, #16]
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	3b01      	subs	r3, #1
 8000ad6:	683a      	ldr	r2, [r7, #0]
 8000ad8:	4413      	add	r3, r2
 8000ada:	2200      	movs	r2, #0
 8000adc:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8000ade:	693b      	ldr	r3, [r7, #16]
 8000ae0:	3b01      	subs	r3, #1
 8000ae2:	683a      	ldr	r2, [r7, #0]
 8000ae4:	441a      	add	r2, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8000aea:	693a      	ldr	r2, [r7, #16]
 8000aec:	68fb      	ldr	r3, [r7, #12]
 8000aee:	4413      	add	r3, r2
 8000af0:	613b      	str	r3, [r7, #16]
     return offset;
 8000af2:	693b      	ldr	r3, [r7, #16]
    }
 8000af4:	4618      	mov	r0, r3
 8000af6:	3718      	adds	r7, #24
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}

08000afc <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	6078      	str	r0, [r7, #4]
 8000b04:	4b02      	ldr	r3, [pc, #8]	; (8000b10 <_ZN14rosserial_msgs3Log7getTypeEv+0x14>)
 8000b06:	4618      	mov	r0, r3
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	bc80      	pop	{r7}
 8000b0e:	4770      	bx	lr
 8000b10:	08005a8c 	.word	0x08005a8c

08000b14 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
 8000b1c:	4b02      	ldr	r3, [pc, #8]	; (8000b28 <_ZN14rosserial_msgs3Log6getMD5Ev+0x14>)
 8000b1e:	4618      	mov	r0, r3
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bc80      	pop	{r7}
 8000b26:	4770      	bx	lr
 8000b28:	08005aa0 	.word	0x08005aa0

08000b2c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b082      	sub	sp, #8
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4618      	mov	r0, r3
 8000b38:	f7ff fc92 	bl	8000460 <_ZN3ros3MsgC1Ev>
 8000b3c:	4a11      	ldr	r2, [pc, #68]	; (8000b84 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 8000b3e:	687b      	ldr	r3, [r7, #4]
 8000b40:	601a      	str	r2, [r3, #0]
      ints_length(0), st_ints(), ints(nullptr),
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	2200      	movs	r2, #0
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	609a      	str	r2, [r3, #8]
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	2200      	movs	r2, #0
 8000b52:	60da      	str	r2, [r3, #12]
      floats_length(0), st_floats(), floats(nullptr),
 8000b54:	687b      	ldr	r3, [r7, #4]
 8000b56:	2200      	movs	r2, #0
 8000b58:	611a      	str	r2, [r3, #16]
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	f04f 0200 	mov.w	r2, #0
 8000b60:	615a      	str	r2, [r3, #20]
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	2200      	movs	r2, #0
 8000b66:	619a      	str	r2, [r3, #24]
      strings_length(0), st_strings(), strings(nullptr)
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	61da      	str	r2, [r3, #28]
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	2200      	movs	r2, #0
 8000b72:	621a      	str	r2, [r3, #32]
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2200      	movs	r2, #0
 8000b78:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	08005d14 	.word	0x08005d14

08000b88 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b08a      	sub	sp, #40	; 0x28
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000b92:	2300      	movs	r3, #0
 8000b94:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	6859      	ldr	r1, [r3, #4]
 8000b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9c:	683a      	ldr	r2, [r7, #0]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	b2ca      	uxtb	r2, r1
 8000ba2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	685b      	ldr	r3, [r3, #4]
 8000ba8:	0a19      	lsrs	r1, r3, #8
 8000baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bac:	3301      	adds	r3, #1
 8000bae:	683a      	ldr	r2, [r7, #0]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	b2ca      	uxtb	r2, r1
 8000bb4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	685b      	ldr	r3, [r3, #4]
 8000bba:	0c19      	lsrs	r1, r3, #16
 8000bbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bbe:	3302      	adds	r3, #2
 8000bc0:	683a      	ldr	r2, [r7, #0]
 8000bc2:	4413      	add	r3, r2
 8000bc4:	b2ca      	uxtb	r2, r1
 8000bc6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	0e19      	lsrs	r1, r3, #24
 8000bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bd0:	3303      	adds	r3, #3
 8000bd2:	683a      	ldr	r2, [r7, #0]
 8000bd4:	4413      	add	r3, r2
 8000bd6:	b2ca      	uxtb	r2, r1
 8000bd8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 8000bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bdc:	3304      	adds	r3, #4
 8000bde:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000be0:	2300      	movs	r3, #0
 8000be2:	623b      	str	r3, [r7, #32]
 8000be4:	e02a      	b.n	8000c3c <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xb4>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	68da      	ldr	r2, [r3, #12]
 8000bea:	6a3b      	ldr	r3, [r7, #32]
 8000bec:	009b      	lsls	r3, r3, #2
 8000bee:	4413      	add	r3, r2
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 8000bf4:	6939      	ldr	r1, [r7, #16]
 8000bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bf8:	683a      	ldr	r2, [r7, #0]
 8000bfa:	4413      	add	r3, r2
 8000bfc:	b2ca      	uxtb	r2, r1
 8000bfe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8000c00:	693b      	ldr	r3, [r7, #16]
 8000c02:	0a19      	lsrs	r1, r3, #8
 8000c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c06:	3301      	adds	r3, #1
 8000c08:	683a      	ldr	r2, [r7, #0]
 8000c0a:	4413      	add	r3, r2
 8000c0c:	b2ca      	uxtb	r2, r1
 8000c0e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8000c10:	693b      	ldr	r3, [r7, #16]
 8000c12:	0c19      	lsrs	r1, r3, #16
 8000c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c16:	3302      	adds	r3, #2
 8000c18:	683a      	ldr	r2, [r7, #0]
 8000c1a:	4413      	add	r3, r2
 8000c1c:	b2ca      	uxtb	r2, r1
 8000c1e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8000c20:	693b      	ldr	r3, [r7, #16]
 8000c22:	0e19      	lsrs	r1, r3, #24
 8000c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c26:	3303      	adds	r3, #3
 8000c28:	683a      	ldr	r2, [r7, #0]
 8000c2a:	4413      	add	r3, r2
 8000c2c:	b2ca      	uxtb	r2, r1
 8000c2e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8000c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c32:	3304      	adds	r3, #4
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8000c36:	6a3b      	ldr	r3, [r7, #32]
 8000c38:	3301      	adds	r3, #1
 8000c3a:	623b      	str	r3, [r7, #32]
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	6a3a      	ldr	r2, [r7, #32]
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d3cf      	bcc.n	8000be6 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5e>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	6919      	ldr	r1, [r3, #16]
 8000c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c4c:	683a      	ldr	r2, [r7, #0]
 8000c4e:	4413      	add	r3, r2
 8000c50:	b2ca      	uxtb	r2, r1
 8000c52:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	691b      	ldr	r3, [r3, #16]
 8000c58:	0a19      	lsrs	r1, r3, #8
 8000c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c5c:	3301      	adds	r3, #1
 8000c5e:	683a      	ldr	r2, [r7, #0]
 8000c60:	4413      	add	r3, r2
 8000c62:	b2ca      	uxtb	r2, r1
 8000c64:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	691b      	ldr	r3, [r3, #16]
 8000c6a:	0c19      	lsrs	r1, r3, #16
 8000c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c6e:	3302      	adds	r3, #2
 8000c70:	683a      	ldr	r2, [r7, #0]
 8000c72:	4413      	add	r3, r2
 8000c74:	b2ca      	uxtb	r2, r1
 8000c76:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	691b      	ldr	r3, [r3, #16]
 8000c7c:	0e19      	lsrs	r1, r3, #24
 8000c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c80:	3303      	adds	r3, #3
 8000c82:	683a      	ldr	r2, [r7, #0]
 8000c84:	4413      	add	r3, r2
 8000c86:	b2ca      	uxtb	r2, r1
 8000c88:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 8000c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c8c:	3304      	adds	r3, #4
 8000c8e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000c90:	2300      	movs	r3, #0
 8000c92:	61fb      	str	r3, [r7, #28]
 8000c94:	e02a      	b.n	8000cec <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x164>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	699a      	ldr	r2, [r3, #24]
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	009b      	lsls	r3, r3, #2
 8000c9e:	4413      	add	r3, r2
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 8000ca4:	68f9      	ldr	r1, [r7, #12]
 8000ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ca8:	683a      	ldr	r2, [r7, #0]
 8000caa:	4413      	add	r3, r2
 8000cac:	b2ca      	uxtb	r2, r1
 8000cae:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 8000cb0:	68fb      	ldr	r3, [r7, #12]
 8000cb2:	0a19      	lsrs	r1, r3, #8
 8000cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cb6:	3301      	adds	r3, #1
 8000cb8:	683a      	ldr	r2, [r7, #0]
 8000cba:	4413      	add	r3, r2
 8000cbc:	b2ca      	uxtb	r2, r1
 8000cbe:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	0c19      	lsrs	r1, r3, #16
 8000cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cc6:	3302      	adds	r3, #2
 8000cc8:	683a      	ldr	r2, [r7, #0]
 8000cca:	4413      	add	r3, r2
 8000ccc:	b2ca      	uxtb	r2, r1
 8000cce:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	0e19      	lsrs	r1, r3, #24
 8000cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cd6:	3303      	adds	r3, #3
 8000cd8:	683a      	ldr	r2, [r7, #0]
 8000cda:	4413      	add	r3, r2
 8000cdc:	b2ca      	uxtb	r2, r1
 8000cde:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8000ce0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce2:	3304      	adds	r3, #4
 8000ce4:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	61fb      	str	r3, [r7, #28]
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	691b      	ldr	r3, [r3, #16]
 8000cf0:	69fa      	ldr	r2, [r7, #28]
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	d3cf      	bcc.n	8000c96 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10e>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	69d9      	ldr	r1, [r3, #28]
 8000cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cfc:	683a      	ldr	r2, [r7, #0]
 8000cfe:	4413      	add	r3, r2
 8000d00:	b2ca      	uxtb	r2, r1
 8000d02:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	69db      	ldr	r3, [r3, #28]
 8000d08:	0a19      	lsrs	r1, r3, #8
 8000d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	683a      	ldr	r2, [r7, #0]
 8000d10:	4413      	add	r3, r2
 8000d12:	b2ca      	uxtb	r2, r1
 8000d14:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	69db      	ldr	r3, [r3, #28]
 8000d1a:	0c19      	lsrs	r1, r3, #16
 8000d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d1e:	3302      	adds	r3, #2
 8000d20:	683a      	ldr	r2, [r7, #0]
 8000d22:	4413      	add	r3, r2
 8000d24:	b2ca      	uxtb	r2, r1
 8000d26:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	69db      	ldr	r3, [r3, #28]
 8000d2c:	0e19      	lsrs	r1, r3, #24
 8000d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d30:	3303      	adds	r3, #3
 8000d32:	683a      	ldr	r2, [r7, #0]
 8000d34:	4413      	add	r3, r2
 8000d36:	b2ca      	uxtb	r2, r1
 8000d38:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 8000d3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d3c:	3304      	adds	r3, #4
 8000d3e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000d40:	2300      	movs	r3, #0
 8000d42:	61bb      	str	r3, [r7, #24]
 8000d44:	e027      	b.n	8000d96 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x20e>
      uint32_t length_stringsi = strlen(this->strings[i]);
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d4a:	69bb      	ldr	r3, [r7, #24]
 8000d4c:	009b      	lsls	r3, r3, #2
 8000d4e:	4413      	add	r3, r2
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4618      	mov	r0, r3
 8000d54:	f7ff f9fa 	bl	800014c <strlen>
 8000d58:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 8000d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5c:	683a      	ldr	r2, [r7, #0]
 8000d5e:	4413      	add	r3, r2
 8000d60:	6979      	ldr	r1, [r7, #20]
 8000d62:	4618      	mov	r0, r3
 8000d64:	f001 fb84 	bl	8002470 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8000d68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6a:	3304      	adds	r3, #4
 8000d6c:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 8000d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d70:	683a      	ldr	r2, [r7, #0]
 8000d72:	18d0      	adds	r0, r2, r3
 8000d74:	687b      	ldr	r3, [r7, #4]
 8000d76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000d78:	69bb      	ldr	r3, [r7, #24]
 8000d7a:	009b      	lsls	r3, r3, #2
 8000d7c:	4413      	add	r3, r2
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	697a      	ldr	r2, [r7, #20]
 8000d82:	4619      	mov	r1, r3
 8000d84:	f004 fd20 	bl	80057c8 <memcpy>
      offset += length_stringsi;
 8000d88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000d8a:	697b      	ldr	r3, [r7, #20]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8000d90:	69bb      	ldr	r3, [r7, #24]
 8000d92:	3301      	adds	r3, #1
 8000d94:	61bb      	str	r3, [r7, #24]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	69db      	ldr	r3, [r3, #28]
 8000d9a:	69ba      	ldr	r2, [r7, #24]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d3d2      	bcc.n	8000d46 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1be>
      }
      return offset;
 8000da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8000da2:	4618      	mov	r0, r3
 8000da4:	3728      	adds	r7, #40	; 0x28
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}

08000daa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8000daa:	b580      	push	{r7, lr}
 8000dac:	b08e      	sub	sp, #56	; 0x38
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	6078      	str	r0, [r7, #4]
 8000db2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8000db4:	2300      	movs	r3, #0
 8000db6:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000db8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dba:	683a      	ldr	r2, [r7, #0]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	781b      	ldrb	r3, [r3, #0]
 8000dc0:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000dc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dc4:	3301      	adds	r3, #1
 8000dc6:	683a      	ldr	r2, [r7, #0]
 8000dc8:	4413      	add	r3, r2
 8000dca:	781b      	ldrb	r3, [r3, #0]
 8000dcc:	021b      	lsls	r3, r3, #8
 8000dce:	6a3a      	ldr	r2, [r7, #32]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000dd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dd6:	3302      	adds	r3, #2
 8000dd8:	683a      	ldr	r2, [r7, #0]
 8000dda:	4413      	add	r3, r2
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	041b      	lsls	r3, r3, #16
 8000de0:	6a3a      	ldr	r2, [r7, #32]
 8000de2:	4313      	orrs	r3, r2
 8000de4:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000de6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000de8:	3303      	adds	r3, #3
 8000dea:	683a      	ldr	r2, [r7, #0]
 8000dec:	4413      	add	r3, r2
 8000dee:	781b      	ldrb	r3, [r3, #0]
 8000df0:	061b      	lsls	r3, r3, #24
 8000df2:	6a3a      	ldr	r2, [r7, #32]
 8000df4:	4313      	orrs	r3, r2
 8000df6:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8000df8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dfa:	3304      	adds	r3, #4
 8000dfc:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	685b      	ldr	r3, [r3, #4]
 8000e02:	6a3a      	ldr	r2, [r7, #32]
 8000e04:	429a      	cmp	r2, r3
 8000e06:	d90a      	bls.n	8000e1e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	68da      	ldr	r2, [r3, #12]
 8000e0c:	6a3b      	ldr	r3, [r7, #32]
 8000e0e:	009b      	lsls	r3, r3, #2
 8000e10:	4619      	mov	r1, r3
 8000e12:	4610      	mov	r0, r2
 8000e14:	f004 fc6c 	bl	80056f0 <realloc>
 8000e18:	4602      	mov	r2, r0
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6a3a      	ldr	r2, [r7, #32]
 8000e22:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8000e24:	2300      	movs	r3, #0
 8000e26:	633b      	str	r3, [r7, #48]	; 0x30
 8000e28:	e035      	b.n	8000e96 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xec>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8000e2a:	2300      	movs	r3, #0
 8000e2c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000e32:	6839      	ldr	r1, [r7, #0]
 8000e34:	440a      	add	r2, r1
 8000e36:	7812      	ldrb	r2, [r2, #0]
 8000e38:	4313      	orrs	r3, r2
 8000e3a:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000e3c:	697a      	ldr	r2, [r7, #20]
 8000e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e40:	3301      	adds	r3, #1
 8000e42:	6839      	ldr	r1, [r7, #0]
 8000e44:	440b      	add	r3, r1
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	021b      	lsls	r3, r3, #8
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000e4e:	697a      	ldr	r2, [r7, #20]
 8000e50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e52:	3302      	adds	r3, #2
 8000e54:	6839      	ldr	r1, [r7, #0]
 8000e56:	440b      	add	r3, r1
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	041b      	lsls	r3, r3, #16
 8000e5c:	4313      	orrs	r3, r2
 8000e5e:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000e60:	697a      	ldr	r2, [r7, #20]
 8000e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e64:	3303      	adds	r3, #3
 8000e66:	6839      	ldr	r1, [r7, #0]
 8000e68:	440b      	add	r3, r1
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	061b      	lsls	r3, r3, #24
 8000e6e:	4313      	orrs	r3, r2
 8000e70:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8000e72:	697a      	ldr	r2, [r7, #20]
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8000e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000e7a:	3304      	adds	r3, #4
 8000e7c:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	68da      	ldr	r2, [r3, #12]
 8000e82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e84:	009b      	lsls	r3, r3, #2
 8000e86:	4413      	add	r3, r2
 8000e88:	687a      	ldr	r2, [r7, #4]
 8000e8a:	3208      	adds	r2, #8
 8000e8c:	6812      	ldr	r2, [r2, #0]
 8000e8e:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8000e90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000e92:	3301      	adds	r3, #1
 8000e94:	633b      	str	r3, [r7, #48]	; 0x30
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000e9c:	429a      	cmp	r2, r3
 8000e9e:	d3c4      	bcc.n	8000e2a <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x80>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000ea0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ea2:	683a      	ldr	r2, [r7, #0]
 8000ea4:	4413      	add	r3, r2
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eac:	3301      	adds	r3, #1
 8000eae:	683a      	ldr	r2, [r7, #0]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	781b      	ldrb	r3, [r3, #0]
 8000eb4:	021b      	lsls	r3, r3, #8
 8000eb6:	69fa      	ldr	r2, [r7, #28]
 8000eb8:	4313      	orrs	r3, r2
 8000eba:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000ebc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ebe:	3302      	adds	r3, #2
 8000ec0:	683a      	ldr	r2, [r7, #0]
 8000ec2:	4413      	add	r3, r2
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	041b      	lsls	r3, r3, #16
 8000ec8:	69fa      	ldr	r2, [r7, #28]
 8000eca:	4313      	orrs	r3, r2
 8000ecc:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ed0:	3303      	adds	r3, #3
 8000ed2:	683a      	ldr	r2, [r7, #0]
 8000ed4:	4413      	add	r3, r2
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	061b      	lsls	r3, r3, #24
 8000eda:	69fa      	ldr	r2, [r7, #28]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8000ee0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ee2:	3304      	adds	r3, #4
 8000ee4:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	691b      	ldr	r3, [r3, #16]
 8000eea:	69fa      	ldr	r2, [r7, #28]
 8000eec:	429a      	cmp	r2, r3
 8000eee:	d90a      	bls.n	8000f06 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	699a      	ldr	r2, [r3, #24]
 8000ef4:	69fb      	ldr	r3, [r7, #28]
 8000ef6:	009b      	lsls	r3, r3, #2
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4610      	mov	r0, r2
 8000efc:	f004 fbf8 	bl	80056f0 <realloc>
 8000f00:	4602      	mov	r2, r0
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	69fa      	ldr	r2, [r7, #28]
 8000f0a:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f10:	e035      	b.n	8000f7e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1d4>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8000f12:	2300      	movs	r3, #0
 8000f14:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8000f16:	693b      	ldr	r3, [r7, #16]
 8000f18:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000f1a:	6839      	ldr	r1, [r7, #0]
 8000f1c:	440a      	add	r2, r1
 8000f1e:	7812      	ldrb	r2, [r2, #0]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8000f24:	693a      	ldr	r2, [r7, #16]
 8000f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f28:	3301      	adds	r3, #1
 8000f2a:	6839      	ldr	r1, [r7, #0]
 8000f2c:	440b      	add	r3, r1
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	021b      	lsls	r3, r3, #8
 8000f32:	4313      	orrs	r3, r2
 8000f34:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8000f36:	693a      	ldr	r2, [r7, #16]
 8000f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f3a:	3302      	adds	r3, #2
 8000f3c:	6839      	ldr	r1, [r7, #0]
 8000f3e:	440b      	add	r3, r1
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	041b      	lsls	r3, r3, #16
 8000f44:	4313      	orrs	r3, r2
 8000f46:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8000f48:	693a      	ldr	r2, [r7, #16]
 8000f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f4c:	3303      	adds	r3, #3
 8000f4e:	6839      	ldr	r1, [r7, #0]
 8000f50:	440b      	add	r3, r1
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	061b      	lsls	r3, r3, #24
 8000f56:	4313      	orrs	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8000f5a:	693a      	ldr	r2, [r7, #16]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8000f60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f62:	3304      	adds	r3, #4
 8000f64:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	699a      	ldr	r2, [r3, #24]
 8000f6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	4413      	add	r3, r2
 8000f70:	687a      	ldr	r2, [r7, #4]
 8000f72:	3214      	adds	r2, #20
 8000f74:	6812      	ldr	r2, [r2, #0]
 8000f76:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8000f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f7a:	3301      	adds	r3, #1
 8000f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	691b      	ldr	r3, [r3, #16]
 8000f82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000f84:	429a      	cmp	r2, r3
 8000f86:	d3c4      	bcc.n	8000f12 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x168>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8000f88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f8a:	683a      	ldr	r2, [r7, #0]
 8000f8c:	4413      	add	r3, r2
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8000f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f94:	3301      	adds	r3, #1
 8000f96:	683a      	ldr	r2, [r7, #0]
 8000f98:	4413      	add	r3, r2
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	021b      	lsls	r3, r3, #8
 8000f9e:	69ba      	ldr	r2, [r7, #24]
 8000fa0:	4313      	orrs	r3, r2
 8000fa2:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8000fa4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fa6:	3302      	adds	r3, #2
 8000fa8:	683a      	ldr	r2, [r7, #0]
 8000faa:	4413      	add	r3, r2
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	041b      	lsls	r3, r3, #16
 8000fb0:	69ba      	ldr	r2, [r7, #24]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8000fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fb8:	3303      	adds	r3, #3
 8000fba:	683a      	ldr	r2, [r7, #0]
 8000fbc:	4413      	add	r3, r2
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	061b      	lsls	r3, r3, #24
 8000fc2:	69ba      	ldr	r2, [r7, #24]
 8000fc4:	4313      	orrs	r3, r2
 8000fc6:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8000fc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000fca:	3304      	adds	r3, #4
 8000fcc:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	69db      	ldr	r3, [r3, #28]
 8000fd2:	69ba      	ldr	r2, [r7, #24]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d90a      	bls.n	8000fee <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fdc:	69bb      	ldr	r3, [r7, #24]
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	4619      	mov	r1, r3
 8000fe2:	4610      	mov	r0, r2
 8000fe4:	f004 fb84 	bl	80056f0 <realloc>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	69ba      	ldr	r2, [r7, #24]
 8000ff2:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	62bb      	str	r3, [r7, #40]	; 0x28
 8000ff8:	e03e      	b.n	8001078 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2ce>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8000ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000ffc:	683a      	ldr	r2, [r7, #0]
 8000ffe:	441a      	add	r2, r3
 8001000:	f107 030c 	add.w	r3, r7, #12
 8001004:	4611      	mov	r1, r2
 8001006:	4618      	mov	r0, r3
 8001008:	f001 fa50 	bl	80024ac <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 800100c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800100e:	3304      	adds	r3, #4
 8001010:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001014:	627b      	str	r3, [r7, #36]	; 0x24
 8001016:	e00b      	b.n	8001030 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x286>
          inbuffer[k-1]=inbuffer[k];
 8001018:	683a      	ldr	r2, [r7, #0]
 800101a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800101c:	441a      	add	r2, r3
 800101e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001020:	3b01      	subs	r3, #1
 8001022:	6839      	ldr	r1, [r7, #0]
 8001024:	440b      	add	r3, r1
 8001026:	7812      	ldrb	r2, [r2, #0]
 8001028:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 800102a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800102c:	3301      	adds	r3, #1
 800102e:	627b      	str	r3, [r7, #36]	; 0x24
 8001030:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	4413      	add	r3, r2
 8001036:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001038:	429a      	cmp	r2, r3
 800103a:	d3ed      	bcc.n	8001018 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x26e>
      }
      inbuffer[offset+length_st_strings-1]=0;
 800103c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800103e:	68fb      	ldr	r3, [r7, #12]
 8001040:	4413      	add	r3, r2
 8001042:	3b01      	subs	r3, #1
 8001044:	683a      	ldr	r2, [r7, #0]
 8001046:	4413      	add	r3, r2
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 800104c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800104e:	3b01      	subs	r3, #1
 8001050:	683a      	ldr	r2, [r7, #0]
 8001052:	441a      	add	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001058:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	4413      	add	r3, r2
 800105e:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001066:	009b      	lsls	r3, r3, #2
 8001068:	4413      	add	r3, r2
 800106a:	687a      	ldr	r2, [r7, #4]
 800106c:	3220      	adds	r2, #32
 800106e:	6812      	ldr	r2, [r2, #0]
 8001070:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001072:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001074:	3301      	adds	r3, #1
 8001076:	62bb      	str	r3, [r7, #40]	; 0x28
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	69db      	ldr	r3, [r3, #28]
 800107c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800107e:	429a      	cmp	r2, r3
 8001080:	d3bb      	bcc.n	8000ffa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x250>
      }
     return offset;
 8001082:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001084:	4618      	mov	r0, r3
 8001086:	3738      	adds	r7, #56	; 0x38
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	4b02      	ldr	r3, [pc, #8]	; (80010a0 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x14>)
 8001096:	4618      	mov	r0, r3
 8001098:	370c      	adds	r7, #12
 800109a:	46bd      	mov	sp, r7
 800109c:	bc80      	pop	{r7}
 800109e:	4770      	bx	lr
 80010a0:	08005c38 	.word	0x08005c38

080010a4 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
 80010ac:	4b02      	ldr	r3, [pc, #8]	; (80010b8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x14>)
 80010ae:	4618      	mov	r0, r3
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr
 80010b8:	08005ac4 	.word	0x08005ac4

080010bc <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 80010bc:	b480      	push	{r7}
 80010be:	b085      	sub	sp, #20
 80010c0:	af00      	add	r7, sp, #0
 80010c2:	60f8      	str	r0, [r7, #12]
 80010c4:	60b9      	str	r1, [r7, #8]
 80010c6:	607a      	str	r2, [r7, #4]
 80010c8:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	68ba      	ldr	r2, [r7, #8]
 80010ce:	601a      	str	r2, [r3, #0]
    msg_(msg),
 80010d0:	68fb      	ldr	r3, [r7, #12]
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	605a      	str	r2, [r3, #4]
    endpoint_(endpoint) {};
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	683a      	ldr	r2, [r7, #0]
 80010da:	611a      	str	r2, [r3, #16]
 80010dc:	68fb      	ldr	r3, [r7, #12]
 80010de:	4618      	mov	r0, r3
 80010e0:	3714      	adds	r7, #20
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bc80      	pop	{r7}
 80010e6:	4770      	bx	lr

080010e8 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	68d8      	ldr	r0, [r3, #12]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	68db      	ldr	r3, [r3, #12]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	687a      	ldr	r2, [r7, #4]
 8001100:	6891      	ldr	r1, [r2, #8]
 8001102:	683a      	ldr	r2, [r7, #0]
 8001104:	4798      	blx	r3
 8001106:	4603      	mov	r3, r0
  };
 8001108:	4618      	mov	r0, r3
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}

08001110 <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	691b      	ldr	r3, [r3, #16]
  }
 800111c:	4618      	mov	r0, r3
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	bc80      	pop	{r7}
 8001124:	4770      	bx	lr

08001126 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8001126:	b480      	push	{r7}
 8001128:	b083      	sub	sp, #12
 800112a:	af00      	add	r7, sp, #0
 800112c:	6078      	str	r0, [r7, #4]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	685b      	ldr	r3, [r3, #4]
 8001138:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 800113c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001140:	4618      	mov	r0, r3
 8001142:	370c      	adds	r7, #12
 8001144:	46bd      	mov	sp, r7
 8001146:	bc80      	pop	{r7}
 8001148:	4770      	bx	lr
	...

0800114c <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
      huart(&huart2), rind(0), twind(0), tfind(0){
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	4a0a      	ldr	r2, [pc, #40]	; (8001180 <_ZN13STM32HardwareC1Ev+0x34>)
 8001158:	601a      	str	r2, [r3, #0]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	2200      	movs	r2, #0
 800115e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	2200      	movs	r2, #0
 8001166:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	2200      	movs	r2, #0
 800116e:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4618      	mov	r0, r3
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	bc80      	pop	{r7}
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	2000008c 	.word	0x2000008c

08001184 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8001184:	b580      	push	{r7, lr}
 8001186:	b082      	sub	sp, #8
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f000 f804 	bl	800119a <_ZN13STM32Hardware10reset_rbufEv>
    }
 8001192:	bf00      	nop
 8001194:	3708      	adds	r7, #8
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}

0800119a <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 800119a:	b580      	push	{r7, lr}
 800119c:	b082      	sub	sp, #8
 800119e:	af00      	add	r7, sp, #0
 80011a0:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6818      	ldr	r0, [r3, #0]
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	3304      	adds	r3, #4
 80011aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011ae:	4619      	mov	r1, r3
 80011b0:	f003 fb7c 	bl	80048ac <HAL_UART_Receive_DMA>
    }
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}

080011bc <_ZN13STM32Hardware4readEv>:

    int read(){
 80011bc:	b590      	push	{r4, r7, lr}
 80011be:	b085      	sub	sp, #20
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
      int c = -1;
 80011c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011c8:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 80011d0:	6878      	ldr	r0, [r7, #4]
 80011d2:	f7ff ffa8 	bl	8001126 <_ZN13STM32Hardware10getRdmaIndEv>
 80011d6:	4603      	mov	r3, r0
 80011d8:	429c      	cmp	r4, r3
 80011da:	bf14      	ite	ne
 80011dc:	2301      	movne	r3, #1
 80011de:	2300      	moveq	r3, #0
 80011e0:	b2db      	uxtb	r3, r3
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d012      	beq.n	800120c <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80011ec:	1c59      	adds	r1, r3, #1
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 80011f4:	687a      	ldr	r2, [r7, #4]
 80011f6:	4413      	add	r3, r2
 80011f8:	791b      	ldrb	r3, [r3, #4]
 80011fa:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001202:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 800120c:	68fb      	ldr	r3, [r7, #12]
    }
 800120e:	4618      	mov	r0, r3
 8001210:	3714      	adds	r7, #20
 8001212:	46bd      	mov	sp, r7
 8001214:	bd90      	pop	{r4, r7, pc}
	...

08001218 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8001218:	b580      	push	{r7, lr}
 800121a:	b084      	sub	sp, #16
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001228:	b2db      	uxtb	r3, r3
 800122a:	2b20      	cmp	r3, #32
 800122c:	d108      	bne.n	8001240 <_ZN13STM32Hardware5flushEv+0x28>
 800122e:	4b33      	ldr	r3, [pc, #204]	; (80012fc <_ZN13STM32Hardware5flushEv+0xe4>)
 8001230:	781b      	ldrb	r3, [r3, #0]
 8001232:	f083 0301 	eor.w	r3, r3, #1
 8001236:	b2db      	uxtb	r3, r3
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <_ZN13STM32Hardware5flushEv+0x28>
 800123c:	2301      	movs	r3, #1
 800123e:	e000      	b.n	8001242 <_ZN13STM32Hardware5flushEv+0x2a>
 8001240:	2300      	movs	r3, #0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d055      	beq.n	80012f2 <_ZN13STM32Hardware5flushEv+0xda>
        mutex = true;
 8001246:	4b2d      	ldr	r3, [pc, #180]	; (80012fc <_ZN13STM32Hardware5flushEv+0xe4>)
 8001248:	2201      	movs	r2, #1
 800124a:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001258:	429a      	cmp	r2, r3
 800125a:	d047      	beq.n	80012ec <_ZN13STM32Hardware5flushEv+0xd4>
          uint16_t len = 0;
 800125c:	2300      	movs	r3, #0
 800125e:	81fb      	strh	r3, [r7, #14]
		  if(tfind < twind){
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 800126c:	429a      	cmp	r2, r3
 800126e:	d217      	bcs.n	80012a0 <_ZN13STM32Hardware5flushEv+0x88>
			len = twind - tfind;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001276:	b29a      	uxth	r2, r3
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800127e:	b29b      	uxth	r3, r3
 8001280:	1ad3      	subs	r3, r2, r3
 8001282:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6818      	ldr	r0, [r3, #0]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 800128e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	4413      	add	r3, r2
 8001296:	89fa      	ldrh	r2, [r7, #14]
 8001298:	4619      	mov	r1, r3
 800129a:	f003 fa97 	bl	80047cc <HAL_UART_Transmit_DMA>
 800129e:	e01f      	b.n	80012e0 <_ZN13STM32Hardware5flushEv+0xc8>
		  }else{
			len = tbuflen - tfind;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80012a6:	b29b      	uxth	r3, r3
 80012a8:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 80012ac:	81fb      	strh	r3, [r7, #14]
			HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	6818      	ldr	r0, [r3, #0]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 80012b8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80012bc:	687a      	ldr	r2, [r7, #4]
 80012be:	4413      	add	r3, r2
 80012c0:	89fa      	ldrh	r2, [r7, #14]
 80012c2:	4619      	mov	r1, r3
 80012c4:	f003 fa82 	bl	80047cc <HAL_UART_Transmit_DMA>
			HAL_UART_Transmit_DMA(huart, tbuf, twind);
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6818      	ldr	r0, [r3, #0]
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	f503 7102 	add.w	r1, r3, #520	; 0x208
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 80012d8:	b29b      	uxth	r3, r3
 80012da:	461a      	mov	r2, r3
 80012dc:	f003 fa76 	bl	80047cc <HAL_UART_Transmit_DMA>
		  }
          tfind = twind;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 80012ec:	4b03      	ldr	r3, [pc, #12]	; (80012fc <_ZN13STM32Hardware5flushEv+0xe4>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	701a      	strb	r2, [r3, #0]
      }
    }
 80012f2:	bf00      	nop
 80012f4:	3710      	adds	r7, #16
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	2000015c 	.word	0x2000015c

08001300 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8001300:	b580      	push	{r7, lr}
 8001302:	b086      	sub	sp, #24
 8001304:	af00      	add	r7, sp, #0
 8001306:	60f8      	str	r0, [r7, #12]
 8001308:	60b9      	str	r1, [r7, #8]
 800130a:	607a      	str	r2, [r7, #4]
      int n = length;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8001310:	697b      	ldr	r3, [r7, #20]
 8001312:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001316:	bfa8      	it	ge
 8001318:	f44f 7300 	movge.w	r3, #512	; 0x200
 800131c:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001324:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8001328:	697b      	ldr	r3, [r7, #20]
 800132a:	4293      	cmp	r3, r2
 800132c:	bf28      	it	cs
 800132e:	4613      	movcs	r3, r2
 8001330:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001338:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800133c:	68fa      	ldr	r2, [r7, #12]
 800133e:	4413      	add	r3, r2
 8001340:	693a      	ldr	r2, [r7, #16]
 8001342:	68b9      	ldr	r1, [r7, #8]
 8001344:	4618      	mov	r0, r3
 8001346:	f004 fa3f 	bl	80057c8 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 800134a:	68fb      	ldr	r3, [r7, #12]
 800134c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	4413      	add	r3, r2
 8001354:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 800135e:	697a      	ldr	r2, [r7, #20]
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	429a      	cmp	r2, r3
 8001364:	d00b      	beq.n	800137e <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	f503 7002 	add.w	r0, r3, #520	; 0x208
 800136c:	693b      	ldr	r3, [r7, #16]
 800136e:	68ba      	ldr	r2, [r7, #8]
 8001370:	18d1      	adds	r1, r2, r3
 8001372:	697a      	ldr	r2, [r7, #20]
 8001374:	693b      	ldr	r3, [r7, #16]
 8001376:	1ad3      	subs	r3, r2, r3
 8001378:	461a      	mov	r2, r3
 800137a:	f004 fa25 	bl	80057c8 <memcpy>
      }

      flush();
 800137e:	68f8      	ldr	r0, [r7, #12]
 8001380:	f7ff ff4a 	bl	8001218 <_ZN13STM32Hardware5flushEv>
    }
 8001384:	bf00      	nop
 8001386:	3718      	adds	r7, #24
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}

0800138c <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick(); }
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	f002 f824 	bl	80033e0 <HAL_GetTick>
 8001398:	4603      	mov	r3, r0
 800139a:	4618      	mov	r0, r3
 800139c:	3708      	adds	r7, #8
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}
	...

080013a4 <_ZN8std_msgs6StringC1Ev>:
  {
    public:
      typedef const char* _data_type;
      _data_type data;

    String():
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b082      	sub	sp, #8
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
      data("")
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f7ff f856 	bl	8000460 <_ZN3ros3MsgC1Ev>
 80013b4:	4a05      	ldr	r2, [pc, #20]	; (80013cc <_ZN8std_msgs6StringC1Ev+0x28>)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a04      	ldr	r2, [pc, #16]	; (80013d0 <_ZN8std_msgs6StringC1Ev+0x2c>)
 80013be:	605a      	str	r2, [r3, #4]
    {
    }
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	4618      	mov	r0, r3
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	08005cd0 	.word	0x08005cd0
 80013d0:	08005a48 	.word	0x08005a48

080013d4 <_ZNK8std_msgs6String9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80013de:	2300      	movs	r3, #0
 80013e0:	60fb      	str	r3, [r7, #12]
      uint32_t length_data = strlen(this->data);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	685b      	ldr	r3, [r3, #4]
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7fe feb0 	bl	800014c <strlen>
 80013ec:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_data);
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	683a      	ldr	r2, [r7, #0]
 80013f2:	4413      	add	r3, r2
 80013f4:	68b9      	ldr	r1, [r7, #8]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f001 f83a 	bl	8002470 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	3304      	adds	r3, #4
 8001400:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->data, length_data);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	683a      	ldr	r2, [r7, #0]
 8001406:	18d0      	adds	r0, r2, r3
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	68ba      	ldr	r2, [r7, #8]
 800140e:	4619      	mov	r1, r3
 8001410:	f004 f9da 	bl	80057c8 <memcpy>
      offset += length_data;
 8001414:	68fa      	ldr	r2, [r7, #12]
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	4413      	add	r3, r2
 800141a:	60fb      	str	r3, [r7, #12]
      return offset;
 800141c:	68fb      	ldr	r3, [r7, #12]
    }
 800141e:	4618      	mov	r0, r3
 8001420:	3710      	adds	r7, #16
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}

08001426 <_ZN8std_msgs6String11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001426:	b580      	push	{r7, lr}
 8001428:	b086      	sub	sp, #24
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
 800142e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001430:	2300      	movs	r3, #0
 8001432:	613b      	str	r3, [r7, #16]
      uint32_t length_data;
      arrToVar(length_data, (inbuffer + offset));
 8001434:	693b      	ldr	r3, [r7, #16]
 8001436:	683a      	ldr	r2, [r7, #0]
 8001438:	441a      	add	r2, r3
 800143a:	f107 030c 	add.w	r3, r7, #12
 800143e:	4611      	mov	r1, r2
 8001440:	4618      	mov	r0, r3
 8001442:	f001 f833 	bl	80024ac <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	3304      	adds	r3, #4
 800144a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 800144c:	693b      	ldr	r3, [r7, #16]
 800144e:	617b      	str	r3, [r7, #20]
 8001450:	e00b      	b.n	800146a <_ZN8std_msgs6String11deserializeEPh+0x44>
          inbuffer[k-1]=inbuffer[k];
 8001452:	683a      	ldr	r2, [r7, #0]
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	441a      	add	r2, r3
 8001458:	697b      	ldr	r3, [r7, #20]
 800145a:	3b01      	subs	r3, #1
 800145c:	6839      	ldr	r1, [r7, #0]
 800145e:	440b      	add	r3, r1
 8001460:	7812      	ldrb	r2, [r2, #0]
 8001462:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_data; ++k){
 8001464:	697b      	ldr	r3, [r7, #20]
 8001466:	3301      	adds	r3, #1
 8001468:	617b      	str	r3, [r7, #20]
 800146a:	693a      	ldr	r2, [r7, #16]
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	4413      	add	r3, r2
 8001470:	697a      	ldr	r2, [r7, #20]
 8001472:	429a      	cmp	r2, r3
 8001474:	d3ed      	bcc.n	8001452 <_ZN8std_msgs6String11deserializeEPh+0x2c>
      }
      inbuffer[offset+length_data-1]=0;
 8001476:	693a      	ldr	r2, [r7, #16]
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	4413      	add	r3, r2
 800147c:	3b01      	subs	r3, #1
 800147e:	683a      	ldr	r2, [r7, #0]
 8001480:	4413      	add	r3, r2
 8001482:	2200      	movs	r2, #0
 8001484:	701a      	strb	r2, [r3, #0]
      this->data = (char *)(inbuffer + offset-1);
 8001486:	693b      	ldr	r3, [r7, #16]
 8001488:	3b01      	subs	r3, #1
 800148a:	683a      	ldr	r2, [r7, #0]
 800148c:	441a      	add	r2, r3
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	605a      	str	r2, [r3, #4]
      offset += length_data;
 8001492:	693a      	ldr	r2, [r7, #16]
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	4413      	add	r3, r2
 8001498:	613b      	str	r3, [r7, #16]
     return offset;
 800149a:	693b      	ldr	r3, [r7, #16]
    }
 800149c:	4618      	mov	r0, r3
 800149e:	3718      	adds	r7, #24
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}

080014a4 <_ZN8std_msgs6String7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/String"; };
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
 80014ac:	4b02      	ldr	r3, [pc, #8]	; (80014b8 <_ZN8std_msgs6String7getTypeEv+0x14>)
 80014ae:	4618      	mov	r0, r3
 80014b0:	370c      	adds	r7, #12
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr
 80014b8:	08005ae8 	.word	0x08005ae8

080014bc <_ZN8std_msgs6String6getMD5Ev>:
    virtual const char * getMD5() override { return "992ce8a1687cec8c8bd883ec73ca41d1"; };
 80014bc:	b480      	push	{r7}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	4b02      	ldr	r3, [pc, #8]	; (80014d0 <_ZN8std_msgs6String6getMD5Ev+0x14>)
 80014c6:	4618      	mov	r0, r3
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr
 80014d0:	08005af8 	.word	0x08005af8

080014d4 <_ZN8std_msgs5Int16C1Ev>:
  {
    public:
      typedef int16_t _data_type;
      _data_type data;

    Int16():
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
      data(0)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	4618      	mov	r0, r3
 80014e0:	f7fe ffbe 	bl	8000460 <_ZN3ros3MsgC1Ev>
 80014e4:	4a05      	ldr	r2, [pc, #20]	; (80014fc <_ZN8std_msgs5Int16C1Ev+0x28>)
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	601a      	str	r2, [r3, #0]
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	2200      	movs	r2, #0
 80014ee:	809a      	strh	r2, [r3, #4]
    {
    }
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	4618      	mov	r0, r3
 80014f4:	3708      	adds	r7, #8
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}
 80014fa:	bf00      	nop
 80014fc:	08005cb8 	.word	0x08005cb8

08001500 <_ZNK8std_msgs5Int169serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
 8001508:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	60fb      	str	r3, [r7, #12]
      union {
        int16_t real;
        uint16_t base;
      } u_data;
      u_data.real = this->data;
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001514:	813b      	strh	r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_data.base >> (8 * 0)) & 0xFF;
 8001516:	8939      	ldrh	r1, [r7, #8]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	683a      	ldr	r2, [r7, #0]
 800151c:	4413      	add	r3, r2
 800151e:	b2ca      	uxtb	r2, r1
 8001520:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_data.base >> (8 * 1)) & 0xFF;
 8001522:	893b      	ldrh	r3, [r7, #8]
 8001524:	0a1b      	lsrs	r3, r3, #8
 8001526:	b299      	uxth	r1, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	3301      	adds	r3, #1
 800152c:	683a      	ldr	r2, [r7, #0]
 800152e:	4413      	add	r3, r2
 8001530:	b2ca      	uxtb	r2, r1
 8001532:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data);
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	3302      	adds	r3, #2
 8001538:	60fb      	str	r3, [r7, #12]
      return offset;
 800153a:	68fb      	ldr	r3, [r7, #12]
    }
 800153c:	4618      	mov	r0, r3
 800153e:	3714      	adds	r7, #20
 8001540:	46bd      	mov	sp, r7
 8001542:	bc80      	pop	{r7}
 8001544:	4770      	bx	lr

08001546 <_ZN8std_msgs5Int1611deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001546:	b480      	push	{r7}
 8001548:	b085      	sub	sp, #20
 800154a:	af00      	add	r7, sp, #0
 800154c:	6078      	str	r0, [r7, #4]
 800154e:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8001550:	2300      	movs	r3, #0
 8001552:	60fb      	str	r3, [r7, #12]
      union {
        int16_t real;
        uint16_t base;
      } u_data;
      u_data.base = 0;
 8001554:	2300      	movs	r3, #0
 8001556:	813b      	strh	r3, [r7, #8]
      u_data.base |= ((uint16_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001558:	893a      	ldrh	r2, [r7, #8]
 800155a:	68fb      	ldr	r3, [r7, #12]
 800155c:	6839      	ldr	r1, [r7, #0]
 800155e:	440b      	add	r3, r1
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	b29b      	uxth	r3, r3
 8001564:	4313      	orrs	r3, r2
 8001566:	b29b      	uxth	r3, r3
 8001568:	813b      	strh	r3, [r7, #8]
      u_data.base |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800156a:	893b      	ldrh	r3, [r7, #8]
 800156c:	b21a      	sxth	r2, r3
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	3301      	adds	r3, #1
 8001572:	6839      	ldr	r1, [r7, #0]
 8001574:	440b      	add	r3, r1
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	021b      	lsls	r3, r3, #8
 800157a:	b21b      	sxth	r3, r3
 800157c:	4313      	orrs	r3, r2
 800157e:	b21b      	sxth	r3, r3
 8001580:	b29b      	uxth	r3, r3
 8001582:	813b      	strh	r3, [r7, #8]
      this->data = u_data.real;
 8001584:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->data);
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	3302      	adds	r3, #2
 8001590:	60fb      	str	r3, [r7, #12]
     return offset;
 8001592:	68fb      	ldr	r3, [r7, #12]
    }
 8001594:	4618      	mov	r0, r3
 8001596:	3714      	adds	r7, #20
 8001598:	46bd      	mov	sp, r7
 800159a:	bc80      	pop	{r7}
 800159c:	4770      	bx	lr
	...

080015a0 <_ZN8std_msgs5Int167getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Int16"; };
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
 80015a8:	4b02      	ldr	r3, [pc, #8]	; (80015b4 <_ZN8std_msgs5Int167getTypeEv+0x14>)
 80015aa:	4618      	mov	r0, r3
 80015ac:	370c      	adds	r7, #12
 80015ae:	46bd      	mov	sp, r7
 80015b0:	bc80      	pop	{r7}
 80015b2:	4770      	bx	lr
 80015b4:	08005b1c 	.word	0x08005b1c

080015b8 <_ZN8std_msgs5Int166getMD5Ev>:
    virtual const char * getMD5() override { return "8524586e34fbd7cb1c08c5f5f1ca0e57"; };
 80015b8:	b480      	push	{r7}
 80015ba:	b083      	sub	sp, #12
 80015bc:	af00      	add	r7, sp, #0
 80015be:	6078      	str	r0, [r7, #4]
 80015c0:	4b02      	ldr	r3, [pc, #8]	; (80015cc <_ZN8std_msgs5Int166getMD5Ev+0x14>)
 80015c2:	4618      	mov	r0, r3
 80015c4:	370c      	adds	r7, #12
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bc80      	pop	{r7}
 80015ca:	4770      	bx	lr
 80015cc:	08005b2c 	.word	0x08005b2c

080015d0 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	4618      	mov	r0, r3
 80015dc:	f7fe ff40 	bl	8000460 <_ZN3ros3MsgC1Ev>
 80015e0:	4a0e      	ldr	r2, [pc, #56]	; (800161c <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	601a      	str	r2, [r3, #0]
      x(0),
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	f04f 0200 	mov.w	r2, #0
 80015ec:	f04f 0300 	mov.w	r3, #0
 80015f0:	e9c1 2302 	strd	r2, r3, [r1, #8]
      y(0),
 80015f4:	6879      	ldr	r1, [r7, #4]
 80015f6:	f04f 0200 	mov.w	r2, #0
 80015fa:	f04f 0300 	mov.w	r3, #0
 80015fe:	e9c1 2304 	strd	r2, r3, [r1, #16]
      z(0)
 8001602:	6879      	ldr	r1, [r7, #4]
 8001604:	f04f 0200 	mov.w	r2, #0
 8001608:	f04f 0300 	mov.w	r3, #0
 800160c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	4618      	mov	r0, r3
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	08005ca0 	.word	0x08005ca0

08001620 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001620:	b480      	push	{r7}
 8001622:	b08b      	sub	sp, #44	; 0x2c
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
 8001628:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800162a:	2300      	movs	r3, #0
 800162c:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001634:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8001638:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800163c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800163e:	6838      	ldr	r0, [r7, #0]
 8001640:	4401      	add	r1, r0
 8001642:	b2d3      	uxtb	r3, r2
 8001644:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8001646:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800164a:	f04f 0200 	mov.w	r2, #0
 800164e:	f04f 0300 	mov.w	r3, #0
 8001652:	0a02      	lsrs	r2, r0, #8
 8001654:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001658:	0a0b      	lsrs	r3, r1, #8
 800165a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800165c:	3101      	adds	r1, #1
 800165e:	6838      	ldr	r0, [r7, #0]
 8001660:	4401      	add	r1, r0
 8001662:	b2d3      	uxtb	r3, r2
 8001664:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8001666:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800166a:	f04f 0200 	mov.w	r2, #0
 800166e:	f04f 0300 	mov.w	r3, #0
 8001672:	0c02      	lsrs	r2, r0, #16
 8001674:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001678:	0c0b      	lsrs	r3, r1, #16
 800167a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800167c:	3102      	adds	r1, #2
 800167e:	6838      	ldr	r0, [r7, #0]
 8001680:	4401      	add	r1, r0
 8001682:	b2d3      	uxtb	r3, r2
 8001684:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8001686:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800168a:	f04f 0200 	mov.w	r2, #0
 800168e:	f04f 0300 	mov.w	r3, #0
 8001692:	0e02      	lsrs	r2, r0, #24
 8001694:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001698:	0e0b      	lsrs	r3, r1, #24
 800169a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800169c:	3103      	adds	r1, #3
 800169e:	6838      	ldr	r0, [r7, #0]
 80016a0:	4401      	add	r1, r0
 80016a2:	b2d3      	uxtb	r3, r2
 80016a4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 80016a6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80016aa:	f04f 0200 	mov.w	r2, #0
 80016ae:	f04f 0300 	mov.w	r3, #0
 80016b2:	000a      	movs	r2, r1
 80016b4:	2300      	movs	r3, #0
 80016b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016b8:	3104      	adds	r1, #4
 80016ba:	6838      	ldr	r0, [r7, #0]
 80016bc:	4401      	add	r1, r0
 80016be:	b2d3      	uxtb	r3, r2
 80016c0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 80016c2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80016c6:	f04f 0200 	mov.w	r2, #0
 80016ca:	f04f 0300 	mov.w	r3, #0
 80016ce:	0a0a      	lsrs	r2, r1, #8
 80016d0:	2300      	movs	r3, #0
 80016d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016d4:	3105      	adds	r1, #5
 80016d6:	6838      	ldr	r0, [r7, #0]
 80016d8:	4401      	add	r1, r0
 80016da:	b2d3      	uxtb	r3, r2
 80016dc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 80016de:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80016e2:	f04f 0200 	mov.w	r2, #0
 80016e6:	f04f 0300 	mov.w	r3, #0
 80016ea:	0c0a      	lsrs	r2, r1, #16
 80016ec:	2300      	movs	r3, #0
 80016ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80016f0:	3106      	adds	r1, #6
 80016f2:	6838      	ldr	r0, [r7, #0]
 80016f4:	4401      	add	r1, r0
 80016f6:	b2d3      	uxtb	r3, r2
 80016f8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 80016fa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80016fe:	f04f 0200 	mov.w	r2, #0
 8001702:	f04f 0300 	mov.w	r3, #0
 8001706:	0e0a      	lsrs	r2, r1, #24
 8001708:	2300      	movs	r3, #0
 800170a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800170c:	3107      	adds	r1, #7
 800170e:	6838      	ldr	r0, [r7, #0]
 8001710:	4401      	add	r1, r0
 8001712:	b2d3      	uxtb	r3, r2
 8001714:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8001716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001718:	3308      	adds	r3, #8
 800171a:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001722:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8001726:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800172a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800172c:	6838      	ldr	r0, [r7, #0]
 800172e:	4401      	add	r1, r0
 8001730:	b2d3      	uxtb	r3, r2
 8001732:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8001734:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001738:	f04f 0200 	mov.w	r2, #0
 800173c:	f04f 0300 	mov.w	r3, #0
 8001740:	0a02      	lsrs	r2, r0, #8
 8001742:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001746:	0a0b      	lsrs	r3, r1, #8
 8001748:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800174a:	3101      	adds	r1, #1
 800174c:	6838      	ldr	r0, [r7, #0]
 800174e:	4401      	add	r1, r0
 8001750:	b2d3      	uxtb	r3, r2
 8001752:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8001754:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001758:	f04f 0200 	mov.w	r2, #0
 800175c:	f04f 0300 	mov.w	r3, #0
 8001760:	0c02      	lsrs	r2, r0, #16
 8001762:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001766:	0c0b      	lsrs	r3, r1, #16
 8001768:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800176a:	3102      	adds	r1, #2
 800176c:	6838      	ldr	r0, [r7, #0]
 800176e:	4401      	add	r1, r0
 8001770:	b2d3      	uxtb	r3, r2
 8001772:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 8001774:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001778:	f04f 0200 	mov.w	r2, #0
 800177c:	f04f 0300 	mov.w	r3, #0
 8001780:	0e02      	lsrs	r2, r0, #24
 8001782:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001786:	0e0b      	lsrs	r3, r1, #24
 8001788:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800178a:	3103      	adds	r1, #3
 800178c:	6838      	ldr	r0, [r7, #0]
 800178e:	4401      	add	r1, r0
 8001790:	b2d3      	uxtb	r3, r2
 8001792:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 8001794:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001798:	f04f 0200 	mov.w	r2, #0
 800179c:	f04f 0300 	mov.w	r3, #0
 80017a0:	000a      	movs	r2, r1
 80017a2:	2300      	movs	r3, #0
 80017a4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017a6:	3104      	adds	r1, #4
 80017a8:	6838      	ldr	r0, [r7, #0]
 80017aa:	4401      	add	r1, r0
 80017ac:	b2d3      	uxtb	r3, r2
 80017ae:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 80017b0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80017b4:	f04f 0200 	mov.w	r2, #0
 80017b8:	f04f 0300 	mov.w	r3, #0
 80017bc:	0a0a      	lsrs	r2, r1, #8
 80017be:	2300      	movs	r3, #0
 80017c0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017c2:	3105      	adds	r1, #5
 80017c4:	6838      	ldr	r0, [r7, #0]
 80017c6:	4401      	add	r1, r0
 80017c8:	b2d3      	uxtb	r3, r2
 80017ca:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 80017cc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80017d0:	f04f 0200 	mov.w	r2, #0
 80017d4:	f04f 0300 	mov.w	r3, #0
 80017d8:	0c0a      	lsrs	r2, r1, #16
 80017da:	2300      	movs	r3, #0
 80017dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017de:	3106      	adds	r1, #6
 80017e0:	6838      	ldr	r0, [r7, #0]
 80017e2:	4401      	add	r1, r0
 80017e4:	b2d3      	uxtb	r3, r2
 80017e6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 80017e8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80017ec:	f04f 0200 	mov.w	r2, #0
 80017f0:	f04f 0300 	mov.w	r3, #0
 80017f4:	0e0a      	lsrs	r2, r1, #24
 80017f6:	2300      	movs	r3, #0
 80017f8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80017fa:	3107      	adds	r1, #7
 80017fc:	6838      	ldr	r0, [r7, #0]
 80017fe:	4401      	add	r1, r0
 8001800:	b2d3      	uxtb	r3, r2
 8001802:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8001804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001806:	3308      	adds	r3, #8
 8001808:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001810:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8001814:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001818:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800181a:	6838      	ldr	r0, [r7, #0]
 800181c:	4401      	add	r1, r0
 800181e:	b2d3      	uxtb	r3, r2
 8001820:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8001822:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001826:	f04f 0200 	mov.w	r2, #0
 800182a:	f04f 0300 	mov.w	r3, #0
 800182e:	0a02      	lsrs	r2, r0, #8
 8001830:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8001834:	0a0b      	lsrs	r3, r1, #8
 8001836:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001838:	3101      	adds	r1, #1
 800183a:	6838      	ldr	r0, [r7, #0]
 800183c:	4401      	add	r1, r0
 800183e:	b2d3      	uxtb	r3, r2
 8001840:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8001842:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001846:	f04f 0200 	mov.w	r2, #0
 800184a:	f04f 0300 	mov.w	r3, #0
 800184e:	0c02      	lsrs	r2, r0, #16
 8001850:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8001854:	0c0b      	lsrs	r3, r1, #16
 8001856:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001858:	3102      	adds	r1, #2
 800185a:	6838      	ldr	r0, [r7, #0]
 800185c:	4401      	add	r1, r0
 800185e:	b2d3      	uxtb	r3, r2
 8001860:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 8001862:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001866:	f04f 0200 	mov.w	r2, #0
 800186a:	f04f 0300 	mov.w	r3, #0
 800186e:	0e02      	lsrs	r2, r0, #24
 8001870:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001874:	0e0b      	lsrs	r3, r1, #24
 8001876:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001878:	3103      	adds	r1, #3
 800187a:	6838      	ldr	r0, [r7, #0]
 800187c:	4401      	add	r1, r0
 800187e:	b2d3      	uxtb	r3, r2
 8001880:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 8001882:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001886:	f04f 0200 	mov.w	r2, #0
 800188a:	f04f 0300 	mov.w	r3, #0
 800188e:	000a      	movs	r2, r1
 8001890:	2300      	movs	r3, #0
 8001892:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001894:	3104      	adds	r1, #4
 8001896:	6838      	ldr	r0, [r7, #0]
 8001898:	4401      	add	r1, r0
 800189a:	b2d3      	uxtb	r3, r2
 800189c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 800189e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018a2:	f04f 0200 	mov.w	r2, #0
 80018a6:	f04f 0300 	mov.w	r3, #0
 80018aa:	0a0a      	lsrs	r2, r1, #8
 80018ac:	2300      	movs	r3, #0
 80018ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018b0:	3105      	adds	r1, #5
 80018b2:	6838      	ldr	r0, [r7, #0]
 80018b4:	4401      	add	r1, r0
 80018b6:	b2d3      	uxtb	r3, r2
 80018b8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 80018ba:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018be:	f04f 0200 	mov.w	r2, #0
 80018c2:	f04f 0300 	mov.w	r3, #0
 80018c6:	0c0a      	lsrs	r2, r1, #16
 80018c8:	2300      	movs	r3, #0
 80018ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018cc:	3106      	adds	r1, #6
 80018ce:	6838      	ldr	r0, [r7, #0]
 80018d0:	4401      	add	r1, r0
 80018d2:	b2d3      	uxtb	r3, r2
 80018d4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 80018d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80018da:	f04f 0200 	mov.w	r2, #0
 80018de:	f04f 0300 	mov.w	r3, #0
 80018e2:	0e0a      	lsrs	r2, r1, #24
 80018e4:	2300      	movs	r3, #0
 80018e6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80018e8:	3107      	adds	r1, #7
 80018ea:	6838      	ldr	r0, [r7, #0]
 80018ec:	4401      	add	r1, r0
 80018ee:	b2d3      	uxtb	r3, r2
 80018f0:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 80018f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f4:	3308      	adds	r3, #8
 80018f6:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 80018f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80018fa:	4618      	mov	r0, r3
 80018fc:	372c      	adds	r7, #44	; 0x2c
 80018fe:	46bd      	mov	sp, r7
 8001900:	bc80      	pop	{r7}
 8001902:	4770      	bx	lr

08001904 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001904:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001908:	b0eb      	sub	sp, #428	; 0x1ac
 800190a:	af00      	add	r7, sp, #0
 800190c:	f8c7 0184 	str.w	r0, [r7, #388]	; 0x184
 8001910:	f8c7 1180 	str.w	r1, [r7, #384]	; 0x180
    {
      int offset = 0;
 8001914:	2300      	movs	r3, #0
 8001916:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 800191a:	f04f 0200 	mov.w	r2, #0
 800191e:	f04f 0300 	mov.w	r3, #0
 8001922:	e9c7 2366 	strd	r2, r3, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001926:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800192a:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 800192e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001932:	4413      	add	r3, r2
 8001934:	781b      	ldrb	r3, [r3, #0]
 8001936:	b2db      	uxtb	r3, r3
 8001938:	2200      	movs	r2, #0
 800193a:	461c      	mov	r4, r3
 800193c:	4615      	mov	r5, r2
 800193e:	ea40 0804 	orr.w	r8, r0, r4
 8001942:	ea41 0905 	orr.w	r9, r1, r5
 8001946:	e9c7 8966 	strd	r8, r9, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800194a:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 800194e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001952:	1c5a      	adds	r2, r3, #1
 8001954:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001958:	4413      	add	r3, r2
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	b2db      	uxtb	r3, r3
 800195e:	2200      	movs	r2, #0
 8001960:	469a      	mov	sl, r3
 8001962:	4693      	mov	fp, r2
 8001964:	f04f 0200 	mov.w	r2, #0
 8001968:	f04f 0300 	mov.w	r3, #0
 800196c:	ea4f 230b 	mov.w	r3, fp, lsl #8
 8001970:	ea43 631a 	orr.w	r3, r3, sl, lsr #24
 8001974:	ea4f 220a 	mov.w	r2, sl, lsl #8
 8001978:	ea40 0402 	orr.w	r4, r0, r2
 800197c:	f8c7 4178 	str.w	r4, [r7, #376]	; 0x178
 8001980:	430b      	orrs	r3, r1
 8001982:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001986:	e9d7 345e 	ldrd	r3, r4, [r7, #376]	; 0x178
 800198a:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800198e:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8001992:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001996:	1c9a      	adds	r2, r3, #2
 8001998:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800199c:	4413      	add	r3, r2
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	b2db      	uxtb	r3, r3
 80019a2:	2200      	movs	r2, #0
 80019a4:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80019a8:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
 80019ac:	f04f 0200 	mov.w	r2, #0
 80019b0:	f04f 0300 	mov.w	r3, #0
 80019b4:	e9d7 895c 	ldrd	r8, r9, [r7, #368]	; 0x170
 80019b8:	464c      	mov	r4, r9
 80019ba:	0423      	lsls	r3, r4, #16
 80019bc:	46c4      	mov	ip, r8
 80019be:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 80019c2:	4644      	mov	r4, r8
 80019c4:	0422      	lsls	r2, r4, #16
 80019c6:	ea40 0402 	orr.w	r4, r0, r2
 80019ca:	f8c7 4168 	str.w	r4, [r7, #360]	; 0x168
 80019ce:	430b      	orrs	r3, r1
 80019d0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
 80019d4:	e9d7 345a 	ldrd	r3, r4, [r7, #360]	; 0x168
 80019d8:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80019dc:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 80019e0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80019e4:	1cda      	adds	r2, r3, #3
 80019e6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80019ea:	4413      	add	r3, r2
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	b2db      	uxtb	r3, r3
 80019f0:	2200      	movs	r2, #0
 80019f2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 80019f6:	f8c7 2164 	str.w	r2, [r7, #356]	; 0x164
 80019fa:	e9d7 4558 	ldrd	r4, r5, [r7, #352]	; 0x160
 80019fe:	4623      	mov	r3, r4
 8001a00:	0a1b      	lsrs	r3, r3, #8
 8001a02:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
 8001a06:	4623      	mov	r3, r4
 8001a08:	061b      	lsls	r3, r3, #24
 8001a0a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001a0e:	e9d7 3456 	ldrd	r3, r4, [r7, #344]	; 0x158
 8001a12:	461a      	mov	r2, r3
 8001a14:	4302      	orrs	r2, r0
 8001a16:	f8c7 2150 	str.w	r2, [r7, #336]	; 0x150
 8001a1a:	4623      	mov	r3, r4
 8001a1c:	430b      	orrs	r3, r1
 8001a1e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001a22:	e9d7 3454 	ldrd	r3, r4, [r7, #336]	; 0x150
 8001a26:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8001a2a:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8001a2e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001a32:	1d1a      	adds	r2, r3, #4
 8001a34:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001a38:	4413      	add	r3, r2
 8001a3a:	781b      	ldrb	r3, [r3, #0]
 8001a3c:	b2db      	uxtb	r3, r3
 8001a3e:	2200      	movs	r2, #0
 8001a40:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8001a44:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001a48:	f04f 0200 	mov.w	r2, #0
 8001a4c:	f04f 0300 	mov.w	r3, #0
 8001a50:	f8d7 4148 	ldr.w	r4, [r7, #328]	; 0x148
 8001a54:	0023      	movs	r3, r4
 8001a56:	2200      	movs	r2, #0
 8001a58:	ea40 0402 	orr.w	r4, r0, r2
 8001a5c:	f8c7 4140 	str.w	r4, [r7, #320]	; 0x140
 8001a60:	430b      	orrs	r3, r1
 8001a62:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8001a66:	e9d7 3450 	ldrd	r3, r4, [r7, #320]	; 0x140
 8001a6a:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8001a6e:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8001a72:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001a76:	1d5a      	adds	r2, r3, #5
 8001a78:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001a7c:	4413      	add	r3, r2
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	2200      	movs	r2, #0
 8001a84:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001a88:	f8c7 213c 	str.w	r2, [r7, #316]	; 0x13c
 8001a8c:	f04f 0200 	mov.w	r2, #0
 8001a90:	f04f 0300 	mov.w	r3, #0
 8001a94:	f8d7 4138 	ldr.w	r4, [r7, #312]	; 0x138
 8001a98:	0223      	lsls	r3, r4, #8
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	ea40 0402 	orr.w	r4, r0, r2
 8001aa0:	f8c7 4130 	str.w	r4, [r7, #304]	; 0x130
 8001aa4:	430b      	orrs	r3, r1
 8001aa6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 8001aaa:	e9d7 344c 	ldrd	r3, r4, [r7, #304]	; 0x130
 8001aae:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8001ab2:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8001ab6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001aba:	1d9a      	adds	r2, r3, #6
 8001abc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001ac0:	4413      	add	r3, r2
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8001acc:	f8c7 212c 	str.w	r2, [r7, #300]	; 0x12c
 8001ad0:	f04f 0200 	mov.w	r2, #0
 8001ad4:	f04f 0300 	mov.w	r3, #0
 8001ad8:	f8d7 4128 	ldr.w	r4, [r7, #296]	; 0x128
 8001adc:	0423      	lsls	r3, r4, #16
 8001ade:	2200      	movs	r2, #0
 8001ae0:	ea40 0402 	orr.w	r4, r0, r2
 8001ae4:	f8c7 4120 	str.w	r4, [r7, #288]	; 0x120
 8001ae8:	430b      	orrs	r3, r1
 8001aea:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001aee:	e9d7 3448 	ldrd	r3, r4, [r7, #288]	; 0x120
 8001af2:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8001af6:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8001afa:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001afe:	1dda      	adds	r2, r3, #7
 8001b00:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001b04:	4413      	add	r3, r2
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	b2db      	uxtb	r3, r3
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8001b10:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8001b14:	f04f 0200 	mov.w	r2, #0
 8001b18:	f04f 0300 	mov.w	r3, #0
 8001b1c:	f8d7 4118 	ldr.w	r4, [r7, #280]	; 0x118
 8001b20:	0623      	lsls	r3, r4, #24
 8001b22:	2200      	movs	r2, #0
 8001b24:	ea40 0402 	orr.w	r4, r0, r2
 8001b28:	f8c7 4110 	str.w	r4, [r7, #272]	; 0x110
 8001b2c:	430b      	orrs	r3, r1
 8001b2e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8001b32:	e9d7 3444 	ldrd	r3, r4, [r7, #272]	; 0x110
 8001b36:	e9c7 3466 	strd	r3, r4, [r7, #408]	; 0x198
      this->x = u_x.real;
 8001b3a:	e9d7 0166 	ldrd	r0, r1, [r7, #408]	; 0x198
 8001b3e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001b42:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8001b46:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001b4a:	3308      	adds	r3, #8
 8001b4c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8001b50:	f04f 0200 	mov.w	r2, #0
 8001b54:	f04f 0300 	mov.w	r3, #0
 8001b58:	e9c7 2364 	strd	r2, r3, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001b5c:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8001b60:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8001b64:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001b68:	4413      	add	r3, r2
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	2200      	movs	r2, #0
 8001b70:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001b74:	f8c7 210c 	str.w	r2, [r7, #268]	; 0x10c
 8001b78:	e9d7 3442 	ldrd	r3, r4, [r7, #264]	; 0x108
 8001b7c:	461a      	mov	r2, r3
 8001b7e:	4302      	orrs	r2, r0
 8001b80:	f8c7 2100 	str.w	r2, [r7, #256]	; 0x100
 8001b84:	4623      	mov	r3, r4
 8001b86:	430b      	orrs	r3, r1
 8001b88:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001b8c:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 8001b90:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001b94:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8001b98:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001b9c:	1c5a      	adds	r2, r3, #1
 8001b9e:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001ba2:	4413      	add	r3, r2
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	b2db      	uxtb	r3, r3
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8001bae:	f8c7 20fc 	str.w	r2, [r7, #252]	; 0xfc
 8001bb2:	f04f 0200 	mov.w	r2, #0
 8001bb6:	f04f 0300 	mov.w	r3, #0
 8001bba:	e9d7 893e 	ldrd	r8, r9, [r7, #248]	; 0xf8
 8001bbe:	464c      	mov	r4, r9
 8001bc0:	0223      	lsls	r3, r4, #8
 8001bc2:	46c4      	mov	ip, r8
 8001bc4:	ea43 631c 	orr.w	r3, r3, ip, lsr #24
 8001bc8:	4644      	mov	r4, r8
 8001bca:	0222      	lsls	r2, r4, #8
 8001bcc:	ea40 0402 	orr.w	r4, r0, r2
 8001bd0:	f8c7 40f0 	str.w	r4, [r7, #240]	; 0xf0
 8001bd4:	430b      	orrs	r3, r1
 8001bd6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8001bda:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8001bde:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001be2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8001be6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001bea:	1c9a      	adds	r2, r3, #2
 8001bec:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001bf0:	4413      	add	r3, r2
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	b2db      	uxtb	r3, r3
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001bfc:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001c00:	f04f 0200 	mov.w	r2, #0
 8001c04:	f04f 0300 	mov.w	r3, #0
 8001c08:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	; 0xe8
 8001c0c:	464c      	mov	r4, r9
 8001c0e:	0423      	lsls	r3, r4, #16
 8001c10:	46c4      	mov	ip, r8
 8001c12:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 8001c16:	4644      	mov	r4, r8
 8001c18:	0422      	lsls	r2, r4, #16
 8001c1a:	ea40 0402 	orr.w	r4, r0, r2
 8001c1e:	f8c7 40e0 	str.w	r4, [r7, #224]	; 0xe0
 8001c22:	430b      	orrs	r3, r1
 8001c24:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001c28:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 8001c2c:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001c30:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8001c34:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001c38:	1cda      	adds	r2, r3, #3
 8001c3a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001c3e:	4413      	add	r3, r2
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	2200      	movs	r2, #0
 8001c46:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001c4a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001c4e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8001c52:	4623      	mov	r3, r4
 8001c54:	0a1b      	lsrs	r3, r3, #8
 8001c56:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001c5a:	4623      	mov	r3, r4
 8001c5c:	061b      	lsls	r3, r3, #24
 8001c5e:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001c62:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8001c66:	461a      	mov	r2, r3
 8001c68:	4302      	orrs	r2, r0
 8001c6a:	f8c7 20c8 	str.w	r2, [r7, #200]	; 0xc8
 8001c6e:	4623      	mov	r3, r4
 8001c70:	430b      	orrs	r3, r1
 8001c72:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001c76:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8001c7a:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8001c7e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8001c82:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001c86:	1d1a      	adds	r2, r3, #4
 8001c88:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001c8c:	4413      	add	r3, r2
 8001c8e:	781b      	ldrb	r3, [r3, #0]
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2200      	movs	r2, #0
 8001c94:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8001c98:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8001c9c:	f04f 0200 	mov.w	r2, #0
 8001ca0:	f04f 0300 	mov.w	r3, #0
 8001ca4:	f8d7 40c0 	ldr.w	r4, [r7, #192]	; 0xc0
 8001ca8:	0023      	movs	r3, r4
 8001caa:	2200      	movs	r2, #0
 8001cac:	ea40 0402 	orr.w	r4, r0, r2
 8001cb0:	f8c7 40b8 	str.w	r4, [r7, #184]	; 0xb8
 8001cb4:	430b      	orrs	r3, r1
 8001cb6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8001cba:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8001cbe:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8001cc2:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8001cc6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001cca:	1d5a      	adds	r2, r3, #5
 8001ccc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001cd0:	4413      	add	r3, r2
 8001cd2:	781b      	ldrb	r3, [r3, #0]
 8001cd4:	b2db      	uxtb	r3, r3
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8001cdc:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 8001ce0:	f04f 0200 	mov.w	r2, #0
 8001ce4:	f04f 0300 	mov.w	r3, #0
 8001ce8:	f8d7 40b0 	ldr.w	r4, [r7, #176]	; 0xb0
 8001cec:	0223      	lsls	r3, r4, #8
 8001cee:	2200      	movs	r2, #0
 8001cf0:	ea40 0402 	orr.w	r4, r0, r2
 8001cf4:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8001cf8:	430b      	orrs	r3, r1
 8001cfa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8001cfe:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8001d02:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8001d06:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8001d0a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001d0e:	1d9a      	adds	r2, r3, #6
 8001d10:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001d14:	4413      	add	r3, r2
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	b2db      	uxtb	r3, r3
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8001d20:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8001d24:	f04f 0200 	mov.w	r2, #0
 8001d28:	f04f 0300 	mov.w	r3, #0
 8001d2c:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8001d30:	0423      	lsls	r3, r4, #16
 8001d32:	2200      	movs	r2, #0
 8001d34:	ea40 0402 	orr.w	r4, r0, r2
 8001d38:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8001d3c:	430b      	orrs	r3, r1
 8001d3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8001d42:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8001d46:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8001d4a:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8001d4e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001d52:	1dda      	adds	r2, r3, #7
 8001d54:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001d58:	4413      	add	r3, r2
 8001d5a:	781b      	ldrb	r3, [r3, #0]
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	2200      	movs	r2, #0
 8001d60:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8001d64:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8001d68:	f04f 0200 	mov.w	r2, #0
 8001d6c:	f04f 0300 	mov.w	r3, #0
 8001d70:	f8d7 4090 	ldr.w	r4, [r7, #144]	; 0x90
 8001d74:	0623      	lsls	r3, r4, #24
 8001d76:	2200      	movs	r2, #0
 8001d78:	ea40 0402 	orr.w	r4, r0, r2
 8001d7c:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8001d80:	430b      	orrs	r3, r1
 8001d82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8001d86:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8001d8a:	e9c7 3464 	strd	r3, r4, [r7, #400]	; 0x190
      this->y = u_y.real;
 8001d8e:	e9d7 0164 	ldrd	r0, r1, [r7, #400]	; 0x190
 8001d92:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001d96:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8001d9a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001d9e:	3308      	adds	r3, #8
 8001da0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8001da4:	f04f 0200 	mov.w	r2, #0
 8001da8:	f04f 0300 	mov.w	r3, #0
 8001dac:	e9c7 2362 	strd	r2, r3, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001db0:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8001db4:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8001db8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001dbc:	4413      	add	r3, r2
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	b2db      	uxtb	r3, r3
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8001dc8:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8001dcc:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8001dd0:	461a      	mov	r2, r3
 8001dd2:	4302      	orrs	r2, r0
 8001dd4:	67ba      	str	r2, [r7, #120]	; 0x78
 8001dd6:	4623      	mov	r3, r4
 8001dd8:	430b      	orrs	r3, r1
 8001dda:	67fb      	str	r3, [r7, #124]	; 0x7c
 8001ddc:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8001de0:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001de4:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8001de8:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001dec:	1c5a      	adds	r2, r3, #1
 8001dee:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001df2:	4413      	add	r3, r2
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	2200      	movs	r2, #0
 8001dfa:	673b      	str	r3, [r7, #112]	; 0x70
 8001dfc:	677a      	str	r2, [r7, #116]	; 0x74
 8001dfe:	f04f 0200 	mov.w	r2, #0
 8001e02:	f04f 0300 	mov.w	r3, #0
 8001e06:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8001e0a:	464c      	mov	r4, r9
 8001e0c:	0223      	lsls	r3, r4, #8
 8001e0e:	46c4      	mov	ip, r8
 8001e10:	ea43 631c 	orr.w	r3, r3, ip, lsr #24
 8001e14:	4644      	mov	r4, r8
 8001e16:	0222      	lsls	r2, r4, #8
 8001e18:	ea40 0402 	orr.w	r4, r0, r2
 8001e1c:	66bc      	str	r4, [r7, #104]	; 0x68
 8001e1e:	430b      	orrs	r3, r1
 8001e20:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001e22:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8001e26:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001e2a:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8001e2e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001e32:	1c9a      	adds	r2, r3, #2
 8001e34:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001e38:	4413      	add	r3, r2
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	b2db      	uxtb	r3, r3
 8001e3e:	2200      	movs	r2, #0
 8001e40:	663b      	str	r3, [r7, #96]	; 0x60
 8001e42:	667a      	str	r2, [r7, #100]	; 0x64
 8001e44:	f04f 0200 	mov.w	r2, #0
 8001e48:	f04f 0300 	mov.w	r3, #0
 8001e4c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8001e50:	464c      	mov	r4, r9
 8001e52:	0423      	lsls	r3, r4, #16
 8001e54:	46c4      	mov	ip, r8
 8001e56:	ea43 431c 	orr.w	r3, r3, ip, lsr #16
 8001e5a:	4644      	mov	r4, r8
 8001e5c:	0422      	lsls	r2, r4, #16
 8001e5e:	ea40 0402 	orr.w	r4, r0, r2
 8001e62:	65bc      	str	r4, [r7, #88]	; 0x58
 8001e64:	430b      	orrs	r3, r1
 8001e66:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e68:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8001e6c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001e70:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8001e74:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001e78:	1cda      	adds	r2, r3, #3
 8001e7a:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001e7e:	4413      	add	r3, r2
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	2200      	movs	r2, #0
 8001e86:	653b      	str	r3, [r7, #80]	; 0x50
 8001e88:	657a      	str	r2, [r7, #84]	; 0x54
 8001e8a:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	; 0x50
 8001e8e:	4623      	mov	r3, r4
 8001e90:	0a1b      	lsrs	r3, r3, #8
 8001e92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e94:	4623      	mov	r3, r4
 8001e96:	061b      	lsls	r3, r3, #24
 8001e98:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e9a:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	4302      	orrs	r2, r0
 8001ea2:	643a      	str	r2, [r7, #64]	; 0x40
 8001ea4:	4623      	mov	r3, r4
 8001ea6:	430b      	orrs	r3, r1
 8001ea8:	647b      	str	r3, [r7, #68]	; 0x44
 8001eaa:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8001eae:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8001eb2:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8001eb6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001eba:	1d1a      	adds	r2, r3, #4
 8001ebc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001ec0:	4413      	add	r3, r2
 8001ec2:	781b      	ldrb	r3, [r3, #0]
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	63bb      	str	r3, [r7, #56]	; 0x38
 8001eca:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001ecc:	f04f 0200 	mov.w	r2, #0
 8001ed0:	f04f 0300 	mov.w	r3, #0
 8001ed4:	6bbc      	ldr	r4, [r7, #56]	; 0x38
 8001ed6:	0023      	movs	r3, r4
 8001ed8:	2200      	movs	r2, #0
 8001eda:	ea40 0402 	orr.w	r4, r0, r2
 8001ede:	633c      	str	r4, [r7, #48]	; 0x30
 8001ee0:	430b      	orrs	r3, r1
 8001ee2:	637b      	str	r3, [r7, #52]	; 0x34
 8001ee4:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8001ee8:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8001eec:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8001ef0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001ef4:	1d5a      	adds	r2, r3, #5
 8001ef6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001efa:	4413      	add	r3, r2
 8001efc:	781b      	ldrb	r3, [r3, #0]
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	2200      	movs	r2, #0
 8001f02:	62bb      	str	r3, [r7, #40]	; 0x28
 8001f04:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001f06:	f04f 0200 	mov.w	r2, #0
 8001f0a:	f04f 0300 	mov.w	r3, #0
 8001f0e:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8001f10:	0223      	lsls	r3, r4, #8
 8001f12:	2200      	movs	r2, #0
 8001f14:	ea40 0402 	orr.w	r4, r0, r2
 8001f18:	623c      	str	r4, [r7, #32]
 8001f1a:	430b      	orrs	r3, r1
 8001f1c:	627b      	str	r3, [r7, #36]	; 0x24
 8001f1e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8001f22:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8001f26:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8001f2a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001f2e:	3306      	adds	r3, #6
 8001f30:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8001f34:	4413      	add	r3, r2
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	61bb      	str	r3, [r7, #24]
 8001f3e:	61fa      	str	r2, [r7, #28]
 8001f40:	f04f 0200 	mov.w	r2, #0
 8001f44:	f04f 0300 	mov.w	r3, #0
 8001f48:	69bc      	ldr	r4, [r7, #24]
 8001f4a:	0423      	lsls	r3, r4, #16
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	ea40 0402 	orr.w	r4, r0, r2
 8001f52:	613c      	str	r4, [r7, #16]
 8001f54:	430b      	orrs	r3, r1
 8001f56:	617b      	str	r3, [r7, #20]
 8001f58:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001f5c:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8001f60:	e9d7 0162 	ldrd	r0, r1, [r7, #392]	; 0x188
 8001f64:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001f68:	3307      	adds	r3, #7
 8001f6a:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8001f6e:	4413      	add	r3, r2
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	2200      	movs	r2, #0
 8001f76:	60bb      	str	r3, [r7, #8]
 8001f78:	60fa      	str	r2, [r7, #12]
 8001f7a:	f04f 0200 	mov.w	r2, #0
 8001f7e:	f04f 0300 	mov.w	r3, #0
 8001f82:	68bc      	ldr	r4, [r7, #8]
 8001f84:	0623      	lsls	r3, r4, #24
 8001f86:	2200      	movs	r2, #0
 8001f88:	ea40 0402 	orr.w	r4, r0, r2
 8001f8c:	603c      	str	r4, [r7, #0]
 8001f8e:	430b      	orrs	r3, r1
 8001f90:	607b      	str	r3, [r7, #4]
 8001f92:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001f96:	e9c7 3462 	strd	r3, r4, [r7, #392]	; 0x188
      this->z = u_z.real;
 8001f9a:	e9d7 2362 	ldrd	r2, r3, [r7, #392]	; 0x188
 8001f9e:	f8d7 1184 	ldr.w	r1, [r7, #388]	; 0x184
 8001fa2:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 8001fa6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001faa:	3308      	adds	r3, #8
 8001fac:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
     return offset;
 8001fb0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
    }
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f507 77d6 	add.w	r7, r7, #428	; 0x1ac
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8001fc0:	4770      	bx	lr
	...

08001fc4 <_ZN13geometry_msgs7Vector37getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Vector3"; };
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	4b02      	ldr	r3, [pc, #8]	; (8001fd8 <_ZN13geometry_msgs7Vector37getTypeEv+0x14>)
 8001fce:	4618      	mov	r0, r3
 8001fd0:	370c      	adds	r7, #12
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bc80      	pop	{r7}
 8001fd6:	4770      	bx	lr
 8001fd8:	08005b50 	.word	0x08005b50

08001fdc <_ZN13geometry_msgs7Vector36getMD5Ev>:
    virtual const char * getMD5() override { return "4a842b65f413084dc2b10fb484ea7f17"; };
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	4b02      	ldr	r3, [pc, #8]	; (8001ff0 <_ZN13geometry_msgs7Vector36getMD5Ev+0x14>)
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	370c      	adds	r7, #12
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr
 8001ff0:	08005b68 	.word	0x08005b68

08001ff4 <_ZN13geometry_msgs5TwistC1Ev>:
      typedef geometry_msgs::Vector3 _linear_type;
      _linear_type linear;
      typedef geometry_msgs::Vector3 _angular_type;
      _angular_type angular;

    Twist():
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b082      	sub	sp, #8
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
      linear(),
      angular()
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7fe fa2e 	bl	8000460 <_ZN3ros3MsgC1Ev>
 8002004:	4a08      	ldr	r2, [pc, #32]	; (8002028 <_ZN13geometry_msgs5TwistC1Ev+0x34>)
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	601a      	str	r2, [r3, #0]
      linear(),
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	3308      	adds	r3, #8
 800200e:	4618      	mov	r0, r3
 8002010:	f7ff fade 	bl	80015d0 <_ZN13geometry_msgs7Vector3C1Ev>
      angular()
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	3328      	adds	r3, #40	; 0x28
 8002018:	4618      	mov	r0, r3
 800201a:	f7ff fad9 	bl	80015d0 <_ZN13geometry_msgs7Vector3C1Ev>
    {
    }
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	4618      	mov	r0, r3
 8002022:	3708      	adds	r7, #8
 8002024:	46bd      	mov	sp, r7
 8002026:	bd80      	pop	{r7, pc}
 8002028:	08005c88 	.word	0x08005c88

0800202c <_ZNK13geometry_msgs5Twist9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 800202c:	b580      	push	{r7, lr}
 800202e:	b084      	sub	sp, #16
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
 8002034:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002036:	2300      	movs	r3, #0
 8002038:	60fb      	str	r3, [r7, #12]
      offset += this->linear.serialize(outbuffer + offset);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	f103 0008 	add.w	r0, r3, #8
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	683a      	ldr	r2, [r7, #0]
 8002044:	4413      	add	r3, r2
 8002046:	4619      	mov	r1, r3
 8002048:	f7ff faea 	bl	8001620 <_ZNK13geometry_msgs7Vector39serializeEPh>
 800204c:	4602      	mov	r2, r0
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	4413      	add	r3, r2
 8002052:	60fb      	str	r3, [r7, #12]
      offset += this->angular.serialize(outbuffer + offset);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f103 0028 	add.w	r0, r3, #40	; 0x28
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	683a      	ldr	r2, [r7, #0]
 800205e:	4413      	add	r3, r2
 8002060:	4619      	mov	r1, r3
 8002062:	f7ff fadd 	bl	8001620 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8002066:	4602      	mov	r2, r0
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	4413      	add	r3, r2
 800206c:	60fb      	str	r3, [r7, #12]
      return offset;
 800206e:	68fb      	ldr	r3, [r7, #12]
    }
 8002070:	4618      	mov	r0, r3
 8002072:	3710      	adds	r7, #16
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <_ZN13geometry_msgs5Twist11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002078:	b580      	push	{r7, lr}
 800207a:	b084      	sub	sp, #16
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002082:	2300      	movs	r3, #0
 8002084:	60fb      	str	r3, [r7, #12]
      offset += this->linear.deserialize(inbuffer + offset);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	f103 0008 	add.w	r0, r3, #8
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	4413      	add	r3, r2
 8002092:	4619      	mov	r1, r3
 8002094:	f7ff fc36 	bl	8001904 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8002098:	4602      	mov	r2, r0
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	4413      	add	r3, r2
 800209e:	60fb      	str	r3, [r7, #12]
      offset += this->angular.deserialize(inbuffer + offset);
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	f103 0028 	add.w	r0, r3, #40	; 0x28
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	683a      	ldr	r2, [r7, #0]
 80020aa:	4413      	add	r3, r2
 80020ac:	4619      	mov	r1, r3
 80020ae:	f7ff fc29 	bl	8001904 <_ZN13geometry_msgs7Vector311deserializeEPh>
 80020b2:	4602      	mov	r2, r0
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	4413      	add	r3, r2
 80020b8:	60fb      	str	r3, [r7, #12]
     return offset;
 80020ba:	68fb      	ldr	r3, [r7, #12]
    }
 80020bc:	4618      	mov	r0, r3
 80020be:	3710      	adds	r7, #16
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <_ZN13geometry_msgs5Twist7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Twist"; };
 80020c4:	b480      	push	{r7}
 80020c6:	b083      	sub	sp, #12
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
 80020cc:	4b02      	ldr	r3, [pc, #8]	; (80020d8 <_ZN13geometry_msgs5Twist7getTypeEv+0x14>)
 80020ce:	4618      	mov	r0, r3
 80020d0:	370c      	adds	r7, #12
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bc80      	pop	{r7}
 80020d6:	4770      	bx	lr
 80020d8:	08005b8c 	.word	0x08005b8c

080020dc <_ZN13geometry_msgs5Twist6getMD5Ev>:
    virtual const char * getMD5() override { return "9f195f881246fdfa2798d1d3eebca84a"; };
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
 80020e4:	4b02      	ldr	r3, [pc, #8]	; (80020f0 <_ZN13geometry_msgs5Twist6getMD5Ev+0x14>)
 80020e6:	4618      	mov	r0, r3
 80020e8:	370c      	adds	r7, #12
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bc80      	pop	{r7}
 80020ee:	4770      	bx	lr
 80020f0:	08005ba0 	.word	0x08005ba0

080020f4 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 80020f4:	b480      	push	{r7}
 80020f6:	b083      	sub	sp, #12
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
 80020fc:	4a04      	ldr	r2, [pc, #16]	; (8002110 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4618      	mov	r0, r3
 8002106:	370c      	adds	r7, #12
 8002108:	46bd      	mov	sp, r7
 800210a:	bc80      	pop	{r7}
 800210c:	4770      	bx	lr
 800210e:	bf00      	nop
 8002110:	08005d00 	.word	0x08005d00

08002114 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8002114:	b580      	push	{r7, lr}
 8002116:	b082      	sub	sp, #8
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	4618      	mov	r0, r3
 8002120:	f7ff ffe8 	bl	80020f4 <_ZN3ros15NodeHandleBase_C1Ev>
 8002124:	4a36      	ldr	r2, [pc, #216]	; (8002200 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	3304      	adds	r3, #4
 800212e:	4618      	mov	r0, r3
 8002130:	f7ff f80c 	bl	800114c <_ZN13STM32HardwareC1Ev>
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2200      	movs	r2, #0
 8002138:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	2200      	movs	r2, #0
 8002140:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	2200      	movs	r2, #0
 8002148:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	2200      	movs	r2, #0
 8002150:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f203 4324 	addw	r3, r3, #1060	; 0x424
 800215a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800215e:	2100      	movs	r1, #0
 8002160:	4618      	mov	r0, r3
 8002162:	f003 fafc 	bl	800575e <memset>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f203 6324 	addw	r3, r3, #1572	; 0x624
 800216c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002170:	2100      	movs	r1, #0
 8002172:	4618      	mov	r0, r3
 8002174:	f003 faf3 	bl	800575e <memset>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f603 0324 	addw	r3, r3, #2084	; 0x824
 800217e:	2264      	movs	r2, #100	; 0x64
 8002180:	2100      	movs	r1, #0
 8002182:	4618      	mov	r0, r3
 8002184:	f003 faeb 	bl	800575e <memset>
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	f603 0388 	addw	r3, r3, #2184	; 0x888
 800218e:	2264      	movs	r2, #100	; 0x64
 8002190:	2100      	movs	r1, #0
 8002192:	4618      	mov	r0, r3
 8002194:	f003 fae3 	bl	800575e <memset>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	2200      	movs	r2, #0
 800219c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	2200      	movs	r2, #0
 80021c4:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	2200      	movs	r2, #0
 80021dc:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	f603 1314 	addw	r3, r3, #2324	; 0x914
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7fe fc9c 	bl	8000b2c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	4618      	mov	r0, r3
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	08005c74 	.word	0x08005c74

08002204 <_Z8steeringRKN13geometry_msgs5TwistE>:

void steering(const geometry_msgs::Twist& cmd_msg);

ros::Subscriber<geometry_msgs::Twist> sub("car/cmd_vel", steering);

void steering(const geometry_msgs::Twist& cmd_msg) {
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]

}
 800220c:	bf00      	nop
 800220e:	370c      	adds	r7, #12
 8002210:	46bd      	mov	sp, r7
 8002212:	bc80      	pop	{r7}
 8002214:	4770      	bx	lr
	...

08002218 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 8002220:	4805      	ldr	r0, [pc, #20]	; (8002238 <HAL_UART_TxCpltCallback+0x20>)
 8002222:	f000 f99d 	bl	8002560 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8002226:	4603      	mov	r3, r0
 8002228:	4618      	mov	r0, r3
 800222a:	f7fe fff5 	bl	8001218 <_ZN13STM32Hardware5flushEv>
}
 800222e:	bf00      	nop
 8002230:	3708      	adds	r7, #8
 8002232:	46bd      	mov	sp, r7
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	20000168 	.word	0x20000168

0800223c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 8002244:	4805      	ldr	r0, [pc, #20]	; (800225c <HAL_UART_RxCpltCallback+0x20>)
 8002246:	f000 f98b 	bl	8002560 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 800224a:	4603      	mov	r3, r0
 800224c:	4618      	mov	r0, r3
 800224e:	f7fe ffa4 	bl	800119a <_ZN13STM32Hardware10reset_rbufEv>
}
 8002252:	bf00      	nop
 8002254:	3708      	adds	r7, #8
 8002256:	46bd      	mov	sp, r7
 8002258:	bd80      	pop	{r7, pc}
 800225a:	bf00      	nop
 800225c:	20000168 	.word	0x20000168

08002260 <setup>:

void setup(void)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	af00      	add	r7, sp, #0
  nh.initNode();
 8002264:	480c      	ldr	r0, [pc, #48]	; (8002298 <setup+0x38>)
 8002266:	f000 f986 	bl	8002576 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
  nh.advertise(chatter);
 800226a:	490c      	ldr	r1, [pc, #48]	; (800229c <setup+0x3c>)
 800226c:	480a      	ldr	r0, [pc, #40]	; (8002298 <setup+0x38>)
 800226e:	f000 f99f 	bl	80025b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  nh.advertise(rightPub);
 8002272:	490b      	ldr	r1, [pc, #44]	; (80022a0 <setup+0x40>)
 8002274:	4808      	ldr	r0, [pc, #32]	; (8002298 <setup+0x38>)
 8002276:	f000 f99b 	bl	80025b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  nh.advertise(leftPub);
 800227a:	490a      	ldr	r1, [pc, #40]	; (80022a4 <setup+0x44>)
 800227c:	4806      	ldr	r0, [pc, #24]	; (8002298 <setup+0x38>)
 800227e:	f000 f997 	bl	80025b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
  nh.advertise(anglePub);
 8002282:	4909      	ldr	r1, [pc, #36]	; (80022a8 <setup+0x48>)
 8002284:	4804      	ldr	r0, [pc, #16]	; (8002298 <setup+0x38>)
 8002286:	f000 f993 	bl	80025b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>

  NBT_init(&ros_nbt, 100);
 800228a:	2164      	movs	r1, #100	; 0x64
 800228c:	4807      	ldr	r0, [pc, #28]	; (80022ac <setup+0x4c>)
 800228e:	f000 fe8d 	bl	8002fac <_Z8NBT_initP5nbt_tm>
}
 8002292:	bf00      	nop
 8002294:	bd80      	pop	{r7, pc}
 8002296:	bf00      	nop
 8002298:	20000168 	.word	0x20000168
 800229c:	20000aac 	.word	0x20000aac
 80022a0:	20000ac8 	.word	0x20000ac8
 80022a4:	20000aec 	.word	0x20000aec
 80022a8:	20000b00 	.word	0x20000b00
 80022ac:	20000160 	.word	0x20000160

080022b0 <loop>:

void loop(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0


  if(NBT_handler(&ros_nbt)){
 80022b4:	4811      	ldr	r0, [pc, #68]	; (80022fc <loop+0x4c>)
 80022b6:	f000 fe8a 	bl	8002fce <_Z11NBT_handlerP5nbt_t>
 80022ba:	4603      	mov	r3, r0
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d01a      	beq.n	80022f6 <loop+0x46>
		#ifdef STM32F1xx
	  	  HAL_GPIO_TogglePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin);
 80022c0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80022c4:	480e      	ldr	r0, [pc, #56]	; (8002300 <loop+0x50>)
 80022c6:	f001 fdf0 	bl	8003eaa <HAL_GPIO_TogglePin>
		#endif
	  str_msg.data = hello;
 80022ca:	4b0e      	ldr	r3, [pc, #56]	; (8002304 <loop+0x54>)
 80022cc:	4a0e      	ldr	r2, [pc, #56]	; (8002308 <loop+0x58>)
 80022ce:	605a      	str	r2, [r3, #4]
	  chatter.publish(&str_msg);
 80022d0:	490c      	ldr	r1, [pc, #48]	; (8002304 <loop+0x54>)
 80022d2:	480e      	ldr	r0, [pc, #56]	; (800230c <loop+0x5c>)
 80022d4:	f7fe ff08 	bl	80010e8 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	  rightPub.publish( &right_wheel_tick_count );
 80022d8:	490d      	ldr	r1, [pc, #52]	; (8002310 <loop+0x60>)
 80022da:	480e      	ldr	r0, [pc, #56]	; (8002314 <loop+0x64>)
 80022dc:	f7fe ff04 	bl	80010e8 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	  leftPub.publish( &left_wheel_tick_count );
 80022e0:	490d      	ldr	r1, [pc, #52]	; (8002318 <loop+0x68>)
 80022e2:	480e      	ldr	r0, [pc, #56]	; (800231c <loop+0x6c>)
 80022e4:	f7fe ff00 	bl	80010e8 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	  anglePub.publish( &angleCount);
 80022e8:	490d      	ldr	r1, [pc, #52]	; (8002320 <loop+0x70>)
 80022ea:	480e      	ldr	r0, [pc, #56]	; (8002324 <loop+0x74>)
 80022ec:	f7fe fefc 	bl	80010e8 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	  nh.spinOnce();
 80022f0:	480d      	ldr	r0, [pc, #52]	; (8002328 <loop+0x78>)
 80022f2:	f000 f98c 	bl	800260e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
  }

//  HAL_Delay(100);
}
 80022f6:	bf00      	nop
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	20000160 	.word	0x20000160
 8002300:	40011000 	.word	0x40011000
 8002304:	20000aa4 	.word	0x20000aa4
 8002308:	20000004 	.word	0x20000004
 800230c:	20000aac 	.word	0x20000aac
 8002310:	20000ac0 	.word	0x20000ac0
 8002314:	20000ac8 	.word	0x20000ac8
 8002318:	20000ae4 	.word	0x20000ae4
 800231c:	20000aec 	.word	0x20000aec
 8002320:	20000adc 	.word	0x20000adc
 8002324:	20000b00 	.word	0x20000b00
 8002328:	20000168 	.word	0x20000168

0800232c <left_wheel_tick>:

void left_wheel_tick() {
 800232c:	b580      	push	{r7, lr}
 800232e:	b082      	sub	sp, #8
 8002330:	af00      	add	r7, sp, #0
	bool val = HAL_GPIO_ReadPin(ENC_IN_LEFT_B_GPIO_Port, ENC_IN_LEFT_B_Pin);
 8002332:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002336:	4822      	ldr	r0, [pc, #136]	; (80023c0 <left_wheel_tick+0x94>)
 8002338:	f001 fd88 	bl	8003e4c <HAL_GPIO_ReadPin>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	bf14      	ite	ne
 8002342:	2301      	movne	r3, #1
 8002344:	2300      	moveq	r3, #0
 8002346:	71fb      	strb	r3, [r7, #7]

	if (val == false) {
 8002348:	79fb      	ldrb	r3, [r7, #7]
 800234a:	2b00      	cmp	r3, #0
 800234c:	d103      	bne.n	8002356 <left_wheel_tick+0x2a>
	    Direction_right = false;  // Reverse
 800234e:	4b1d      	ldr	r3, [pc, #116]	; (80023c4 <left_wheel_tick+0x98>)
 8002350:	2200      	movs	r2, #0
 8002352:	701a      	strb	r2, [r3, #0]
 8002354:	e002      	b.n	800235c <left_wheel_tick+0x30>
	  } else {
	    Direction_right = true;  // Forward
 8002356:	4b1b      	ldr	r3, [pc, #108]	; (80023c4 <left_wheel_tick+0x98>)
 8002358:	2201      	movs	r2, #1
 800235a:	701a      	strb	r2, [r3, #0]
	  }

	if (Direction_left) {
 800235c:	4b1a      	ldr	r3, [pc, #104]	; (80023c8 <left_wheel_tick+0x9c>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	2b00      	cmp	r3, #0
 8002362:	d015      	beq.n	8002390 <left_wheel_tick+0x64>
	    if (left_wheel_tick_count.data == encoder_maximum) {
 8002364:	4b19      	ldr	r3, [pc, #100]	; (80023cc <left_wheel_tick+0xa0>)
 8002366:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800236a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800236e:	4293      	cmp	r3, r2
 8002370:	d104      	bne.n	800237c <left_wheel_tick+0x50>
	      left_wheel_tick_count.data = encoder_minimum;
 8002372:	4b16      	ldr	r3, [pc, #88]	; (80023cc <left_wheel_tick+0xa0>)
 8002374:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002378:	809a      	strh	r2, [r3, #4]
	    } else {
	      left_wheel_tick_count.data--;
	    }
	  }

}
 800237a:	e01d      	b.n	80023b8 <left_wheel_tick+0x8c>
	      left_wheel_tick_count.data++;
 800237c:	4b13      	ldr	r3, [pc, #76]	; (80023cc <left_wheel_tick+0xa0>)
 800237e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002382:	b29b      	uxth	r3, r3
 8002384:	3301      	adds	r3, #1
 8002386:	b29b      	uxth	r3, r3
 8002388:	b21a      	sxth	r2, r3
 800238a:	4b10      	ldr	r3, [pc, #64]	; (80023cc <left_wheel_tick+0xa0>)
 800238c:	809a      	strh	r2, [r3, #4]
}
 800238e:	e013      	b.n	80023b8 <left_wheel_tick+0x8c>
	    if (left_wheel_tick_count.data == encoder_minimum) {
 8002390:	4b0e      	ldr	r3, [pc, #56]	; (80023cc <left_wheel_tick+0xa0>)
 8002392:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002396:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800239a:	d104      	bne.n	80023a6 <left_wheel_tick+0x7a>
	      left_wheel_tick_count.data = encoder_maximum;
 800239c:	4b0b      	ldr	r3, [pc, #44]	; (80023cc <left_wheel_tick+0xa0>)
 800239e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80023a2:	809a      	strh	r2, [r3, #4]
}
 80023a4:	e008      	b.n	80023b8 <left_wheel_tick+0x8c>
	      left_wheel_tick_count.data--;
 80023a6:	4b09      	ldr	r3, [pc, #36]	; (80023cc <left_wheel_tick+0xa0>)
 80023a8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	3b01      	subs	r3, #1
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	b21a      	sxth	r2, r3
 80023b4:	4b05      	ldr	r3, [pc, #20]	; (80023cc <left_wheel_tick+0xa0>)
 80023b6:	809a      	strh	r2, [r3, #4]
}
 80023b8:	bf00      	nop
 80023ba:	3708      	adds	r7, #8
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	40010c00 	.word	0x40010c00
 80023c4:	20000001 	.word	0x20000001
 80023c8:	20000000 	.word	0x20000000
 80023cc:	20000ae4 	.word	0x20000ae4

080023d0 <right_wheel_tick>:

void right_wheel_tick() {
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0

	bool val = HAL_GPIO_ReadPin(ENC_IN_RIGHT_B_GPIO_Port, ENC_IN_RIGHT_B_Pin);
 80023d6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80023da:	4822      	ldr	r0, [pc, #136]	; (8002464 <right_wheel_tick+0x94>)
 80023dc:	f001 fd36 	bl	8003e4c <HAL_GPIO_ReadPin>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	bf14      	ite	ne
 80023e6:	2301      	movne	r3, #1
 80023e8:	2300      	moveq	r3, #0
 80023ea:	71fb      	strb	r3, [r7, #7]

	  if (val == false) {
 80023ec:	79fb      	ldrb	r3, [r7, #7]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d103      	bne.n	80023fa <right_wheel_tick+0x2a>
	      Direction_left = true;  // Reverse
 80023f2:	4b1d      	ldr	r3, [pc, #116]	; (8002468 <right_wheel_tick+0x98>)
 80023f4:	2201      	movs	r2, #1
 80023f6:	701a      	strb	r2, [r3, #0]
 80023f8:	e002      	b.n	8002400 <right_wheel_tick+0x30>
	    } else {
	      Direction_left = false;  // Forward
 80023fa:	4b1b      	ldr	r3, [pc, #108]	; (8002468 <right_wheel_tick+0x98>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	701a      	strb	r2, [r3, #0]
	    }

	    if (Direction_left) {
 8002400:	4b19      	ldr	r3, [pc, #100]	; (8002468 <right_wheel_tick+0x98>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d015      	beq.n	8002434 <right_wheel_tick+0x64>
	      if (left_wheel_tick_count.data == encoder_maximum) {
 8002408:	4b18      	ldr	r3, [pc, #96]	; (800246c <right_wheel_tick+0x9c>)
 800240a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800240e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002412:	4293      	cmp	r3, r2
 8002414:	d104      	bne.n	8002420 <right_wheel_tick+0x50>
	        left_wheel_tick_count.data = encoder_minimum;
 8002416:	4b15      	ldr	r3, [pc, #84]	; (800246c <right_wheel_tick+0x9c>)
 8002418:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800241c:	809a      	strh	r2, [r3, #4]
	      } else {
	        left_wheel_tick_count.data--;
	      }
	    }

}
 800241e:	e01d      	b.n	800245c <right_wheel_tick+0x8c>
	        left_wheel_tick_count.data++;
 8002420:	4b12      	ldr	r3, [pc, #72]	; (800246c <right_wheel_tick+0x9c>)
 8002422:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002426:	b29b      	uxth	r3, r3
 8002428:	3301      	adds	r3, #1
 800242a:	b29b      	uxth	r3, r3
 800242c:	b21a      	sxth	r2, r3
 800242e:	4b0f      	ldr	r3, [pc, #60]	; (800246c <right_wheel_tick+0x9c>)
 8002430:	809a      	strh	r2, [r3, #4]
}
 8002432:	e013      	b.n	800245c <right_wheel_tick+0x8c>
	      if (left_wheel_tick_count.data == encoder_minimum) {
 8002434:	4b0d      	ldr	r3, [pc, #52]	; (800246c <right_wheel_tick+0x9c>)
 8002436:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 800243a:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 800243e:	d104      	bne.n	800244a <right_wheel_tick+0x7a>
	        left_wheel_tick_count.data = encoder_maximum;
 8002440:	4b0a      	ldr	r3, [pc, #40]	; (800246c <right_wheel_tick+0x9c>)
 8002442:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8002446:	809a      	strh	r2, [r3, #4]
}
 8002448:	e008      	b.n	800245c <right_wheel_tick+0x8c>
	        left_wheel_tick_count.data--;
 800244a:	4b08      	ldr	r3, [pc, #32]	; (800246c <right_wheel_tick+0x9c>)
 800244c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002450:	b29b      	uxth	r3, r3
 8002452:	3b01      	subs	r3, #1
 8002454:	b29b      	uxth	r3, r3
 8002456:	b21a      	sxth	r2, r3
 8002458:	4b04      	ldr	r3, [pc, #16]	; (800246c <right_wheel_tick+0x9c>)
 800245a:	809a      	strh	r2, [r3, #4]
}
 800245c:	bf00      	nop
 800245e:	3708      	adds	r7, #8
 8002460:	46bd      	mov	sp, r7
 8002462:	bd80      	pop	{r7, pc}
 8002464:	40010c00 	.word	0x40010c00
 8002468:	20000000 	.word	0x20000000
 800246c:	20000ae4 	.word	0x20000ae4

08002470 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 800247a:	2300      	movs	r3, #0
 800247c:	60fb      	str	r3, [r7, #12]
 800247e:	e00c      	b.n	800249a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x2a>
      arr[i] = (var >> (8 * i));
 8002480:	68fb      	ldr	r3, [r7, #12]
 8002482:	00db      	lsls	r3, r3, #3
 8002484:	683a      	ldr	r2, [r7, #0]
 8002486:	fa22 f103 	lsr.w	r1, r2, r3
 800248a:	687a      	ldr	r2, [r7, #4]
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	4413      	add	r3, r2
 8002490:	b2ca      	uxtb	r2, r1
 8002492:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	3301      	adds	r3, #1
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	2b03      	cmp	r3, #3
 800249e:	d9ef      	bls.n	8002480 <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x10>
  }
 80024a0:	bf00      	nop
 80024a2:	bf00      	nop
 80024a4:	3714      	adds	r7, #20
 80024a6:	46bd      	mov	sp, r7
 80024a8:	bc80      	pop	{r7}
 80024aa:	4770      	bx	lr

080024ac <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80024ac:	b480      	push	{r7}
 80024ae:	b085      	sub	sp, #20
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
 80024b4:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2200      	movs	r2, #0
 80024ba:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80024bc:	2300      	movs	r3, #0
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	e010      	b.n	80024e4 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x38>
      var |= (arr[i] << (8 * i));
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	6839      	ldr	r1, [r7, #0]
 80024c8:	68fa      	ldr	r2, [r7, #12]
 80024ca:	440a      	add	r2, r1
 80024cc:	7812      	ldrb	r2, [r2, #0]
 80024ce:	4611      	mov	r1, r2
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	00d2      	lsls	r2, r2, #3
 80024d4:	fa01 f202 	lsl.w	r2, r1, r2
 80024d8:	431a      	orrs	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	3301      	adds	r3, #1
 80024e2:	60fb      	str	r3, [r7, #12]
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	2b03      	cmp	r3, #3
 80024e8:	d9eb      	bls.n	80024c2 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x16>
  }
 80024ea:	bf00      	nop
 80024ec:	bf00      	nop
 80024ee:	3714      	adds	r7, #20
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bc80      	pop	{r7}
 80024f4:	4770      	bx	lr
	...

080024f8 <_ZN3ros11Subscriber_C1Ev>:

namespace ros
{

/* Base class for objects subscribers. */
class Subscriber_
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	4a04      	ldr	r2, [pc, #16]	; (8002514 <_ZN3ros11Subscriber_C1Ev+0x1c>)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	601a      	str	r2, [r3, #0]
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4618      	mov	r0, r3
 800250a:	370c      	adds	r7, #12
 800250c:	46bd      	mov	sp, r7
 800250e:	bc80      	pop	{r7}
 8002510:	4770      	bx	lr
 8002512:	bf00      	nop
 8002514:	08005ce8 	.word	0x08005ce8

08002518 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>:
{
public:
  typedef void(*CallbackT)(const MsgT&);
  MsgT msg;

  Subscriber(const char * topic_name, CallbackT cb, int endpoint = rosserial_msgs::TopicInfo::ID_SUBSCRIBER) :
 8002518:	b580      	push	{r7, lr}
 800251a:	b084      	sub	sp, #16
 800251c:	af00      	add	r7, sp, #0
 800251e:	60f8      	str	r0, [r7, #12]
 8002520:	60b9      	str	r1, [r7, #8]
 8002522:	607a      	str	r2, [r7, #4]
 8002524:	603b      	str	r3, [r7, #0]
    cb_(cb),
    endpoint_(endpoint)
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	4618      	mov	r0, r3
 800252a:	f7ff ffe5 	bl	80024f8 <_ZN3ros11Subscriber_C1Ev>
 800252e:	4a0b      	ldr	r2, [pc, #44]	; (800255c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei+0x44>)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	3310      	adds	r3, #16
 8002538:	4618      	mov	r0, r3
 800253a:	f7ff fd5b 	bl	8001ff4 <_ZN13geometry_msgs5TwistC1Ev>
    cb_(cb),
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	659a      	str	r2, [r3, #88]	; 0x58
    endpoint_(endpoint)
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	683a      	ldr	r2, [r7, #0]
 8002548:	65da      	str	r2, [r3, #92]	; 0x5c
  {
    topic_ = topic_name;
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	68ba      	ldr	r2, [r7, #8]
 800254e:	609a      	str	r2, [r3, #8]
  };
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	4618      	mov	r0, r3
 8002554:	3710      	adds	r7, #16
 8002556:	46bd      	mov	sp, r7
 8002558:	bd80      	pop	{r7, pc}
 800255a:	bf00      	nop
 800255c:	08005c5c 	.word	0x08005c5c

08002560 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 8002560:	b480      	push	{r7}
 8002562:	b083      	sub	sp, #12
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3304      	adds	r3, #4
  }
 800256c:	4618      	mov	r0, r3
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	bc80      	pop	{r7}
 8002574:	4770      	bx	lr

08002576 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 8002576:	b580      	push	{r7, lr}
 8002578:	b082      	sub	sp, #8
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	3304      	adds	r3, #4
 8002582:	4618      	mov	r0, r3
 8002584:	f7fe fdfe 	bl	8001184 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2200      	movs	r2, #0
 800258c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2200      	movs	r2, #0
 8002594:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2200      	movs	r2, #0
 80025a4:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 80025a8:	bf00      	nop
 80025aa:	3708      	adds	r7, #8
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80025ba:	2300      	movs	r3, #0
 80025bc:	60fb      	str	r3, [r7, #12]
 80025be:	e01d      	b.n	80025fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4c>
    {
      if (publishers[i] == 0) // empty slot
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	4413      	add	r3, r2
 80025cc:	685b      	ldr	r3, [r3, #4]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d111      	bne.n	80025f6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x46>
      {
        publishers[i] = &p;
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80025da:	009b      	lsls	r3, r3, #2
 80025dc:	4413      	add	r3, r2
 80025de:	683a      	ldr	r2, [r7, #0]
 80025e0:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 80025e8:	683b      	ldr	r3, [r7, #0]
 80025ea:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 80025ec:	687a      	ldr	r2, [r7, #4]
 80025ee:	683b      	ldr	r3, [r7, #0]
 80025f0:	60da      	str	r2, [r3, #12]
        return true;
 80025f2:	2301      	movs	r3, #1
 80025f4:	e006      	b.n	8002604 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	3301      	adds	r3, #1
 80025fa:	60fb      	str	r3, [r7, #12]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2b18      	cmp	r3, #24
 8002600:	ddde      	ble.n	80025c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x10>
      }
    }
    return false;
 8002602:	2300      	movs	r3, #0
  }
 8002604:	4618      	mov	r0, r3
 8002606:	3714      	adds	r7, #20
 8002608:	46bd      	mov	sp, r7
 800260a:	bc80      	pop	{r7}
 800260c:	4770      	bx	lr

0800260e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 800260e:	b580      	push	{r7, lr}
 8002610:	b084      	sub	sp, #16
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	3304      	adds	r3, #4
 800261a:	4618      	mov	r0, r3
 800261c:	f7fe feb6 	bl	800138c <_ZN13STM32Hardware4timeEv>
 8002620:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 8002628:	68fa      	ldr	r2, [r7, #12]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8002630:	4293      	cmp	r3, r2
 8002632:	d903      	bls.n	800263c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2200      	movs	r2, #0
 8002638:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002642:	2b00      	cmp	r3, #0
 8002644:	d009      	beq.n	800265a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	429a      	cmp	r2, r3
 8002650:	d903      	bls.n	800265a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2200      	movs	r2, #0
 8002656:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8002660:	2b00      	cmp	r3, #0
 8002662:	d014      	beq.n	800268e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	3304      	adds	r3, #4
 8002668:	4618      	mov	r0, r3
 800266a:	f7fe fe8f 	bl	800138c <_ZN13STM32Hardware4timeEv>
 800266e:	4602      	mov	r2, r0
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	1ad2      	subs	r2, r2, r3
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 800267a:	429a      	cmp	r2, r3
 800267c:	bf8c      	ite	hi
 800267e:	2301      	movhi	r3, #1
 8002680:	2300      	movls	r3, #0
 8002682:	b2db      	uxtb	r3, r3
 8002684:	2b00      	cmp	r3, #0
 8002686:	d002      	beq.n	800268e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 8002688:	f06f 0301 	mvn.w	r3, #1
 800268c:	e194      	b.n	80029b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	3304      	adds	r3, #4
 8002692:	4618      	mov	r0, r3
 8002694:	f7fe fd92 	bl	80011bc <_ZN13STM32Hardware4readEv>
 8002698:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	2b00      	cmp	r3, #0
 800269e:	f2c0 8174 	blt.w	800298a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	441a      	add	r2, r3
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80026b8:	2b07      	cmp	r3, #7
 80026ba:	d11e      	bne.n	80026fa <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 80026c2:	1c59      	adds	r1, r3, #1
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 80026ca:	68ba      	ldr	r2, [r7, #8]
 80026cc:	b2d1      	uxtb	r1, r2
 80026ce:	687a      	ldr	r2, [r7, #4]
 80026d0:	4413      	add	r3, r2
 80026d2:	460a      	mov	r2, r1
 80026d4:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80026de:	1e5a      	subs	r2, r3, #1
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d1b4      	bne.n	800265a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	2208      	movs	r2, #8
 80026f4:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80026f8:	e7af      	b.n	800265a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002700:	2b00      	cmp	r3, #0
 8002702:	d128      	bne.n	8002756 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 8002704:	68bb      	ldr	r3, [r7, #8]
 8002706:	2bff      	cmp	r3, #255	; 0xff
 8002708:	d10d      	bne.n	8002726 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002710:	1c5a      	adds	r2, r3, #1
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f103 0214 	add.w	r2, r3, #20
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8002724:	e799      	b.n	800265a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	3304      	adds	r3, #4
 800272a:	4618      	mov	r0, r3
 800272c:	f7fe fe2e 	bl	800138c <_ZN13STM32Hardware4timeEv>
 8002730:	4602      	mov	r2, r0
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	f241 3288 	movw	r2, #5000	; 0x1388
 800273a:	4293      	cmp	r3, r2
 800273c:	bf8c      	ite	hi
 800273e:	2301      	movhi	r3, #1
 8002740:	2300      	movls	r3, #0
 8002742:	b2db      	uxtb	r3, r3
 8002744:	2b00      	cmp	r3, #0
 8002746:	d088      	beq.n	800265a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 8002750:	f06f 0301 	mvn.w	r3, #1
 8002754:	e130      	b.n	80029b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800275c:	2b01      	cmp	r3, #1
 800275e:	d118      	bne.n	8002792 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 8002760:	68bb      	ldr	r3, [r7, #8]
 8002762:	2bfe      	cmp	r3, #254	; 0xfe
 8002764:	d107      	bne.n	8002776 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800276c:	1c5a      	adds	r2, r3, #1
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002774:	e771      	b.n	800265a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8002784:	2b00      	cmp	r3, #0
 8002786:	f47f af68 	bne.w	800265a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f000 f918 	bl	80029c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8002790:	e763      	b.n	800265a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002798:	2b02      	cmp	r3, #2
 800279a:	d113      	bne.n	80027c4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	68ba      	ldr	r2, [r7, #8]
 80027a0:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2200      	movs	r2, #0
 80027a8:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80027b2:	1c5a      	adds	r2, r3, #1
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	68ba      	ldr	r2, [r7, #8]
 80027be:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80027c2:	e74a      	b.n	800265a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80027ca:	2b03      	cmp	r3, #3
 80027cc:	d110      	bne.n	80027f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 80027d4:	68bb      	ldr	r3, [r7, #8]
 80027d6:	021b      	lsls	r3, r3, #8
 80027d8:	441a      	add	r2, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80027e6:	1c5a      	adds	r2, r3, #1
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80027ee:	e734      	b.n	800265a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80027f6:	2b04      	cmp	r3, #4
 80027f8:	d116      	bne.n	8002828 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8002800:	425a      	negs	r2, r3
 8002802:	b2db      	uxtb	r3, r3
 8002804:	b2d2      	uxtb	r2, r2
 8002806:	bf58      	it	pl
 8002808:	4253      	negpl	r3, r2
 800280a:	2bff      	cmp	r3, #255	; 0xff
 800280c:	d107      	bne.n	800281e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002814:	1c5a      	adds	r2, r3, #1
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800281c:	e71d      	b.n	800265a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8002826:	e718      	b.n	800265a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800282e:	2b05      	cmp	r3, #5
 8002830:	d10f      	bne.n	8002852 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	68ba      	ldr	r2, [r7, #8]
 8002836:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002840:	1c5a      	adds	r2, r3, #1
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	68ba      	ldr	r2, [r7, #8]
 800284c:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8002850:	e703      	b.n	800265a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002858:	2b06      	cmp	r3, #6
 800285a:	d117      	bne.n	800288c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 8002862:	68bb      	ldr	r3, [r7, #8]
 8002864:	021b      	lsls	r3, r3, #8
 8002866:	441a      	add	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2207      	movs	r2, #7
 8002872:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 800287c:	2b00      	cmp	r3, #0
 800287e:	f47f aeec 	bne.w	800265a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2208      	movs	r2, #8
 8002886:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800288a:	e6e6      	b.n	800265a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8002892:	2b08      	cmp	r3, #8
 8002894:	f47f aee1 	bne.w	800265a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2200      	movs	r2, #0
 800289c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 80028a6:	425a      	negs	r2, r3
 80028a8:	b2db      	uxtb	r3, r3
 80028aa:	b2d2      	uxtb	r2, r2
 80028ac:	bf58      	it	pl
 80028ae:	4253      	negpl	r3, r2
 80028b0:	2bff      	cmp	r3, #255	; 0xff
 80028b2:	f47f aed2 	bne.w	800265a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d110      	bne.n	80028e2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 f87d 	bl	80029c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 80028c6:	6878      	ldr	r0, [r7, #4]
 80028c8:	f000 f898 	bl	80029fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	68fa      	ldr	r2, [r7, #12]
 80028d0:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	68fa      	ldr	r2, [r7, #12]
 80028d8:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 80028dc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028e0:	e06a      	b.n	80029b8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80028e8:	2b0a      	cmp	r3, #10
 80028ea:	d107      	bne.n	80028fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80028f2:	4619      	mov	r1, r3
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 f961 	bl	8002bbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 80028fa:	e6ae      	b.n	800265a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002902:	2b06      	cmp	r3, #6
 8002904:	d10e      	bne.n	8002924 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	f603 1214 	addw	r2, r3, #2324	; 0x914
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8002912:	4619      	mov	r1, r3
 8002914:	4610      	mov	r0, r2
 8002916:	f7fe fa48 	bl	8000daa <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 8002922:	e69a      	b.n	800265a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800292a:	2b0b      	cmp	r3, #11
 800292c:	d104      	bne.n	8002938 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 8002936:	e690      	b.n	800265a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800293e:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002948:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800294c:	2b00      	cmp	r3, #0
 800294e:	f43f ae84 	beq.w	800265a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8002958:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002962:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800296c:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	687a      	ldr	r2, [r7, #4]
 8002980:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8002984:	4611      	mov	r1, r2
 8002986:	4798      	blx	r3
    while (true)
 8002988:	e667      	b.n	800265a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 800298a:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8002992:	2b00      	cmp	r3, #0
 8002994:	d00f      	beq.n	80029b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 800299c:	68fa      	ldr	r2, [r7, #12]
 800299e:	1ad3      	subs	r3, r2, r3
 80029a0:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d906      	bls.n	80029b6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f000 f809 	bl	80029c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 80029b6:	2300      	movs	r3, #0
  }
 80029b8:	4618      	mov	r0, r3
 80029ba:	3710      	adds	r7, #16
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}

080029c0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b086      	sub	sp, #24
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 80029c8:	f107 030c 	add.w	r3, r7, #12
 80029cc:	4618      	mov	r0, r3
 80029ce:	f7fd fd57 	bl	8000480 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f107 020c 	add.w	r2, r7, #12
 80029dc:	210a      	movs	r1, #10
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	4798      	blx	r3
    rt_time = hardware_.time();
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	3304      	adds	r3, #4
 80029e6:	4618      	mov	r0, r3
 80029e8:	f7fe fcd0 	bl	800138c <_ZN13STM32Hardware4timeEv>
 80029ec:	4602      	mov	r2, r0
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 80029f4:	bf00      	nop
 80029f6:	3718      	adds	r7, #24
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}

080029fc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 80029fc:	b590      	push	{r4, r7, lr}
 80029fe:	b08b      	sub	sp, #44	; 0x2c
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8002a04:	f107 030c 	add.w	r3, r7, #12
 8002a08:	4618      	mov	r0, r3
 8002a0a:	f7fd fe23 	bl	8000654 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8002a0e:	2300      	movs	r3, #0
 8002a10:	627b      	str	r3, [r7, #36]	; 0x24
 8002a12:	e062      	b.n	8002ada <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xde>
    {
      if (publishers[i] != 0) // non-empty slot
 8002a14:	687a      	ldr	r2, [r7, #4]
 8002a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a18:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002a1c:	009b      	lsls	r3, r3, #2
 8002a1e:	4413      	add	r3, r2
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d056      	beq.n	8002ad4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xd8>
      {
        ti.topic_id = publishers[i]->id_;
 8002a26:	687a      	ldr	r2, [r7, #4]
 8002a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2a:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	4413      	add	r3, r2
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	689b      	ldr	r3, [r3, #8]
 8002a36:	b29b      	uxth	r3, r3
 8002a38:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8002a3a:	687a      	ldr	r2, [r7, #4]
 8002a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4413      	add	r3, r2
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a50:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	4413      	add	r3, r2
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	6859      	ldr	r1, [r3, #4]
 8002a5c:	687a      	ldr	r2, [r7, #4]
 8002a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a60:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	4413      	add	r3, r2
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	3308      	adds	r3, #8
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4608      	mov	r0, r1
 8002a74:	4798      	blx	r3
 8002a76:	4603      	mov	r3, r0
 8002a78:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8002a7a:	687a      	ldr	r2, [r7, #4]
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002a82:	009b      	lsls	r3, r3, #2
 8002a84:	4413      	add	r3, r2
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	6859      	ldr	r1, [r3, #4]
 8002a8a:	687a      	ldr	r2, [r7, #4]
 8002a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a8e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	4413      	add	r3, r2
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	685b      	ldr	r3, [r3, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	330c      	adds	r3, #12
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4608      	mov	r0, r1
 8002aa2:	4798      	blx	r3
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8002aa8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002aac:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681c      	ldr	r4, [r3, #0]
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002abc:	009b      	lsls	r3, r3, #2
 8002abe:	4413      	add	r3, r2
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	f7fe fb24 	bl	8001110 <_ZN3ros9Publisher15getEndpointTypeEv>
 8002ac8:	4601      	mov	r1, r0
 8002aca:	f107 030c 	add.w	r3, r7, #12
 8002ace:	461a      	mov	r2, r3
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8002ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002adc:	2b18      	cmp	r3, #24
 8002ade:	dd99      	ble.n	8002a14 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x18>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ae4:	e05e      	b.n	8002ba4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a8>
    {
      if (subscribers[i] != 0) // non-empty slot
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aea:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002aee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d053      	beq.n	8002b9e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a2>
      {
        ti.topic_id = subscribers[i]->id_;
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002afa:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b0c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002b10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b1c:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002b20:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b28:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	3308      	adds	r3, #8
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4608      	mov	r0, r1
 8002b38:	4798      	blx	r3
 8002b3a:	4603      	mov	r3, r0
 8002b3c:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b42:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002b46:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b4e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002b52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	330c      	adds	r3, #12
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4608      	mov	r0, r1
 8002b5e:	4798      	blx	r3
 8002b60:	4603      	mov	r3, r0
 8002b62:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8002b64:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b68:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	681c      	ldr	r4, [r3, #0]
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b74:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002b78:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b80:	f202 2222 	addw	r2, r2, #546	; 0x222
 8002b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	3304      	adds	r3, #4
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	4608      	mov	r0, r1
 8002b90:	4798      	blx	r3
 8002b92:	4601      	mov	r1, r0
 8002b94:	f107 030c 	add.w	r3, r7, #12
 8002b98:	461a      	mov	r2, r3
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8002b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba0:	3301      	adds	r3, #1
 8002ba2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba6:	2b18      	cmp	r3, #24
 8002ba8:	dd9d      	ble.n	8002ae6 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xea>
      }
    }
    configured_ = true;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2201      	movs	r2, #1
 8002bae:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8002bb2:	bf00      	nop
 8002bb4:	372c      	adds	r7, #44	; 0x2c
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd90      	pop	{r4, r7, pc}
	...

08002bbc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b086      	sub	sp, #24
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
 8002bc4:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8002bc6:	f107 0308 	add.w	r3, r7, #8
 8002bca:	4618      	mov	r0, r3
 8002bcc:	f7fd fc58 	bl	8000480 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	3304      	adds	r3, #4
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	f7fe fbd9 	bl	800138c <_ZN13STM32Hardware4timeEv>
 8002bda:	4602      	mov	r2, r0
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8002be2:	1ad3      	subs	r3, r2, r3
 8002be4:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8002be6:	f107 0308 	add.w	r3, r7, #8
 8002bea:	6839      	ldr	r1, [r7, #0]
 8002bec:	4618      	mov	r0, r3
 8002bee:	f7fd fcb6 	bl	800055e <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8002bf2:	68fa      	ldr	r2, [r7, #12]
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	4915      	ldr	r1, [pc, #84]	; (8002c4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8002bf8:	fba1 1303 	umull	r1, r3, r1, r3
 8002bfc:	099b      	lsrs	r3, r3, #6
 8002bfe:	4413      	add	r3, r2
 8002c00:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8002c02:	6939      	ldr	r1, [r7, #16]
 8002c04:	697a      	ldr	r2, [r7, #20]
 8002c06:	4b11      	ldr	r3, [pc, #68]	; (8002c4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8002c08:	fba3 0302 	umull	r0, r3, r3, r2
 8002c0c:	099b      	lsrs	r3, r3, #6
 8002c0e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c12:	fb00 f303 	mul.w	r3, r0, r3
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	4a0d      	ldr	r2, [pc, #52]	; (8002c50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8002c1a:	fb02 f303 	mul.w	r3, r2, r3
 8002c1e:	440b      	add	r3, r1
 8002c20:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8002c22:	f107 0308 	add.w	r3, r7, #8
 8002c26:	3304      	adds	r3, #4
 8002c28:	4619      	mov	r1, r3
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 f8a6 	bl	8002d7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	3304      	adds	r3, #4
 8002c34:	4618      	mov	r0, r3
 8002c36:	f7fe fba9 	bl	800138c <_ZN13STM32Hardware4timeEv>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8002c42:	bf00      	nop
 8002c44:	3718      	adds	r7, #24
 8002c46:	46bd      	mov	sp, r7
 8002c48:	bd80      	pop	{r7, pc}
 8002c4a:	bf00      	nop
 8002c4c:	10624dd3 	.word	0x10624dd3
 8002c50:	000f4240 	.word	0x000f4240

08002c54 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b088      	sub	sp, #32
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	2b63      	cmp	r3, #99	; 0x63
 8002c64:	dd09      	ble.n	8002c7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8002c6c:	f083 0301 	eor.w	r3, r3, #1
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d001      	beq.n	8002c7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8002c76:	2300      	movs	r3, #0
 8002c78:	e079      	b.n	8002d6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	68fa      	ldr	r2, [r7, #12]
 8002c82:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8002c86:	3207      	adds	r2, #7
 8002c88:	4611      	mov	r1, r2
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	4798      	blx	r3
 8002c8e:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	22ff      	movs	r2, #255	; 0xff
 8002c94:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	22fe      	movs	r2, #254	; 0xfe
 8002c9c:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	b2da      	uxtb	r2, r3
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	b29b      	uxth	r3, r3
 8002cae:	0a1b      	lsrs	r3, r3, #8
 8002cb0:	b29b      	uxth	r3, r3
 8002cb2:	b2da      	uxtb	r2, r3
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8002cc6:	4413      	add	r3, r2
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	43db      	mvns	r3, r3
 8002ccc:	b2da      	uxtb	r2, r3
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	b2da      	uxtb	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	b21b      	sxth	r3, r3
 8002ce2:	121b      	asrs	r3, r3, #8
 8002ce4:	b21b      	sxth	r3, r3
 8002ce6:	b2da      	uxtb	r2, r3
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8002cee:	2300      	movs	r3, #0
 8002cf0:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8002cf2:	2305      	movs	r3, #5
 8002cf4:	61bb      	str	r3, [r7, #24]
 8002cf6:	e00c      	b.n	8002d12 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xbe>
      chk += message_out[i];
 8002cf8:	68fa      	ldr	r2, [r7, #12]
 8002cfa:	69bb      	ldr	r3, [r7, #24]
 8002cfc:	4413      	add	r3, r2
 8002cfe:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	461a      	mov	r2, r3
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	4413      	add	r3, r2
 8002d0a:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	3301      	adds	r3, #1
 8002d10:	61bb      	str	r3, [r7, #24]
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	3306      	adds	r3, #6
 8002d16:	69ba      	ldr	r2, [r7, #24]
 8002d18:	429a      	cmp	r2, r3
 8002d1a:	dded      	ble.n	8002cf8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xa4>
    l += 7;
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	3307      	adds	r3, #7
 8002d20:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8002d22:	69fb      	ldr	r3, [r7, #28]
 8002d24:	425a      	negs	r2, r3
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	b2d2      	uxtb	r2, r2
 8002d2a:	bf58      	it	pl
 8002d2c:	4253      	negpl	r3, r2
 8002d2e:	b2da      	uxtb	r2, r3
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	1c59      	adds	r1, r3, #1
 8002d34:	6179      	str	r1, [r7, #20]
 8002d36:	43d2      	mvns	r2, r2
 8002d38:	b2d1      	uxtb	r1, r2
 8002d3a:	68fa      	ldr	r2, [r7, #12]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	460a      	mov	r2, r1
 8002d40:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8002d44:	697b      	ldr	r3, [r7, #20]
 8002d46:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002d4a:	dc0a      	bgt.n	8002d62 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10e>
    {
      hardware_.write(message_out, l);
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	1d18      	adds	r0, r3, #4
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8002d56:	697a      	ldr	r2, [r7, #20]
 8002d58:	4619      	mov	r1, r3
 8002d5a:	f7fe fad1 	bl	8001300 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8002d5e:	697b      	ldr	r3, [r7, #20]
 8002d60:	e005      	b.n	8002d6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x11a>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8002d62:	4905      	ldr	r1, [pc, #20]	; (8002d78 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x124>)
 8002d64:	68f8      	ldr	r0, [r7, #12]
 8002d66:	f000 f849 	bl	8002dfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8002d6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8002d6e:	4618      	mov	r0, r3
 8002d70:	3720      	adds	r7, #32
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bd80      	pop	{r7, pc}
 8002d76:	bf00      	nop
 8002d78:	08005bc4 	.word	0x08005bc4

08002d7c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	3304      	adds	r3, #4
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7fe fafe 	bl	800138c <_ZN13STM32Hardware4timeEv>
 8002d90:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	4915      	ldr	r1, [pc, #84]	; (8002df0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8002d9a:	fba1 1303 	umull	r1, r3, r1, r3
 8002d9e:	099b      	lsrs	r3, r3, #6
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	1e5a      	subs	r2, r3, #1
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	6859      	ldr	r1, [r3, #4]
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	4b0f      	ldr	r3, [pc, #60]	; (8002df0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8002db2:	fba3 0302 	umull	r0, r3, r3, r2
 8002db6:	099b      	lsrs	r3, r3, #6
 8002db8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002dbc:	fb00 f303 	mul.w	r3, r0, r3
 8002dc0:	1ad3      	subs	r3, r2, r3
 8002dc2:	4a0c      	ldr	r2, [pc, #48]	; (8002df4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 8002dc4:	fb02 f303 	mul.w	r3, r2, r3
 8002dc8:	1aca      	subs	r2, r1, r3
 8002dca:	4b0b      	ldr	r3, [pc, #44]	; (8002df8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 8002dcc:	4413      	add	r3, r2
 8002dce:	687a      	ldr	r2, [r7, #4]
 8002dd0:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8002de0:	4619      	mov	r1, r3
 8002de2:	4610      	mov	r0, r2
 8002de4:	f7fd f9ba 	bl	800015c <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8002de8:	bf00      	nop
 8002dea:	3710      	adds	r7, #16
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	10624dd3 	.word	0x10624dd3
 8002df4:	000f4240 	.word	0x000f4240
 8002df8:	3b9aca00 	.word	0x3b9aca00

08002dfc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
 8002e04:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	2103      	movs	r1, #3
 8002e0a:	6878      	ldr	r0, [r7, #4]
 8002e0c:	f000 f804 	bl	8002e18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8002e10:	bf00      	nop
 8002e12:	3708      	adds	r7, #8
 8002e14:	46bd      	mov	sp, r7
 8002e16:	bd80      	pop	{r7, pc}

08002e18 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	b088      	sub	sp, #32
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	60f8      	str	r0, [r7, #12]
 8002e20:	460b      	mov	r3, r1
 8002e22:	607a      	str	r2, [r7, #4]
 8002e24:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8002e26:	f107 0314 	add.w	r3, r7, #20
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	f7fd fdd2 	bl	80009d4 <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8002e30:	7afb      	ldrb	r3, [r7, #11]
 8002e32:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f107 0214 	add.w	r2, r7, #20
 8002e42:	2107      	movs	r1, #7
 8002e44:	68f8      	ldr	r0, [r7, #12]
 8002e46:	4798      	blx	r3
  }
 8002e48:	bf00      	nop
 8002e4a:	3720      	adds	r7, #32
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <_Z41__static_initialization_and_destruction_0ii>:
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
 8002e58:	6039      	str	r1, [r7, #0]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d131      	bne.n	8002ec4 <_Z41__static_initialization_and_destruction_0ii+0x74>
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d12c      	bne.n	8002ec4 <_Z41__static_initialization_and_destruction_0ii+0x74>
ros::NodeHandle nh;
 8002e6a:	4818      	ldr	r0, [pc, #96]	; (8002ecc <_Z41__static_initialization_and_destruction_0ii+0x7c>)
 8002e6c:	f7ff f952 	bl	8002114 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
std_msgs::String str_msg;
 8002e70:	4817      	ldr	r0, [pc, #92]	; (8002ed0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8002e72:	f7fe fa97 	bl	80013a4 <_ZN8std_msgs6StringC1Ev>
ros::Publisher chatter("chatter", &str_msg);
 8002e76:	2300      	movs	r3, #0
 8002e78:	4a15      	ldr	r2, [pc, #84]	; (8002ed0 <_Z41__static_initialization_and_destruction_0ii+0x80>)
 8002e7a:	4916      	ldr	r1, [pc, #88]	; (8002ed4 <_Z41__static_initialization_and_destruction_0ii+0x84>)
 8002e7c:	4816      	ldr	r0, [pc, #88]	; (8002ed8 <_Z41__static_initialization_and_destruction_0ii+0x88>)
 8002e7e:	f7fe f91d 	bl	80010bc <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
std_msgs::Int16 right_wheel_tick_count;
 8002e82:	4816      	ldr	r0, [pc, #88]	; (8002edc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8002e84:	f7fe fb26 	bl	80014d4 <_ZN8std_msgs5Int16C1Ev>
ros::Publisher rightPub("right_ticks", &right_wheel_tick_count);
 8002e88:	2300      	movs	r3, #0
 8002e8a:	4a14      	ldr	r2, [pc, #80]	; (8002edc <_Z41__static_initialization_and_destruction_0ii+0x8c>)
 8002e8c:	4914      	ldr	r1, [pc, #80]	; (8002ee0 <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8002e8e:	4815      	ldr	r0, [pc, #84]	; (8002ee4 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8002e90:	f7fe f914 	bl	80010bc <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
std_msgs::Int16 angleCount;
 8002e94:	4814      	ldr	r0, [pc, #80]	; (8002ee8 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8002e96:	f7fe fb1d 	bl	80014d4 <_ZN8std_msgs5Int16C1Ev>
std_msgs::Int16 left_wheel_tick_count;
 8002e9a:	4814      	ldr	r0, [pc, #80]	; (8002eec <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8002e9c:	f7fe fb1a 	bl	80014d4 <_ZN8std_msgs5Int16C1Ev>
ros::Publisher leftPub("left_ticks", &left_wheel_tick_count);
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	4a12      	ldr	r2, [pc, #72]	; (8002eec <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8002ea4:	4912      	ldr	r1, [pc, #72]	; (8002ef0 <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8002ea6:	4813      	ldr	r0, [pc, #76]	; (8002ef4 <_Z41__static_initialization_and_destruction_0ii+0xa4>)
 8002ea8:	f7fe f908 	bl	80010bc <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Publisher anglePub("angle_pub", &angleCount);
 8002eac:	2300      	movs	r3, #0
 8002eae:	4a0e      	ldr	r2, [pc, #56]	; (8002ee8 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8002eb0:	4911      	ldr	r1, [pc, #68]	; (8002ef8 <_Z41__static_initialization_and_destruction_0ii+0xa8>)
 8002eb2:	4812      	ldr	r0, [pc, #72]	; (8002efc <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8002eb4:	f7fe f902 	bl	80010bc <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
ros::Subscriber<geometry_msgs::Twist> sub("car/cmd_vel", steering);
 8002eb8:	2301      	movs	r3, #1
 8002eba:	4a11      	ldr	r2, [pc, #68]	; (8002f00 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8002ebc:	4911      	ldr	r1, [pc, #68]	; (8002f04 <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 8002ebe:	4812      	ldr	r0, [pc, #72]	; (8002f08 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8002ec0:	f7ff fb2a 	bl	8002518 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvEC1EPKcPFvRKS2_Ei>
}
 8002ec4:	bf00      	nop
 8002ec6:	3708      	adds	r7, #8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	bd80      	pop	{r7, pc}
 8002ecc:	20000168 	.word	0x20000168
 8002ed0:	20000aa4 	.word	0x20000aa4
 8002ed4:	08005c00 	.word	0x08005c00
 8002ed8:	20000aac 	.word	0x20000aac
 8002edc:	20000ac0 	.word	0x20000ac0
 8002ee0:	08005c08 	.word	0x08005c08
 8002ee4:	20000ac8 	.word	0x20000ac8
 8002ee8:	20000adc 	.word	0x20000adc
 8002eec:	20000ae4 	.word	0x20000ae4
 8002ef0:	08005c14 	.word	0x08005c14
 8002ef4:	20000aec 	.word	0x20000aec
 8002ef8:	08005c20 	.word	0x08005c20
 8002efc:	20000b00 	.word	0x20000b00
 8002f00:	08002205 	.word	0x08002205
 8002f04:	08005c2c 	.word	0x08005c2c
 8002f08:	20000b18 	.word	0x20000b18

08002f0c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE8callbackEPh>:

  virtual void callback(unsigned char* data) override
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b082      	sub	sp, #8
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	6078      	str	r0, [r7, #4]
 8002f14:	6039      	str	r1, [r7, #0]
  {
    msg.deserialize(data);
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	3310      	adds	r3, #16
 8002f1a:	6839      	ldr	r1, [r7, #0]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7ff f8ab 	bl	8002078 <_ZN13geometry_msgs5Twist11deserializeEPh>
    this->cb_(msg);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	3210      	adds	r2, #16
 8002f2a:	4610      	mov	r0, r2
 8002f2c:	4798      	blx	r3
  }
 8002f2e:	bf00      	nop
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}

08002f36 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE15getEndpointTypeEv>:
  }
  virtual const char * getMsgMD5() override
  {
    return this->msg.getMD5();
  }
  virtual int getEndpointType() override
 8002f36:	b480      	push	{r7}
 8002f38:	b083      	sub	sp, #12
 8002f3a:	af00      	add	r7, sp, #0
 8002f3c:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  }
 8002f42:	4618      	mov	r0, r3
 8002f44:	370c      	adds	r7, #12
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bc80      	pop	{r7}
 8002f4a:	4770      	bx	lr

08002f4c <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE10getMsgTypeEv>:
  virtual const char * getMsgType() override
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b082      	sub	sp, #8
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
    return this->msg.getType();
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	3310      	adds	r3, #16
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7ff f8b3 	bl	80020c4 <_ZN13geometry_msgs5Twist7getTypeEv>
 8002f5e:	4603      	mov	r3, r0
  }
 8002f60:	4618      	mov	r0, r3
 8002f62:	3708      	adds	r7, #8
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <_ZN3ros10SubscriberIN13geometry_msgs5TwistEvE9getMsgMD5Ev>:
  virtual const char * getMsgMD5() override
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b082      	sub	sp, #8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
    return this->msg.getMD5();
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	3310      	adds	r3, #16
 8002f74:	4618      	mov	r0, r3
 8002f76:	f7ff f8b1 	bl	80020dc <_ZN13geometry_msgs5Twist6getMD5Ev>
 8002f7a:	4603      	mov	r3, r0
  }
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3708      	adds	r7, #8
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}

08002f84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8002f84:	b480      	push	{r7}
 8002f86:	b083      	sub	sp, #12
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
    return configured_;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8002f92:	4618      	mov	r0, r3
 8002f94:	370c      	adds	r7, #12
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr

08002f9c <_GLOBAL__sub_I_nh>:
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	af00      	add	r7, sp, #0
 8002fa0:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8002fa4:	2001      	movs	r0, #1
 8002fa6:	f7ff ff53 	bl	8002e50 <_Z41__static_initialization_and_destruction_0ii>
 8002faa:	bd80      	pop	{r7, pc}

08002fac <_Z8NBT_initP5nbt_tm>:
#include "stm32f1xx_hal.h"
#include "nbt.h"

//NBT - Non Blocking Timer
void NBT_init(nbt_t * nbt, uint32_t interval)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
	nbt->timeout = interval;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	601a      	str	r2, [r3, #0]
	nbt->previousMillis = HAL_GetTick();
 8002fbc:	f000 fa10 	bl	80033e0 <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	605a      	str	r2, [r3, #4]
}
 8002fc6:	bf00      	nop
 8002fc8:	3708      	adds	r7, #8
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <_Z11NBT_handlerP5nbt_t>:

bool NBT_handler(nbt_t * nbt)
{
 8002fce:	b580      	push	{r7, lr}
 8002fd0:	b082      	sub	sp, #8
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
	if(HAL_GetTick()-nbt->previousMillis>nbt->timeout){
 8002fd6:	f000 fa03 	bl	80033e0 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	1ad2      	subs	r2, r2, r3
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	429a      	cmp	r2, r3
 8002fe8:	bf8c      	ite	hi
 8002fea:	2301      	movhi	r3, #1
 8002fec:	2300      	movls	r3, #0
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d006      	beq.n	8003002 <_Z11NBT_handlerP5nbt_t+0x34>
		nbt->previousMillis = HAL_GetTick();
 8002ff4:	f000 f9f4 	bl	80033e0 <HAL_GetTick>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	605a      	str	r2, [r3, #4]
		return true;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e000      	b.n	8003004 <_Z11NBT_handlerP5nbt_t+0x36>
	}

	return false;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	3708      	adds	r7, #8
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}

0800300c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800300c:	b480      	push	{r7}
 800300e:	b085      	sub	sp, #20
 8003010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8003012:	4b15      	ldr	r3, [pc, #84]	; (8003068 <HAL_MspInit+0x5c>)
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	4a14      	ldr	r2, [pc, #80]	; (8003068 <HAL_MspInit+0x5c>)
 8003018:	f043 0301 	orr.w	r3, r3, #1
 800301c:	6193      	str	r3, [r2, #24]
 800301e:	4b12      	ldr	r3, [pc, #72]	; (8003068 <HAL_MspInit+0x5c>)
 8003020:	699b      	ldr	r3, [r3, #24]
 8003022:	f003 0301 	and.w	r3, r3, #1
 8003026:	60bb      	str	r3, [r7, #8]
 8003028:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800302a:	4b0f      	ldr	r3, [pc, #60]	; (8003068 <HAL_MspInit+0x5c>)
 800302c:	69db      	ldr	r3, [r3, #28]
 800302e:	4a0e      	ldr	r2, [pc, #56]	; (8003068 <HAL_MspInit+0x5c>)
 8003030:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003034:	61d3      	str	r3, [r2, #28]
 8003036:	4b0c      	ldr	r3, [pc, #48]	; (8003068 <HAL_MspInit+0x5c>)
 8003038:	69db      	ldr	r3, [r3, #28]
 800303a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800303e:	607b      	str	r3, [r7, #4]
 8003040:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 8003042:	4b0a      	ldr	r3, [pc, #40]	; (800306c <HAL_MspInit+0x60>)
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	60fb      	str	r3, [r7, #12]
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003056:	60fb      	str	r3, [r7, #12]
 8003058:	4a04      	ldr	r2, [pc, #16]	; (800306c <HAL_MspInit+0x60>)
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800305e:	bf00      	nop
 8003060:	3714      	adds	r7, #20
 8003062:	46bd      	mov	sp, r7
 8003064:	bc80      	pop	{r7}
 8003066:	4770      	bx	lr
 8003068:	40021000 	.word	0x40021000
 800306c:	40010000 	.word	0x40010000

08003070 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b088      	sub	sp, #32
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003078:	f107 0310 	add.w	r3, r7, #16
 800307c:	2200      	movs	r2, #0
 800307e:	601a      	str	r2, [r3, #0]
 8003080:	605a      	str	r2, [r3, #4]
 8003082:	609a      	str	r2, [r3, #8]
 8003084:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	4a47      	ldr	r2, [pc, #284]	; (80031a8 <HAL_UART_MspInit+0x138>)
 800308c:	4293      	cmp	r3, r2
 800308e:	f040 8086 	bne.w	800319e <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003092:	4b46      	ldr	r3, [pc, #280]	; (80031ac <HAL_UART_MspInit+0x13c>)
 8003094:	69db      	ldr	r3, [r3, #28]
 8003096:	4a45      	ldr	r2, [pc, #276]	; (80031ac <HAL_UART_MspInit+0x13c>)
 8003098:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800309c:	61d3      	str	r3, [r2, #28]
 800309e:	4b43      	ldr	r3, [pc, #268]	; (80031ac <HAL_UART_MspInit+0x13c>)
 80030a0:	69db      	ldr	r3, [r3, #28]
 80030a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a6:	60fb      	str	r3, [r7, #12]
 80030a8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030aa:	4b40      	ldr	r3, [pc, #256]	; (80031ac <HAL_UART_MspInit+0x13c>)
 80030ac:	699b      	ldr	r3, [r3, #24]
 80030ae:	4a3f      	ldr	r2, [pc, #252]	; (80031ac <HAL_UART_MspInit+0x13c>)
 80030b0:	f043 0304 	orr.w	r3, r3, #4
 80030b4:	6193      	str	r3, [r2, #24]
 80030b6:	4b3d      	ldr	r3, [pc, #244]	; (80031ac <HAL_UART_MspInit+0x13c>)
 80030b8:	699b      	ldr	r3, [r3, #24]
 80030ba:	f003 0304 	and.w	r3, r3, #4
 80030be:	60bb      	str	r3, [r7, #8]
 80030c0:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80030c2:	2304      	movs	r3, #4
 80030c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030c6:	2302      	movs	r3, #2
 80030c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80030ca:	2303      	movs	r3, #3
 80030cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030ce:	f107 0310 	add.w	r3, r7, #16
 80030d2:	4619      	mov	r1, r3
 80030d4:	4836      	ldr	r0, [pc, #216]	; (80031b0 <HAL_UART_MspInit+0x140>)
 80030d6:	f000 fd3d 	bl	8003b54 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80030da:	2308      	movs	r3, #8
 80030dc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80030de:	2300      	movs	r3, #0
 80030e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030e2:	2300      	movs	r3, #0
 80030e4:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80030e6:	f107 0310 	add.w	r3, r7, #16
 80030ea:	4619      	mov	r1, r3
 80030ec:	4830      	ldr	r0, [pc, #192]	; (80031b0 <HAL_UART_MspInit+0x140>)
 80030ee:	f000 fd31 	bl	8003b54 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80030f2:	4b30      	ldr	r3, [pc, #192]	; (80031b4 <HAL_UART_MspInit+0x144>)
 80030f4:	4a30      	ldr	r2, [pc, #192]	; (80031b8 <HAL_UART_MspInit+0x148>)
 80030f6:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030f8:	4b2e      	ldr	r3, [pc, #184]	; (80031b4 <HAL_UART_MspInit+0x144>)
 80030fa:	2200      	movs	r2, #0
 80030fc:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030fe:	4b2d      	ldr	r3, [pc, #180]	; (80031b4 <HAL_UART_MspInit+0x144>)
 8003100:	2200      	movs	r2, #0
 8003102:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003104:	4b2b      	ldr	r3, [pc, #172]	; (80031b4 <HAL_UART_MspInit+0x144>)
 8003106:	2280      	movs	r2, #128	; 0x80
 8003108:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800310a:	4b2a      	ldr	r3, [pc, #168]	; (80031b4 <HAL_UART_MspInit+0x144>)
 800310c:	2200      	movs	r2, #0
 800310e:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003110:	4b28      	ldr	r3, [pc, #160]	; (80031b4 <HAL_UART_MspInit+0x144>)
 8003112:	2200      	movs	r2, #0
 8003114:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003116:	4b27      	ldr	r3, [pc, #156]	; (80031b4 <HAL_UART_MspInit+0x144>)
 8003118:	2220      	movs	r2, #32
 800311a:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 800311c:	4b25      	ldr	r3, [pc, #148]	; (80031b4 <HAL_UART_MspInit+0x144>)
 800311e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003122:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003124:	4823      	ldr	r0, [pc, #140]	; (80031b4 <HAL_UART_MspInit+0x144>)
 8003126:	f000 fa73 	bl	8003610 <HAL_DMA_Init>
 800312a:	4603      	mov	r3, r0
 800312c:	2b00      	cmp	r3, #0
 800312e:	d001      	beq.n	8003134 <HAL_UART_MspInit+0xc4>
    {
      Error_Handler();
 8003130:	f7fd f981 	bl	8000436 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a1f      	ldr	r2, [pc, #124]	; (80031b4 <HAL_UART_MspInit+0x144>)
 8003138:	63da      	str	r2, [r3, #60]	; 0x3c
 800313a:	4a1e      	ldr	r2, [pc, #120]	; (80031b4 <HAL_UART_MspInit+0x144>)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8003140:	4b1e      	ldr	r3, [pc, #120]	; (80031bc <HAL_UART_MspInit+0x14c>)
 8003142:	4a1f      	ldr	r2, [pc, #124]	; (80031c0 <HAL_UART_MspInit+0x150>)
 8003144:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003146:	4b1d      	ldr	r3, [pc, #116]	; (80031bc <HAL_UART_MspInit+0x14c>)
 8003148:	2210      	movs	r2, #16
 800314a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800314c:	4b1b      	ldr	r3, [pc, #108]	; (80031bc <HAL_UART_MspInit+0x14c>)
 800314e:	2200      	movs	r2, #0
 8003150:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003152:	4b1a      	ldr	r3, [pc, #104]	; (80031bc <HAL_UART_MspInit+0x14c>)
 8003154:	2280      	movs	r2, #128	; 0x80
 8003156:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003158:	4b18      	ldr	r3, [pc, #96]	; (80031bc <HAL_UART_MspInit+0x14c>)
 800315a:	2200      	movs	r2, #0
 800315c:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800315e:	4b17      	ldr	r3, [pc, #92]	; (80031bc <HAL_UART_MspInit+0x14c>)
 8003160:	2200      	movs	r2, #0
 8003162:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8003164:	4b15      	ldr	r3, [pc, #84]	; (80031bc <HAL_UART_MspInit+0x14c>)
 8003166:	2200      	movs	r2, #0
 8003168:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_HIGH;
 800316a:	4b14      	ldr	r3, [pc, #80]	; (80031bc <HAL_UART_MspInit+0x14c>)
 800316c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003170:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003172:	4812      	ldr	r0, [pc, #72]	; (80031bc <HAL_UART_MspInit+0x14c>)
 8003174:	f000 fa4c 	bl	8003610 <HAL_DMA_Init>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d001      	beq.n	8003182 <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 800317e:	f7fd f95a 	bl	8000436 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	4a0d      	ldr	r2, [pc, #52]	; (80031bc <HAL_UART_MspInit+0x14c>)
 8003186:	639a      	str	r2, [r3, #56]	; 0x38
 8003188:	4a0c      	ldr	r2, [pc, #48]	; (80031bc <HAL_UART_MspInit+0x14c>)
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6253      	str	r3, [r2, #36]	; 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800318e:	2200      	movs	r2, #0
 8003190:	2100      	movs	r1, #0
 8003192:	2026      	movs	r0, #38	; 0x26
 8003194:	f000 fa05 	bl	80035a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003198:	2026      	movs	r0, #38	; 0x26
 800319a:	f000 fa1e 	bl	80035da <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800319e:	bf00      	nop
 80031a0:	3720      	adds	r7, #32
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
 80031a6:	bf00      	nop
 80031a8:	40004400 	.word	0x40004400
 80031ac:	40021000 	.word	0x40021000
 80031b0:	40010800 	.word	0x40010800
 80031b4:	200000d4 	.word	0x200000d4
 80031b8:	4002006c 	.word	0x4002006c
 80031bc:	20000118 	.word	0x20000118
 80031c0:	40020080 	.word	0x40020080

080031c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80031c4:	b480      	push	{r7}
 80031c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80031c8:	e7fe      	b.n	80031c8 <NMI_Handler+0x4>

080031ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80031ca:	b480      	push	{r7}
 80031cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80031ce:	e7fe      	b.n	80031ce <HardFault_Handler+0x4>

080031d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80031d4:	e7fe      	b.n	80031d4 <MemManage_Handler+0x4>

080031d6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80031d6:	b480      	push	{r7}
 80031d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031da:	e7fe      	b.n	80031da <BusFault_Handler+0x4>

080031dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031dc:	b480      	push	{r7}
 80031de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031e0:	e7fe      	b.n	80031e0 <UsageFault_Handler+0x4>

080031e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031e2:	b480      	push	{r7}
 80031e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031e6:	bf00      	nop
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bc80      	pop	{r7}
 80031ec:	4770      	bx	lr

080031ee <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031ee:	b480      	push	{r7}
 80031f0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031f2:	bf00      	nop
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bc80      	pop	{r7}
 80031f8:	4770      	bx	lr

080031fa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031fa:	b480      	push	{r7}
 80031fc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031fe:	bf00      	nop
 8003200:	46bd      	mov	sp, r7
 8003202:	bc80      	pop	{r7}
 8003204:	4770      	bx	lr

08003206 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003206:	b580      	push	{r7, lr}
 8003208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800320a:	f000 f8d7 	bl	80033bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800320e:	bf00      	nop
 8003210:	bd80      	pop	{r7, pc}

08003212 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8003212:	b580      	push	{r7, lr}
 8003214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_IN_LEFT_A_Pin);
 8003216:	2001      	movs	r0, #1
 8003218:	f000 fe60 	bl	8003edc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800321c:	bf00      	nop
 800321e:	bd80      	pop	{r7, pc}

08003220 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ENC_IN_RIGHT_A_Pin);
 8003224:	2002      	movs	r0, #2
 8003226:	f000 fe59 	bl	8003edc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800322a:	bf00      	nop
 800322c:	bd80      	pop	{r7, pc}
	...

08003230 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003234:	4802      	ldr	r0, [pc, #8]	; (8003240 <DMA1_Channel6_IRQHandler+0x10>)
 8003236:	f000 fb59 	bl	80038ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800323a:	bf00      	nop
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	200000d4 	.word	0x200000d4

08003244 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8003244:	b580      	push	{r7, lr}
 8003246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003248:	4802      	ldr	r0, [pc, #8]	; (8003254 <DMA1_Channel7_IRQHandler+0x10>)
 800324a:	f000 fb4f 	bl	80038ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800324e:	bf00      	nop
 8003250:	bd80      	pop	{r7, pc}
 8003252:	bf00      	nop
 8003254:	20000118 	.word	0x20000118

08003258 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800325c:	4802      	ldr	r0, [pc, #8]	; (8003268 <USART2_IRQHandler+0x10>)
 800325e:	f001 fb4b 	bl	80048f8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003262:	bf00      	nop
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	2000008c 	.word	0x2000008c

0800326c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003274:	4a14      	ldr	r2, [pc, #80]	; (80032c8 <_sbrk+0x5c>)
 8003276:	4b15      	ldr	r3, [pc, #84]	; (80032cc <_sbrk+0x60>)
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800327c:	697b      	ldr	r3, [r7, #20]
 800327e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003280:	4b13      	ldr	r3, [pc, #76]	; (80032d0 <_sbrk+0x64>)
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	2b00      	cmp	r3, #0
 8003286:	d102      	bne.n	800328e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003288:	4b11      	ldr	r3, [pc, #68]	; (80032d0 <_sbrk+0x64>)
 800328a:	4a12      	ldr	r2, [pc, #72]	; (80032d4 <_sbrk+0x68>)
 800328c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800328e:	4b10      	ldr	r3, [pc, #64]	; (80032d0 <_sbrk+0x64>)
 8003290:	681a      	ldr	r2, [r3, #0]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	4413      	add	r3, r2
 8003296:	693a      	ldr	r2, [r7, #16]
 8003298:	429a      	cmp	r2, r3
 800329a:	d207      	bcs.n	80032ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800329c:	f002 fa68 	bl	8005770 <__errno>
 80032a0:	4603      	mov	r3, r0
 80032a2:	220c      	movs	r2, #12
 80032a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80032a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80032aa:	e009      	b.n	80032c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032ac:	4b08      	ldr	r3, [pc, #32]	; (80032d0 <_sbrk+0x64>)
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80032b2:	4b07      	ldr	r3, [pc, #28]	; (80032d0 <_sbrk+0x64>)
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4413      	add	r3, r2
 80032ba:	4a05      	ldr	r2, [pc, #20]	; (80032d0 <_sbrk+0x64>)
 80032bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80032be:	68fb      	ldr	r3, [r7, #12]
}
 80032c0:	4618      	mov	r0, r3
 80032c2:	3718      	adds	r7, #24
 80032c4:	46bd      	mov	sp, r7
 80032c6:	bd80      	pop	{r7, pc}
 80032c8:	20002800 	.word	0x20002800
 80032cc:	00000400 	.word	0x00000400
 80032d0:	20000b78 	.word	0x20000b78
 80032d4:	20000cc8 	.word	0x20000cc8

080032d8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80032d8:	b480      	push	{r7}
 80032da:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80032dc:	bf00      	nop
 80032de:	46bd      	mov	sp, r7
 80032e0:	bc80      	pop	{r7}
 80032e2:	4770      	bx	lr

080032e4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80032e4:	f7ff fff8 	bl	80032d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80032e8:	480b      	ldr	r0, [pc, #44]	; (8003318 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80032ea:	490c      	ldr	r1, [pc, #48]	; (800331c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80032ec:	4a0c      	ldr	r2, [pc, #48]	; (8003320 <LoopFillZerobss+0x16>)
  movs r3, #0
 80032ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80032f0:	e002      	b.n	80032f8 <LoopCopyDataInit>

080032f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80032f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80032f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80032f6:	3304      	adds	r3, #4

080032f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80032f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80032fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80032fc:	d3f9      	bcc.n	80032f2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80032fe:	4a09      	ldr	r2, [pc, #36]	; (8003324 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8003300:	4c09      	ldr	r4, [pc, #36]	; (8003328 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003302:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003304:	e001      	b.n	800330a <LoopFillZerobss>

08003306 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003306:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003308:	3204      	adds	r2, #4

0800330a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800330a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800330c:	d3fb      	bcc.n	8003306 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800330e:	f002 fa35 	bl	800577c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8003312:	f7fc ff4f 	bl	80001b4 <main>
  bx lr
 8003316:	4770      	bx	lr
  ldr r0, =_sdata
 8003318:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800331c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8003320:	08005dbc 	.word	0x08005dbc
  ldr r2, =_sbss
 8003324:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8003328:	20000cc8 	.word	0x20000cc8

0800332c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800332c:	e7fe      	b.n	800332c <ADC1_2_IRQHandler>
	...

08003330 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003334:	4b08      	ldr	r3, [pc, #32]	; (8003358 <HAL_Init+0x28>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a07      	ldr	r2, [pc, #28]	; (8003358 <HAL_Init+0x28>)
 800333a:	f043 0310 	orr.w	r3, r3, #16
 800333e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003340:	2003      	movs	r0, #3
 8003342:	f000 f923 	bl	800358c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003346:	200f      	movs	r0, #15
 8003348:	f000 f808 	bl	800335c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800334c:	f7ff fe5e 	bl	800300c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003350:	2300      	movs	r3, #0
}
 8003352:	4618      	mov	r0, r3
 8003354:	bd80      	pop	{r7, pc}
 8003356:	bf00      	nop
 8003358:	40022000 	.word	0x40022000

0800335c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b082      	sub	sp, #8
 8003360:	af00      	add	r7, sp, #0
 8003362:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003364:	4b12      	ldr	r3, [pc, #72]	; (80033b0 <HAL_InitTick+0x54>)
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	4b12      	ldr	r3, [pc, #72]	; (80033b4 <HAL_InitTick+0x58>)
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	4619      	mov	r1, r3
 800336e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003372:	fbb3 f3f1 	udiv	r3, r3, r1
 8003376:	fbb2 f3f3 	udiv	r3, r2, r3
 800337a:	4618      	mov	r0, r3
 800337c:	f000 f93b 	bl	80035f6 <HAL_SYSTICK_Config>
 8003380:	4603      	mov	r3, r0
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	e00e      	b.n	80033a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	2b0f      	cmp	r3, #15
 800338e:	d80a      	bhi.n	80033a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003390:	2200      	movs	r2, #0
 8003392:	6879      	ldr	r1, [r7, #4]
 8003394:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003398:	f000 f903 	bl	80035a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800339c:	4a06      	ldr	r2, [pc, #24]	; (80033b8 <HAL_InitTick+0x5c>)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80033a2:	2300      	movs	r3, #0
 80033a4:	e000      	b.n	80033a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
}
 80033a8:	4618      	mov	r0, r3
 80033aa:	3708      	adds	r7, #8
 80033ac:	46bd      	mov	sp, r7
 80033ae:	bd80      	pop	{r7, pc}
 80033b0:	20000014 	.word	0x20000014
 80033b4:	2000001c 	.word	0x2000001c
 80033b8:	20000018 	.word	0x20000018

080033bc <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80033c0:	4b05      	ldr	r3, [pc, #20]	; (80033d8 <HAL_IncTick+0x1c>)
 80033c2:	781b      	ldrb	r3, [r3, #0]
 80033c4:	461a      	mov	r2, r3
 80033c6:	4b05      	ldr	r3, [pc, #20]	; (80033dc <HAL_IncTick+0x20>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4413      	add	r3, r2
 80033cc:	4a03      	ldr	r2, [pc, #12]	; (80033dc <HAL_IncTick+0x20>)
 80033ce:	6013      	str	r3, [r2, #0]
}
 80033d0:	bf00      	nop
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bc80      	pop	{r7}
 80033d6:	4770      	bx	lr
 80033d8:	2000001c 	.word	0x2000001c
 80033dc:	20000b7c 	.word	0x20000b7c

080033e0 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80033e0:	b480      	push	{r7}
 80033e2:	af00      	add	r7, sp, #0
  return uwTick;
 80033e4:	4b02      	ldr	r3, [pc, #8]	; (80033f0 <HAL_GetTick+0x10>)
 80033e6:	681b      	ldr	r3, [r3, #0]
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bc80      	pop	{r7}
 80033ee:	4770      	bx	lr
 80033f0:	20000b7c 	.word	0x20000b7c

080033f4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f003 0307 	and.w	r3, r3, #7
 8003402:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003404:	4b0c      	ldr	r3, [pc, #48]	; (8003438 <__NVIC_SetPriorityGrouping+0x44>)
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800340a:	68ba      	ldr	r2, [r7, #8]
 800340c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003410:	4013      	ands	r3, r2
 8003412:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800341c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003424:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003426:	4a04      	ldr	r2, [pc, #16]	; (8003438 <__NVIC_SetPriorityGrouping+0x44>)
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	60d3      	str	r3, [r2, #12]
}
 800342c:	bf00      	nop
 800342e:	3714      	adds	r7, #20
 8003430:	46bd      	mov	sp, r7
 8003432:	bc80      	pop	{r7}
 8003434:	4770      	bx	lr
 8003436:	bf00      	nop
 8003438:	e000ed00 	.word	0xe000ed00

0800343c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003440:	4b04      	ldr	r3, [pc, #16]	; (8003454 <__NVIC_GetPriorityGrouping+0x18>)
 8003442:	68db      	ldr	r3, [r3, #12]
 8003444:	0a1b      	lsrs	r3, r3, #8
 8003446:	f003 0307 	and.w	r3, r3, #7
}
 800344a:	4618      	mov	r0, r3
 800344c:	46bd      	mov	sp, r7
 800344e:	bc80      	pop	{r7}
 8003450:	4770      	bx	lr
 8003452:	bf00      	nop
 8003454:	e000ed00 	.word	0xe000ed00

08003458 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003458:	b480      	push	{r7}
 800345a:	b083      	sub	sp, #12
 800345c:	af00      	add	r7, sp, #0
 800345e:	4603      	mov	r3, r0
 8003460:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003466:	2b00      	cmp	r3, #0
 8003468:	db0b      	blt.n	8003482 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800346a:	79fb      	ldrb	r3, [r7, #7]
 800346c:	f003 021f 	and.w	r2, r3, #31
 8003470:	4906      	ldr	r1, [pc, #24]	; (800348c <__NVIC_EnableIRQ+0x34>)
 8003472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003476:	095b      	lsrs	r3, r3, #5
 8003478:	2001      	movs	r0, #1
 800347a:	fa00 f202 	lsl.w	r2, r0, r2
 800347e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003482:	bf00      	nop
 8003484:	370c      	adds	r7, #12
 8003486:	46bd      	mov	sp, r7
 8003488:	bc80      	pop	{r7}
 800348a:	4770      	bx	lr
 800348c:	e000e100 	.word	0xe000e100

08003490 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	4603      	mov	r3, r0
 8003498:	6039      	str	r1, [r7, #0]
 800349a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800349c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	db0a      	blt.n	80034ba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	b2da      	uxtb	r2, r3
 80034a8:	490c      	ldr	r1, [pc, #48]	; (80034dc <__NVIC_SetPriority+0x4c>)
 80034aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034ae:	0112      	lsls	r2, r2, #4
 80034b0:	b2d2      	uxtb	r2, r2
 80034b2:	440b      	add	r3, r1
 80034b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80034b8:	e00a      	b.n	80034d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	b2da      	uxtb	r2, r3
 80034be:	4908      	ldr	r1, [pc, #32]	; (80034e0 <__NVIC_SetPriority+0x50>)
 80034c0:	79fb      	ldrb	r3, [r7, #7]
 80034c2:	f003 030f 	and.w	r3, r3, #15
 80034c6:	3b04      	subs	r3, #4
 80034c8:	0112      	lsls	r2, r2, #4
 80034ca:	b2d2      	uxtb	r2, r2
 80034cc:	440b      	add	r3, r1
 80034ce:	761a      	strb	r2, [r3, #24]
}
 80034d0:	bf00      	nop
 80034d2:	370c      	adds	r7, #12
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bc80      	pop	{r7}
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	e000e100 	.word	0xe000e100
 80034e0:	e000ed00 	.word	0xe000ed00

080034e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b089      	sub	sp, #36	; 0x24
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f003 0307 	and.w	r3, r3, #7
 80034f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80034f8:	69fb      	ldr	r3, [r7, #28]
 80034fa:	f1c3 0307 	rsb	r3, r3, #7
 80034fe:	2b04      	cmp	r3, #4
 8003500:	bf28      	it	cs
 8003502:	2304      	movcs	r3, #4
 8003504:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003506:	69fb      	ldr	r3, [r7, #28]
 8003508:	3304      	adds	r3, #4
 800350a:	2b06      	cmp	r3, #6
 800350c:	d902      	bls.n	8003514 <NVIC_EncodePriority+0x30>
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	3b03      	subs	r3, #3
 8003512:	e000      	b.n	8003516 <NVIC_EncodePriority+0x32>
 8003514:	2300      	movs	r3, #0
 8003516:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003518:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800351c:	69bb      	ldr	r3, [r7, #24]
 800351e:	fa02 f303 	lsl.w	r3, r2, r3
 8003522:	43da      	mvns	r2, r3
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	401a      	ands	r2, r3
 8003528:	697b      	ldr	r3, [r7, #20]
 800352a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800352c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	fa01 f303 	lsl.w	r3, r1, r3
 8003536:	43d9      	mvns	r1, r3
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800353c:	4313      	orrs	r3, r2
         );
}
 800353e:	4618      	mov	r0, r3
 8003540:	3724      	adds	r7, #36	; 0x24
 8003542:	46bd      	mov	sp, r7
 8003544:	bc80      	pop	{r7}
 8003546:	4770      	bx	lr

08003548 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b082      	sub	sp, #8
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	3b01      	subs	r3, #1
 8003554:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003558:	d301      	bcc.n	800355e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800355a:	2301      	movs	r3, #1
 800355c:	e00f      	b.n	800357e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800355e:	4a0a      	ldr	r2, [pc, #40]	; (8003588 <SysTick_Config+0x40>)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	3b01      	subs	r3, #1
 8003564:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003566:	210f      	movs	r1, #15
 8003568:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800356c:	f7ff ff90 	bl	8003490 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003570:	4b05      	ldr	r3, [pc, #20]	; (8003588 <SysTick_Config+0x40>)
 8003572:	2200      	movs	r2, #0
 8003574:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003576:	4b04      	ldr	r3, [pc, #16]	; (8003588 <SysTick_Config+0x40>)
 8003578:	2207      	movs	r2, #7
 800357a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800357c:	2300      	movs	r3, #0
}
 800357e:	4618      	mov	r0, r3
 8003580:	3708      	adds	r7, #8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}
 8003586:	bf00      	nop
 8003588:	e000e010 	.word	0xe000e010

0800358c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800358c:	b580      	push	{r7, lr}
 800358e:	b082      	sub	sp, #8
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003594:	6878      	ldr	r0, [r7, #4]
 8003596:	f7ff ff2d 	bl	80033f4 <__NVIC_SetPriorityGrouping>
}
 800359a:	bf00      	nop
 800359c:	3708      	adds	r7, #8
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}

080035a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80035a2:	b580      	push	{r7, lr}
 80035a4:	b086      	sub	sp, #24
 80035a6:	af00      	add	r7, sp, #0
 80035a8:	4603      	mov	r3, r0
 80035aa:	60b9      	str	r1, [r7, #8]
 80035ac:	607a      	str	r2, [r7, #4]
 80035ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80035b0:	2300      	movs	r3, #0
 80035b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80035b4:	f7ff ff42 	bl	800343c <__NVIC_GetPriorityGrouping>
 80035b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80035ba:	687a      	ldr	r2, [r7, #4]
 80035bc:	68b9      	ldr	r1, [r7, #8]
 80035be:	6978      	ldr	r0, [r7, #20]
 80035c0:	f7ff ff90 	bl	80034e4 <NVIC_EncodePriority>
 80035c4:	4602      	mov	r2, r0
 80035c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80035ca:	4611      	mov	r1, r2
 80035cc:	4618      	mov	r0, r3
 80035ce:	f7ff ff5f 	bl	8003490 <__NVIC_SetPriority>
}
 80035d2:	bf00      	nop
 80035d4:	3718      	adds	r7, #24
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80035da:	b580      	push	{r7, lr}
 80035dc:	b082      	sub	sp, #8
 80035de:	af00      	add	r7, sp, #0
 80035e0:	4603      	mov	r3, r0
 80035e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80035e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e8:	4618      	mov	r0, r3
 80035ea:	f7ff ff35 	bl	8003458 <__NVIC_EnableIRQ>
}
 80035ee:	bf00      	nop
 80035f0:	3708      	adds	r7, #8
 80035f2:	46bd      	mov	sp, r7
 80035f4:	bd80      	pop	{r7, pc}

080035f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80035f6:	b580      	push	{r7, lr}
 80035f8:	b082      	sub	sp, #8
 80035fa:	af00      	add	r7, sp, #0
 80035fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80035fe:	6878      	ldr	r0, [r7, #4]
 8003600:	f7ff ffa2 	bl	8003548 <SysTick_Config>
 8003604:	4603      	mov	r3, r0
}
 8003606:	4618      	mov	r0, r3
 8003608:	3708      	adds	r7, #8
 800360a:	46bd      	mov	sp, r7
 800360c:	bd80      	pop	{r7, pc}
	...

08003610 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003618:	2300      	movs	r3, #0
 800361a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d101      	bne.n	8003626 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003622:	2301      	movs	r3, #1
 8003624:	e043      	b.n	80036ae <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	461a      	mov	r2, r3
 800362c:	4b22      	ldr	r3, [pc, #136]	; (80036b8 <HAL_DMA_Init+0xa8>)
 800362e:	4413      	add	r3, r2
 8003630:	4a22      	ldr	r2, [pc, #136]	; (80036bc <HAL_DMA_Init+0xac>)
 8003632:	fba2 2303 	umull	r2, r3, r2, r3
 8003636:	091b      	lsrs	r3, r3, #4
 8003638:	009a      	lsls	r2, r3, #2
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a1f      	ldr	r2, [pc, #124]	; (80036c0 <HAL_DMA_Init+0xb0>)
 8003642:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2202      	movs	r2, #2
 8003648:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800365a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 800365e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003668:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	68db      	ldr	r3, [r3, #12]
 800366e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003674:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	695b      	ldr	r3, [r3, #20]
 800367a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003680:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	69db      	ldr	r3, [r3, #28]
 8003686:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003688:	68fa      	ldr	r2, [r7, #12]
 800368a:	4313      	orrs	r3, r2
 800368c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	2200      	movs	r2, #0
 800369a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2200      	movs	r2, #0
 80036a8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80036ac:	2300      	movs	r3, #0
}
 80036ae:	4618      	mov	r0, r3
 80036b0:	3714      	adds	r7, #20
 80036b2:	46bd      	mov	sp, r7
 80036b4:	bc80      	pop	{r7}
 80036b6:	4770      	bx	lr
 80036b8:	bffdfff8 	.word	0xbffdfff8
 80036bc:	cccccccd 	.word	0xcccccccd
 80036c0:	40020000 	.word	0x40020000

080036c4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b086      	sub	sp, #24
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	60f8      	str	r0, [r7, #12]
 80036cc:	60b9      	str	r1, [r7, #8]
 80036ce:	607a      	str	r2, [r7, #4]
 80036d0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036d2:	2300      	movs	r3, #0
 80036d4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80036dc:	2b01      	cmp	r3, #1
 80036de:	d101      	bne.n	80036e4 <HAL_DMA_Start_IT+0x20>
 80036e0:	2302      	movs	r3, #2
 80036e2:	e04b      	b.n	800377c <HAL_DMA_Start_IT+0xb8>
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2201      	movs	r2, #1
 80036e8:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	d13a      	bne.n	800376e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	2202      	movs	r2, #2
 80036fc:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2200      	movs	r2, #0
 8003704:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	68fb      	ldr	r3, [r7, #12]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 0201 	bic.w	r2, r2, #1
 8003714:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	687a      	ldr	r2, [r7, #4]
 800371a:	68b9      	ldr	r1, [r7, #8]
 800371c:	68f8      	ldr	r0, [r7, #12]
 800371e:	f000 f9eb 	bl	8003af8 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003726:	2b00      	cmp	r3, #0
 8003728:	d008      	beq.n	800373c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	68fb      	ldr	r3, [r7, #12]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f042 020e 	orr.w	r2, r2, #14
 8003738:	601a      	str	r2, [r3, #0]
 800373a:	e00f      	b.n	800375c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f022 0204 	bic.w	r2, r2, #4
 800374a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	681a      	ldr	r2, [r3, #0]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f042 020a 	orr.w	r2, r2, #10
 800375a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681a      	ldr	r2, [r3, #0]
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f042 0201 	orr.w	r2, r2, #1
 800376a:	601a      	str	r2, [r3, #0]
 800376c:	e005      	b.n	800377a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2200      	movs	r2, #0
 8003772:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003776:	2302      	movs	r3, #2
 8003778:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 800377a:	7dfb      	ldrb	r3, [r7, #23]
}
 800377c:	4618      	mov	r0, r3
 800377e:	3718      	adds	r7, #24
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003784:	b480      	push	{r7}
 8003786:	b085      	sub	sp, #20
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800378c:	2300      	movs	r3, #0
 800378e:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003796:	b2db      	uxtb	r3, r3
 8003798:	2b02      	cmp	r3, #2
 800379a:	d008      	beq.n	80037ae <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2204      	movs	r2, #4
 80037a0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80037aa:	2301      	movs	r3, #1
 80037ac:	e020      	b.n	80037f0 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f022 020e 	bic.w	r2, r2, #14
 80037bc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f022 0201 	bic.w	r2, r2, #1
 80037cc:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80037d6:	2101      	movs	r1, #1
 80037d8:	fa01 f202 	lsl.w	r2, r1, r2
 80037dc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2201      	movs	r2, #1
 80037e2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 80037ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	3714      	adds	r7, #20
 80037f4:	46bd      	mov	sp, r7
 80037f6:	bc80      	pop	{r7}
 80037f8:	4770      	bx	lr
	...

080037fc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80037fc:	b580      	push	{r7, lr}
 80037fe:	b084      	sub	sp, #16
 8003800:	af00      	add	r7, sp, #0
 8003802:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003804:	2300      	movs	r3, #0
 8003806:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800380e:	b2db      	uxtb	r3, r3
 8003810:	2b02      	cmp	r3, #2
 8003812:	d005      	beq.n	8003820 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2204      	movs	r2, #4
 8003818:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	73fb      	strb	r3, [r7, #15]
 800381e:	e051      	b.n	80038c4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681a      	ldr	r2, [r3, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f022 020e 	bic.w	r2, r2, #14
 800382e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681a      	ldr	r2, [r3, #0]
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f022 0201 	bic.w	r2, r2, #1
 800383e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a22      	ldr	r2, [pc, #136]	; (80038d0 <HAL_DMA_Abort_IT+0xd4>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d029      	beq.n	800389e <HAL_DMA_Abort_IT+0xa2>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a21      	ldr	r2, [pc, #132]	; (80038d4 <HAL_DMA_Abort_IT+0xd8>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d022      	beq.n	800389a <HAL_DMA_Abort_IT+0x9e>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a1f      	ldr	r2, [pc, #124]	; (80038d8 <HAL_DMA_Abort_IT+0xdc>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d01a      	beq.n	8003894 <HAL_DMA_Abort_IT+0x98>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4a1e      	ldr	r2, [pc, #120]	; (80038dc <HAL_DMA_Abort_IT+0xe0>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d012      	beq.n	800388e <HAL_DMA_Abort_IT+0x92>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	4a1c      	ldr	r2, [pc, #112]	; (80038e0 <HAL_DMA_Abort_IT+0xe4>)
 800386e:	4293      	cmp	r3, r2
 8003870:	d00a      	beq.n	8003888 <HAL_DMA_Abort_IT+0x8c>
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a1b      	ldr	r2, [pc, #108]	; (80038e4 <HAL_DMA_Abort_IT+0xe8>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d102      	bne.n	8003882 <HAL_DMA_Abort_IT+0x86>
 800387c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003880:	e00e      	b.n	80038a0 <HAL_DMA_Abort_IT+0xa4>
 8003882:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003886:	e00b      	b.n	80038a0 <HAL_DMA_Abort_IT+0xa4>
 8003888:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800388c:	e008      	b.n	80038a0 <HAL_DMA_Abort_IT+0xa4>
 800388e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003892:	e005      	b.n	80038a0 <HAL_DMA_Abort_IT+0xa4>
 8003894:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003898:	e002      	b.n	80038a0 <HAL_DMA_Abort_IT+0xa4>
 800389a:	2310      	movs	r3, #16
 800389c:	e000      	b.n	80038a0 <HAL_DMA_Abort_IT+0xa4>
 800389e:	2301      	movs	r3, #1
 80038a0:	4a11      	ldr	r2, [pc, #68]	; (80038e8 <HAL_DMA_Abort_IT+0xec>)
 80038a2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2201      	movs	r2, #1
 80038a8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d003      	beq.n	80038c4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80038c0:	6878      	ldr	r0, [r7, #4]
 80038c2:	4798      	blx	r3
    } 
  }
  return status;
 80038c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038c6:	4618      	mov	r0, r3
 80038c8:	3710      	adds	r7, #16
 80038ca:	46bd      	mov	sp, r7
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	bf00      	nop
 80038d0:	40020008 	.word	0x40020008
 80038d4:	4002001c 	.word	0x4002001c
 80038d8:	40020030 	.word	0x40020030
 80038dc:	40020044 	.word	0x40020044
 80038e0:	40020058 	.word	0x40020058
 80038e4:	4002006c 	.word	0x4002006c
 80038e8:	40020000 	.word	0x40020000

080038ec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b084      	sub	sp, #16
 80038f0:	af00      	add	r7, sp, #0
 80038f2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003908:	2204      	movs	r2, #4
 800390a:	409a      	lsls	r2, r3
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	4013      	ands	r3, r2
 8003910:	2b00      	cmp	r3, #0
 8003912:	d04f      	beq.n	80039b4 <HAL_DMA_IRQHandler+0xc8>
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	f003 0304 	and.w	r3, r3, #4
 800391a:	2b00      	cmp	r3, #0
 800391c:	d04a      	beq.n	80039b4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 0320 	and.w	r3, r3, #32
 8003928:	2b00      	cmp	r3, #0
 800392a:	d107      	bne.n	800393c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681a      	ldr	r2, [r3, #0]
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f022 0204 	bic.w	r2, r2, #4
 800393a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4a66      	ldr	r2, [pc, #408]	; (8003adc <HAL_DMA_IRQHandler+0x1f0>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d029      	beq.n	800399a <HAL_DMA_IRQHandler+0xae>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	4a65      	ldr	r2, [pc, #404]	; (8003ae0 <HAL_DMA_IRQHandler+0x1f4>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d022      	beq.n	8003996 <HAL_DMA_IRQHandler+0xaa>
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a63      	ldr	r2, [pc, #396]	; (8003ae4 <HAL_DMA_IRQHandler+0x1f8>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d01a      	beq.n	8003990 <HAL_DMA_IRQHandler+0xa4>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a62      	ldr	r2, [pc, #392]	; (8003ae8 <HAL_DMA_IRQHandler+0x1fc>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d012      	beq.n	800398a <HAL_DMA_IRQHandler+0x9e>
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a60      	ldr	r2, [pc, #384]	; (8003aec <HAL_DMA_IRQHandler+0x200>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d00a      	beq.n	8003984 <HAL_DMA_IRQHandler+0x98>
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	4a5f      	ldr	r2, [pc, #380]	; (8003af0 <HAL_DMA_IRQHandler+0x204>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d102      	bne.n	800397e <HAL_DMA_IRQHandler+0x92>
 8003978:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800397c:	e00e      	b.n	800399c <HAL_DMA_IRQHandler+0xb0>
 800397e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003982:	e00b      	b.n	800399c <HAL_DMA_IRQHandler+0xb0>
 8003984:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003988:	e008      	b.n	800399c <HAL_DMA_IRQHandler+0xb0>
 800398a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800398e:	e005      	b.n	800399c <HAL_DMA_IRQHandler+0xb0>
 8003990:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003994:	e002      	b.n	800399c <HAL_DMA_IRQHandler+0xb0>
 8003996:	2340      	movs	r3, #64	; 0x40
 8003998:	e000      	b.n	800399c <HAL_DMA_IRQHandler+0xb0>
 800399a:	2304      	movs	r3, #4
 800399c:	4a55      	ldr	r2, [pc, #340]	; (8003af4 <HAL_DMA_IRQHandler+0x208>)
 800399e:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	f000 8094 	beq.w	8003ad2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80039b2:	e08e      	b.n	8003ad2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b8:	2202      	movs	r2, #2
 80039ba:	409a      	lsls	r2, r3
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	4013      	ands	r3, r2
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d056      	beq.n	8003a72 <HAL_DMA_IRQHandler+0x186>
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	f003 0302 	and.w	r3, r3, #2
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d051      	beq.n	8003a72 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	f003 0320 	and.w	r3, r3, #32
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d10b      	bne.n	80039f4 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681a      	ldr	r2, [r3, #0]
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f022 020a 	bic.w	r2, r2, #10
 80039ea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a38      	ldr	r2, [pc, #224]	; (8003adc <HAL_DMA_IRQHandler+0x1f0>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d029      	beq.n	8003a52 <HAL_DMA_IRQHandler+0x166>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	4a37      	ldr	r2, [pc, #220]	; (8003ae0 <HAL_DMA_IRQHandler+0x1f4>)
 8003a04:	4293      	cmp	r3, r2
 8003a06:	d022      	beq.n	8003a4e <HAL_DMA_IRQHandler+0x162>
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	4a35      	ldr	r2, [pc, #212]	; (8003ae4 <HAL_DMA_IRQHandler+0x1f8>)
 8003a0e:	4293      	cmp	r3, r2
 8003a10:	d01a      	beq.n	8003a48 <HAL_DMA_IRQHandler+0x15c>
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	4a34      	ldr	r2, [pc, #208]	; (8003ae8 <HAL_DMA_IRQHandler+0x1fc>)
 8003a18:	4293      	cmp	r3, r2
 8003a1a:	d012      	beq.n	8003a42 <HAL_DMA_IRQHandler+0x156>
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4a32      	ldr	r2, [pc, #200]	; (8003aec <HAL_DMA_IRQHandler+0x200>)
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d00a      	beq.n	8003a3c <HAL_DMA_IRQHandler+0x150>
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	4a31      	ldr	r2, [pc, #196]	; (8003af0 <HAL_DMA_IRQHandler+0x204>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d102      	bne.n	8003a36 <HAL_DMA_IRQHandler+0x14a>
 8003a30:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8003a34:	e00e      	b.n	8003a54 <HAL_DMA_IRQHandler+0x168>
 8003a36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003a3a:	e00b      	b.n	8003a54 <HAL_DMA_IRQHandler+0x168>
 8003a3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003a40:	e008      	b.n	8003a54 <HAL_DMA_IRQHandler+0x168>
 8003a42:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003a46:	e005      	b.n	8003a54 <HAL_DMA_IRQHandler+0x168>
 8003a48:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a4c:	e002      	b.n	8003a54 <HAL_DMA_IRQHandler+0x168>
 8003a4e:	2320      	movs	r3, #32
 8003a50:	e000      	b.n	8003a54 <HAL_DMA_IRQHandler+0x168>
 8003a52:	2302      	movs	r3, #2
 8003a54:	4a27      	ldr	r2, [pc, #156]	; (8003af4 <HAL_DMA_IRQHandler+0x208>)
 8003a56:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d034      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a6c:	6878      	ldr	r0, [r7, #4]
 8003a6e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8003a70:	e02f      	b.n	8003ad2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a76:	2208      	movs	r2, #8
 8003a78:	409a      	lsls	r2, r3
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d028      	beq.n	8003ad4 <HAL_DMA_IRQHandler+0x1e8>
 8003a82:	68bb      	ldr	r3, [r7, #8]
 8003a84:	f003 0308 	and.w	r3, r3, #8
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d023      	beq.n	8003ad4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f022 020e 	bic.w	r2, r2, #14
 8003a9a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003aa4:	2101      	movs	r1, #1
 8003aa6:	fa01 f202 	lsl.w	r2, r1, r2
 8003aaa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2200      	movs	r2, #0
 8003abe:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d004      	beq.n	8003ad4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	4798      	blx	r3
    }
  }
  return;
 8003ad2:	bf00      	nop
 8003ad4:	bf00      	nop
}
 8003ad6:	3710      	adds	r7, #16
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	bd80      	pop	{r7, pc}
 8003adc:	40020008 	.word	0x40020008
 8003ae0:	4002001c 	.word	0x4002001c
 8003ae4:	40020030 	.word	0x40020030
 8003ae8:	40020044 	.word	0x40020044
 8003aec:	40020058 	.word	0x40020058
 8003af0:	4002006c 	.word	0x4002006c
 8003af4:	40020000 	.word	0x40020000

08003af8 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003af8:	b480      	push	{r7}
 8003afa:	b085      	sub	sp, #20
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	60f8      	str	r0, [r7, #12]
 8003b00:	60b9      	str	r1, [r7, #8]
 8003b02:	607a      	str	r2, [r7, #4]
 8003b04:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b0e:	2101      	movs	r1, #1
 8003b10:	fa01 f202 	lsl.w	r2, r1, r2
 8003b14:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	683a      	ldr	r2, [r7, #0]
 8003b1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	685b      	ldr	r3, [r3, #4]
 8003b22:	2b10      	cmp	r3, #16
 8003b24:	d108      	bne.n	8003b38 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68ba      	ldr	r2, [r7, #8]
 8003b34:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8003b36:	e007      	b.n	8003b48 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	68ba      	ldr	r2, [r7, #8]
 8003b3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	687a      	ldr	r2, [r7, #4]
 8003b46:	60da      	str	r2, [r3, #12]
}
 8003b48:	bf00      	nop
 8003b4a:	3714      	adds	r7, #20
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bc80      	pop	{r7}
 8003b50:	4770      	bx	lr
	...

08003b54 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003b54:	b480      	push	{r7}
 8003b56:	b08b      	sub	sp, #44	; 0x2c
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	6078      	str	r0, [r7, #4]
 8003b5c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003b5e:	2300      	movs	r3, #0
 8003b60:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8003b62:	2300      	movs	r3, #0
 8003b64:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003b66:	e161      	b.n	8003e2c <HAL_GPIO_Init+0x2d8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003b68:	2201      	movs	r2, #1
 8003b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003b70:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	69fa      	ldr	r2, [r7, #28]
 8003b78:	4013      	ands	r3, r2
 8003b7a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8003b7c:	69ba      	ldr	r2, [r7, #24]
 8003b7e:	69fb      	ldr	r3, [r7, #28]
 8003b80:	429a      	cmp	r2, r3
 8003b82:	f040 8150 	bne.w	8003e26 <HAL_GPIO_Init+0x2d2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8003b86:	683b      	ldr	r3, [r7, #0]
 8003b88:	685b      	ldr	r3, [r3, #4]
 8003b8a:	4a97      	ldr	r2, [pc, #604]	; (8003de8 <HAL_GPIO_Init+0x294>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d05e      	beq.n	8003c4e <HAL_GPIO_Init+0xfa>
 8003b90:	4a95      	ldr	r2, [pc, #596]	; (8003de8 <HAL_GPIO_Init+0x294>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d875      	bhi.n	8003c82 <HAL_GPIO_Init+0x12e>
 8003b96:	4a95      	ldr	r2, [pc, #596]	; (8003dec <HAL_GPIO_Init+0x298>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d058      	beq.n	8003c4e <HAL_GPIO_Init+0xfa>
 8003b9c:	4a93      	ldr	r2, [pc, #588]	; (8003dec <HAL_GPIO_Init+0x298>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d86f      	bhi.n	8003c82 <HAL_GPIO_Init+0x12e>
 8003ba2:	4a93      	ldr	r2, [pc, #588]	; (8003df0 <HAL_GPIO_Init+0x29c>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d052      	beq.n	8003c4e <HAL_GPIO_Init+0xfa>
 8003ba8:	4a91      	ldr	r2, [pc, #580]	; (8003df0 <HAL_GPIO_Init+0x29c>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d869      	bhi.n	8003c82 <HAL_GPIO_Init+0x12e>
 8003bae:	4a91      	ldr	r2, [pc, #580]	; (8003df4 <HAL_GPIO_Init+0x2a0>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d04c      	beq.n	8003c4e <HAL_GPIO_Init+0xfa>
 8003bb4:	4a8f      	ldr	r2, [pc, #572]	; (8003df4 <HAL_GPIO_Init+0x2a0>)
 8003bb6:	4293      	cmp	r3, r2
 8003bb8:	d863      	bhi.n	8003c82 <HAL_GPIO_Init+0x12e>
 8003bba:	4a8f      	ldr	r2, [pc, #572]	; (8003df8 <HAL_GPIO_Init+0x2a4>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d046      	beq.n	8003c4e <HAL_GPIO_Init+0xfa>
 8003bc0:	4a8d      	ldr	r2, [pc, #564]	; (8003df8 <HAL_GPIO_Init+0x2a4>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d85d      	bhi.n	8003c82 <HAL_GPIO_Init+0x12e>
 8003bc6:	2b12      	cmp	r3, #18
 8003bc8:	d82a      	bhi.n	8003c20 <HAL_GPIO_Init+0xcc>
 8003bca:	2b12      	cmp	r3, #18
 8003bcc:	d859      	bhi.n	8003c82 <HAL_GPIO_Init+0x12e>
 8003bce:	a201      	add	r2, pc, #4	; (adr r2, 8003bd4 <HAL_GPIO_Init+0x80>)
 8003bd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd4:	08003c4f 	.word	0x08003c4f
 8003bd8:	08003c29 	.word	0x08003c29
 8003bdc:	08003c3b 	.word	0x08003c3b
 8003be0:	08003c7d 	.word	0x08003c7d
 8003be4:	08003c83 	.word	0x08003c83
 8003be8:	08003c83 	.word	0x08003c83
 8003bec:	08003c83 	.word	0x08003c83
 8003bf0:	08003c83 	.word	0x08003c83
 8003bf4:	08003c83 	.word	0x08003c83
 8003bf8:	08003c83 	.word	0x08003c83
 8003bfc:	08003c83 	.word	0x08003c83
 8003c00:	08003c83 	.word	0x08003c83
 8003c04:	08003c83 	.word	0x08003c83
 8003c08:	08003c83 	.word	0x08003c83
 8003c0c:	08003c83 	.word	0x08003c83
 8003c10:	08003c83 	.word	0x08003c83
 8003c14:	08003c83 	.word	0x08003c83
 8003c18:	08003c31 	.word	0x08003c31
 8003c1c:	08003c45 	.word	0x08003c45
 8003c20:	4a76      	ldr	r2, [pc, #472]	; (8003dfc <HAL_GPIO_Init+0x2a8>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d013      	beq.n	8003c4e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003c26:	e02c      	b.n	8003c82 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	623b      	str	r3, [r7, #32]
          break;
 8003c2e:	e029      	b.n	8003c84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	3304      	adds	r3, #4
 8003c36:	623b      	str	r3, [r7, #32]
          break;
 8003c38:	e024      	b.n	8003c84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	3308      	adds	r3, #8
 8003c40:	623b      	str	r3, [r7, #32]
          break;
 8003c42:	e01f      	b.n	8003c84 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	330c      	adds	r3, #12
 8003c4a:	623b      	str	r3, [r7, #32]
          break;
 8003c4c:	e01a      	b.n	8003c84 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d102      	bne.n	8003c5c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003c56:	2304      	movs	r3, #4
 8003c58:	623b      	str	r3, [r7, #32]
          break;
 8003c5a:	e013      	b.n	8003c84 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	2b01      	cmp	r3, #1
 8003c62:	d105      	bne.n	8003c70 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c64:	2308      	movs	r3, #8
 8003c66:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	69fa      	ldr	r2, [r7, #28]
 8003c6c:	611a      	str	r2, [r3, #16]
          break;
 8003c6e:	e009      	b.n	8003c84 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003c70:	2308      	movs	r3, #8
 8003c72:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	69fa      	ldr	r2, [r7, #28]
 8003c78:	615a      	str	r2, [r3, #20]
          break;
 8003c7a:	e003      	b.n	8003c84 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003c7c:	2300      	movs	r3, #0
 8003c7e:	623b      	str	r3, [r7, #32]
          break;
 8003c80:	e000      	b.n	8003c84 <HAL_GPIO_Init+0x130>
          break;
 8003c82:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003c84:	69bb      	ldr	r3, [r7, #24]
 8003c86:	2bff      	cmp	r3, #255	; 0xff
 8003c88:	d801      	bhi.n	8003c8e <HAL_GPIO_Init+0x13a>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	e001      	b.n	8003c92 <HAL_GPIO_Init+0x13e>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	3304      	adds	r3, #4
 8003c92:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003c94:	69bb      	ldr	r3, [r7, #24]
 8003c96:	2bff      	cmp	r3, #255	; 0xff
 8003c98:	d802      	bhi.n	8003ca0 <HAL_GPIO_Init+0x14c>
 8003c9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c9c:	009b      	lsls	r3, r3, #2
 8003c9e:	e002      	b.n	8003ca6 <HAL_GPIO_Init+0x152>
 8003ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ca2:	3b08      	subs	r3, #8
 8003ca4:	009b      	lsls	r3, r3, #2
 8003ca6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	210f      	movs	r1, #15
 8003cae:	693b      	ldr	r3, [r7, #16]
 8003cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8003cb4:	43db      	mvns	r3, r3
 8003cb6:	401a      	ands	r2, r3
 8003cb8:	6a39      	ldr	r1, [r7, #32]
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc0:	431a      	orrs	r2, r3
 8003cc2:	697b      	ldr	r3, [r7, #20]
 8003cc4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	f000 80a9 	beq.w	8003e26 <HAL_GPIO_Init+0x2d2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003cd4:	4b4a      	ldr	r3, [pc, #296]	; (8003e00 <HAL_GPIO_Init+0x2ac>)
 8003cd6:	699b      	ldr	r3, [r3, #24]
 8003cd8:	4a49      	ldr	r2, [pc, #292]	; (8003e00 <HAL_GPIO_Init+0x2ac>)
 8003cda:	f043 0301 	orr.w	r3, r3, #1
 8003cde:	6193      	str	r3, [r2, #24]
 8003ce0:	4b47      	ldr	r3, [pc, #284]	; (8003e00 <HAL_GPIO_Init+0x2ac>)
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	f003 0301 	and.w	r3, r3, #1
 8003ce8:	60bb      	str	r3, [r7, #8]
 8003cea:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003cec:	4a45      	ldr	r2, [pc, #276]	; (8003e04 <HAL_GPIO_Init+0x2b0>)
 8003cee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf0:	089b      	lsrs	r3, r3, #2
 8003cf2:	3302      	adds	r3, #2
 8003cf4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003cf8:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cfc:	f003 0303 	and.w	r3, r3, #3
 8003d00:	009b      	lsls	r3, r3, #2
 8003d02:	220f      	movs	r2, #15
 8003d04:	fa02 f303 	lsl.w	r3, r2, r3
 8003d08:	43db      	mvns	r3, r3
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	4013      	ands	r3, r2
 8003d0e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a3d      	ldr	r2, [pc, #244]	; (8003e08 <HAL_GPIO_Init+0x2b4>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d00d      	beq.n	8003d34 <HAL_GPIO_Init+0x1e0>
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	4a3c      	ldr	r2, [pc, #240]	; (8003e0c <HAL_GPIO_Init+0x2b8>)
 8003d1c:	4293      	cmp	r3, r2
 8003d1e:	d007      	beq.n	8003d30 <HAL_GPIO_Init+0x1dc>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	4a3b      	ldr	r2, [pc, #236]	; (8003e10 <HAL_GPIO_Init+0x2bc>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d101      	bne.n	8003d2c <HAL_GPIO_Init+0x1d8>
 8003d28:	2302      	movs	r3, #2
 8003d2a:	e004      	b.n	8003d36 <HAL_GPIO_Init+0x1e2>
 8003d2c:	2303      	movs	r3, #3
 8003d2e:	e002      	b.n	8003d36 <HAL_GPIO_Init+0x1e2>
 8003d30:	2301      	movs	r3, #1
 8003d32:	e000      	b.n	8003d36 <HAL_GPIO_Init+0x1e2>
 8003d34:	2300      	movs	r3, #0
 8003d36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d38:	f002 0203 	and.w	r2, r2, #3
 8003d3c:	0092      	lsls	r2, r2, #2
 8003d3e:	4093      	lsls	r3, r2
 8003d40:	68fa      	ldr	r2, [r7, #12]
 8003d42:	4313      	orrs	r3, r2
 8003d44:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003d46:	492f      	ldr	r1, [pc, #188]	; (8003e04 <HAL_GPIO_Init+0x2b0>)
 8003d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d4a:	089b      	lsrs	r3, r3, #2
 8003d4c:	3302      	adds	r3, #2
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685b      	ldr	r3, [r3, #4]
 8003d58:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d006      	beq.n	8003d6e <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003d60:	4b2c      	ldr	r3, [pc, #176]	; (8003e14 <HAL_GPIO_Init+0x2c0>)
 8003d62:	689a      	ldr	r2, [r3, #8]
 8003d64:	492b      	ldr	r1, [pc, #172]	; (8003e14 <HAL_GPIO_Init+0x2c0>)
 8003d66:	69bb      	ldr	r3, [r7, #24]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	608b      	str	r3, [r1, #8]
 8003d6c:	e006      	b.n	8003d7c <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003d6e:	4b29      	ldr	r3, [pc, #164]	; (8003e14 <HAL_GPIO_Init+0x2c0>)
 8003d70:	689a      	ldr	r2, [r3, #8]
 8003d72:	69bb      	ldr	r3, [r7, #24]
 8003d74:	43db      	mvns	r3, r3
 8003d76:	4927      	ldr	r1, [pc, #156]	; (8003e14 <HAL_GPIO_Init+0x2c0>)
 8003d78:	4013      	ands	r3, r2
 8003d7a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d006      	beq.n	8003d96 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003d88:	4b22      	ldr	r3, [pc, #136]	; (8003e14 <HAL_GPIO_Init+0x2c0>)
 8003d8a:	68da      	ldr	r2, [r3, #12]
 8003d8c:	4921      	ldr	r1, [pc, #132]	; (8003e14 <HAL_GPIO_Init+0x2c0>)
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	60cb      	str	r3, [r1, #12]
 8003d94:	e006      	b.n	8003da4 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003d96:	4b1f      	ldr	r3, [pc, #124]	; (8003e14 <HAL_GPIO_Init+0x2c0>)
 8003d98:	68da      	ldr	r2, [r3, #12]
 8003d9a:	69bb      	ldr	r3, [r7, #24]
 8003d9c:	43db      	mvns	r3, r3
 8003d9e:	491d      	ldr	r1, [pc, #116]	; (8003e14 <HAL_GPIO_Init+0x2c0>)
 8003da0:	4013      	ands	r3, r2
 8003da2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d006      	beq.n	8003dbe <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003db0:	4b18      	ldr	r3, [pc, #96]	; (8003e14 <HAL_GPIO_Init+0x2c0>)
 8003db2:	685a      	ldr	r2, [r3, #4]
 8003db4:	4917      	ldr	r1, [pc, #92]	; (8003e14 <HAL_GPIO_Init+0x2c0>)
 8003db6:	69bb      	ldr	r3, [r7, #24]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	604b      	str	r3, [r1, #4]
 8003dbc:	e006      	b.n	8003dcc <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003dbe:	4b15      	ldr	r3, [pc, #84]	; (8003e14 <HAL_GPIO_Init+0x2c0>)
 8003dc0:	685a      	ldr	r2, [r3, #4]
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	43db      	mvns	r3, r3
 8003dc6:	4913      	ldr	r1, [pc, #76]	; (8003e14 <HAL_GPIO_Init+0x2c0>)
 8003dc8:	4013      	ands	r3, r2
 8003dca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d01f      	beq.n	8003e18 <HAL_GPIO_Init+0x2c4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003dd8:	4b0e      	ldr	r3, [pc, #56]	; (8003e14 <HAL_GPIO_Init+0x2c0>)
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	490d      	ldr	r1, [pc, #52]	; (8003e14 <HAL_GPIO_Init+0x2c0>)
 8003dde:	69bb      	ldr	r3, [r7, #24]
 8003de0:	4313      	orrs	r3, r2
 8003de2:	600b      	str	r3, [r1, #0]
 8003de4:	e01f      	b.n	8003e26 <HAL_GPIO_Init+0x2d2>
 8003de6:	bf00      	nop
 8003de8:	10320000 	.word	0x10320000
 8003dec:	10310000 	.word	0x10310000
 8003df0:	10220000 	.word	0x10220000
 8003df4:	10210000 	.word	0x10210000
 8003df8:	10120000 	.word	0x10120000
 8003dfc:	10110000 	.word	0x10110000
 8003e00:	40021000 	.word	0x40021000
 8003e04:	40010000 	.word	0x40010000
 8003e08:	40010800 	.word	0x40010800
 8003e0c:	40010c00 	.word	0x40010c00
 8003e10:	40011000 	.word	0x40011000
 8003e14:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003e18:	4b0b      	ldr	r3, [pc, #44]	; (8003e48 <HAL_GPIO_Init+0x2f4>)
 8003e1a:	681a      	ldr	r2, [r3, #0]
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	43db      	mvns	r3, r3
 8003e20:	4909      	ldr	r1, [pc, #36]	; (8003e48 <HAL_GPIO_Init+0x2f4>)
 8003e22:	4013      	ands	r3, r2
 8003e24:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003e26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e28:	3301      	adds	r3, #1
 8003e2a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	681a      	ldr	r2, [r3, #0]
 8003e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e32:	fa22 f303 	lsr.w	r3, r2, r3
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	f47f ae96 	bne.w	8003b68 <HAL_GPIO_Init+0x14>
  }
}
 8003e3c:	bf00      	nop
 8003e3e:	bf00      	nop
 8003e40:	372c      	adds	r7, #44	; 0x2c
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bc80      	pop	{r7}
 8003e46:	4770      	bx	lr
 8003e48:	40010400 	.word	0x40010400

08003e4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b085      	sub	sp, #20
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	460b      	mov	r3, r1
 8003e56:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	689a      	ldr	r2, [r3, #8]
 8003e5c:	887b      	ldrh	r3, [r7, #2]
 8003e5e:	4013      	ands	r3, r2
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d002      	beq.n	8003e6a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003e64:	2301      	movs	r3, #1
 8003e66:	73fb      	strb	r3, [r7, #15]
 8003e68:	e001      	b.n	8003e6e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003e6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	3714      	adds	r7, #20
 8003e74:	46bd      	mov	sp, r7
 8003e76:	bc80      	pop	{r7}
 8003e78:	4770      	bx	lr

08003e7a <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	b083      	sub	sp, #12
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
 8003e82:	460b      	mov	r3, r1
 8003e84:	807b      	strh	r3, [r7, #2]
 8003e86:	4613      	mov	r3, r2
 8003e88:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003e8a:	787b      	ldrb	r3, [r7, #1]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	d003      	beq.n	8003e98 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003e90:	887a      	ldrh	r2, [r7, #2]
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003e96:	e003      	b.n	8003ea0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003e98:	887b      	ldrh	r3, [r7, #2]
 8003e9a:	041a      	lsls	r2, r3, #16
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	611a      	str	r2, [r3, #16]
}
 8003ea0:	bf00      	nop
 8003ea2:	370c      	adds	r7, #12
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	bc80      	pop	{r7}
 8003ea8:	4770      	bx	lr

08003eaa <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003eaa:	b480      	push	{r7}
 8003eac:	b085      	sub	sp, #20
 8003eae:	af00      	add	r7, sp, #0
 8003eb0:	6078      	str	r0, [r7, #4]
 8003eb2:	460b      	mov	r3, r1
 8003eb4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ebc:	887a      	ldrh	r2, [r7, #2]
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	4013      	ands	r3, r2
 8003ec2:	041a      	lsls	r2, r3, #16
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	43d9      	mvns	r1, r3
 8003ec8:	887b      	ldrh	r3, [r7, #2]
 8003eca:	400b      	ands	r3, r1
 8003ecc:	431a      	orrs	r2, r3
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	611a      	str	r2, [r3, #16]
}
 8003ed2:	bf00      	nop
 8003ed4:	3714      	adds	r7, #20
 8003ed6:	46bd      	mov	sp, r7
 8003ed8:	bc80      	pop	{r7}
 8003eda:	4770      	bx	lr

08003edc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b082      	sub	sp, #8
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003ee6:	4b08      	ldr	r3, [pc, #32]	; (8003f08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ee8:	695a      	ldr	r2, [r3, #20]
 8003eea:	88fb      	ldrh	r3, [r7, #6]
 8003eec:	4013      	ands	r3, r2
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d006      	beq.n	8003f00 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003ef2:	4a05      	ldr	r2, [pc, #20]	; (8003f08 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003ef4:	88fb      	ldrh	r3, [r7, #6]
 8003ef6:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003ef8:	88fb      	ldrh	r3, [r7, #6]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f7fc fa86 	bl	800040c <HAL_GPIO_EXTI_Callback>
  }
}
 8003f00:	bf00      	nop
 8003f02:	3708      	adds	r7, #8
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	40010400 	.word	0x40010400

08003f0c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b086      	sub	sp, #24
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d101      	bne.n	8003f1e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f1a:	2301      	movs	r3, #1
 8003f1c:	e272      	b.n	8004404 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	f000 8087 	beq.w	800403a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003f2c:	4b92      	ldr	r3, [pc, #584]	; (8004178 <HAL_RCC_OscConfig+0x26c>)
 8003f2e:	685b      	ldr	r3, [r3, #4]
 8003f30:	f003 030c 	and.w	r3, r3, #12
 8003f34:	2b04      	cmp	r3, #4
 8003f36:	d00c      	beq.n	8003f52 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003f38:	4b8f      	ldr	r3, [pc, #572]	; (8004178 <HAL_RCC_OscConfig+0x26c>)
 8003f3a:	685b      	ldr	r3, [r3, #4]
 8003f3c:	f003 030c 	and.w	r3, r3, #12
 8003f40:	2b08      	cmp	r3, #8
 8003f42:	d112      	bne.n	8003f6a <HAL_RCC_OscConfig+0x5e>
 8003f44:	4b8c      	ldr	r3, [pc, #560]	; (8004178 <HAL_RCC_OscConfig+0x26c>)
 8003f46:	685b      	ldr	r3, [r3, #4]
 8003f48:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f50:	d10b      	bne.n	8003f6a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f52:	4b89      	ldr	r3, [pc, #548]	; (8004178 <HAL_RCC_OscConfig+0x26c>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d06c      	beq.n	8004038 <HAL_RCC_OscConfig+0x12c>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d168      	bne.n	8004038 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e24c      	b.n	8004404 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f72:	d106      	bne.n	8003f82 <HAL_RCC_OscConfig+0x76>
 8003f74:	4b80      	ldr	r3, [pc, #512]	; (8004178 <HAL_RCC_OscConfig+0x26c>)
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a7f      	ldr	r2, [pc, #508]	; (8004178 <HAL_RCC_OscConfig+0x26c>)
 8003f7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f7e:	6013      	str	r3, [r2, #0]
 8003f80:	e02e      	b.n	8003fe0 <HAL_RCC_OscConfig+0xd4>
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	685b      	ldr	r3, [r3, #4]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d10c      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x98>
 8003f8a:	4b7b      	ldr	r3, [pc, #492]	; (8004178 <HAL_RCC_OscConfig+0x26c>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	4a7a      	ldr	r2, [pc, #488]	; (8004178 <HAL_RCC_OscConfig+0x26c>)
 8003f90:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f94:	6013      	str	r3, [r2, #0]
 8003f96:	4b78      	ldr	r3, [pc, #480]	; (8004178 <HAL_RCC_OscConfig+0x26c>)
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	4a77      	ldr	r2, [pc, #476]	; (8004178 <HAL_RCC_OscConfig+0x26c>)
 8003f9c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fa0:	6013      	str	r3, [r2, #0]
 8003fa2:	e01d      	b.n	8003fe0 <HAL_RCC_OscConfig+0xd4>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fac:	d10c      	bne.n	8003fc8 <HAL_RCC_OscConfig+0xbc>
 8003fae:	4b72      	ldr	r3, [pc, #456]	; (8004178 <HAL_RCC_OscConfig+0x26c>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a71      	ldr	r2, [pc, #452]	; (8004178 <HAL_RCC_OscConfig+0x26c>)
 8003fb4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fb8:	6013      	str	r3, [r2, #0]
 8003fba:	4b6f      	ldr	r3, [pc, #444]	; (8004178 <HAL_RCC_OscConfig+0x26c>)
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	4a6e      	ldr	r2, [pc, #440]	; (8004178 <HAL_RCC_OscConfig+0x26c>)
 8003fc0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fc4:	6013      	str	r3, [r2, #0]
 8003fc6:	e00b      	b.n	8003fe0 <HAL_RCC_OscConfig+0xd4>
 8003fc8:	4b6b      	ldr	r3, [pc, #428]	; (8004178 <HAL_RCC_OscConfig+0x26c>)
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	4a6a      	ldr	r2, [pc, #424]	; (8004178 <HAL_RCC_OscConfig+0x26c>)
 8003fce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fd2:	6013      	str	r3, [r2, #0]
 8003fd4:	4b68      	ldr	r3, [pc, #416]	; (8004178 <HAL_RCC_OscConfig+0x26c>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	4a67      	ldr	r2, [pc, #412]	; (8004178 <HAL_RCC_OscConfig+0x26c>)
 8003fda:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003fde:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d013      	beq.n	8004010 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fe8:	f7ff f9fa 	bl	80033e0 <HAL_GetTick>
 8003fec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003fee:	e008      	b.n	8004002 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ff0:	f7ff f9f6 	bl	80033e0 <HAL_GetTick>
 8003ff4:	4602      	mov	r2, r0
 8003ff6:	693b      	ldr	r3, [r7, #16]
 8003ff8:	1ad3      	subs	r3, r2, r3
 8003ffa:	2b64      	cmp	r3, #100	; 0x64
 8003ffc:	d901      	bls.n	8004002 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003ffe:	2303      	movs	r3, #3
 8004000:	e200      	b.n	8004404 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004002:	4b5d      	ldr	r3, [pc, #372]	; (8004178 <HAL_RCC_OscConfig+0x26c>)
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800400a:	2b00      	cmp	r3, #0
 800400c:	d0f0      	beq.n	8003ff0 <HAL_RCC_OscConfig+0xe4>
 800400e:	e014      	b.n	800403a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004010:	f7ff f9e6 	bl	80033e0 <HAL_GetTick>
 8004014:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004016:	e008      	b.n	800402a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004018:	f7ff f9e2 	bl	80033e0 <HAL_GetTick>
 800401c:	4602      	mov	r2, r0
 800401e:	693b      	ldr	r3, [r7, #16]
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	2b64      	cmp	r3, #100	; 0x64
 8004024:	d901      	bls.n	800402a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8004026:	2303      	movs	r3, #3
 8004028:	e1ec      	b.n	8004404 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800402a:	4b53      	ldr	r3, [pc, #332]	; (8004178 <HAL_RCC_OscConfig+0x26c>)
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1f0      	bne.n	8004018 <HAL_RCC_OscConfig+0x10c>
 8004036:	e000      	b.n	800403a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004038:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0302 	and.w	r3, r3, #2
 8004042:	2b00      	cmp	r3, #0
 8004044:	d063      	beq.n	800410e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004046:	4b4c      	ldr	r3, [pc, #304]	; (8004178 <HAL_RCC_OscConfig+0x26c>)
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f003 030c 	and.w	r3, r3, #12
 800404e:	2b00      	cmp	r3, #0
 8004050:	d00b      	beq.n	800406a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004052:	4b49      	ldr	r3, [pc, #292]	; (8004178 <HAL_RCC_OscConfig+0x26c>)
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	f003 030c 	and.w	r3, r3, #12
 800405a:	2b08      	cmp	r3, #8
 800405c:	d11c      	bne.n	8004098 <HAL_RCC_OscConfig+0x18c>
 800405e:	4b46      	ldr	r3, [pc, #280]	; (8004178 <HAL_RCC_OscConfig+0x26c>)
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004066:	2b00      	cmp	r3, #0
 8004068:	d116      	bne.n	8004098 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800406a:	4b43      	ldr	r3, [pc, #268]	; (8004178 <HAL_RCC_OscConfig+0x26c>)
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f003 0302 	and.w	r3, r3, #2
 8004072:	2b00      	cmp	r3, #0
 8004074:	d005      	beq.n	8004082 <HAL_RCC_OscConfig+0x176>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	2b01      	cmp	r3, #1
 800407c:	d001      	beq.n	8004082 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800407e:	2301      	movs	r3, #1
 8004080:	e1c0      	b.n	8004404 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004082:	4b3d      	ldr	r3, [pc, #244]	; (8004178 <HAL_RCC_OscConfig+0x26c>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	00db      	lsls	r3, r3, #3
 8004090:	4939      	ldr	r1, [pc, #228]	; (8004178 <HAL_RCC_OscConfig+0x26c>)
 8004092:	4313      	orrs	r3, r2
 8004094:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004096:	e03a      	b.n	800410e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	691b      	ldr	r3, [r3, #16]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d020      	beq.n	80040e2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040a0:	4b36      	ldr	r3, [pc, #216]	; (800417c <HAL_RCC_OscConfig+0x270>)
 80040a2:	2201      	movs	r2, #1
 80040a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040a6:	f7ff f99b 	bl	80033e0 <HAL_GetTick>
 80040aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040ac:	e008      	b.n	80040c0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040ae:	f7ff f997 	bl	80033e0 <HAL_GetTick>
 80040b2:	4602      	mov	r2, r0
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	1ad3      	subs	r3, r2, r3
 80040b8:	2b02      	cmp	r3, #2
 80040ba:	d901      	bls.n	80040c0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80040bc:	2303      	movs	r3, #3
 80040be:	e1a1      	b.n	8004404 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040c0:	4b2d      	ldr	r3, [pc, #180]	; (8004178 <HAL_RCC_OscConfig+0x26c>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	f003 0302 	and.w	r3, r3, #2
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d0f0      	beq.n	80040ae <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040cc:	4b2a      	ldr	r3, [pc, #168]	; (8004178 <HAL_RCC_OscConfig+0x26c>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	695b      	ldr	r3, [r3, #20]
 80040d8:	00db      	lsls	r3, r3, #3
 80040da:	4927      	ldr	r1, [pc, #156]	; (8004178 <HAL_RCC_OscConfig+0x26c>)
 80040dc:	4313      	orrs	r3, r2
 80040de:	600b      	str	r3, [r1, #0]
 80040e0:	e015      	b.n	800410e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040e2:	4b26      	ldr	r3, [pc, #152]	; (800417c <HAL_RCC_OscConfig+0x270>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040e8:	f7ff f97a 	bl	80033e0 <HAL_GetTick>
 80040ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040ee:	e008      	b.n	8004102 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040f0:	f7ff f976 	bl	80033e0 <HAL_GetTick>
 80040f4:	4602      	mov	r2, r0
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	2b02      	cmp	r3, #2
 80040fc:	d901      	bls.n	8004102 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e180      	b.n	8004404 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004102:	4b1d      	ldr	r3, [pc, #116]	; (8004178 <HAL_RCC_OscConfig+0x26c>)
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0302 	and.w	r3, r3, #2
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1f0      	bne.n	80040f0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f003 0308 	and.w	r3, r3, #8
 8004116:	2b00      	cmp	r3, #0
 8004118:	d03a      	beq.n	8004190 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	699b      	ldr	r3, [r3, #24]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d019      	beq.n	8004156 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004122:	4b17      	ldr	r3, [pc, #92]	; (8004180 <HAL_RCC_OscConfig+0x274>)
 8004124:	2201      	movs	r2, #1
 8004126:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004128:	f7ff f95a 	bl	80033e0 <HAL_GetTick>
 800412c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800412e:	e008      	b.n	8004142 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004130:	f7ff f956 	bl	80033e0 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	2b02      	cmp	r3, #2
 800413c:	d901      	bls.n	8004142 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e160      	b.n	8004404 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004142:	4b0d      	ldr	r3, [pc, #52]	; (8004178 <HAL_RCC_OscConfig+0x26c>)
 8004144:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d0f0      	beq.n	8004130 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800414e:	2001      	movs	r0, #1
 8004150:	f000 face 	bl	80046f0 <RCC_Delay>
 8004154:	e01c      	b.n	8004190 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004156:	4b0a      	ldr	r3, [pc, #40]	; (8004180 <HAL_RCC_OscConfig+0x274>)
 8004158:	2200      	movs	r2, #0
 800415a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800415c:	f7ff f940 	bl	80033e0 <HAL_GetTick>
 8004160:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004162:	e00f      	b.n	8004184 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004164:	f7ff f93c 	bl	80033e0 <HAL_GetTick>
 8004168:	4602      	mov	r2, r0
 800416a:	693b      	ldr	r3, [r7, #16]
 800416c:	1ad3      	subs	r3, r2, r3
 800416e:	2b02      	cmp	r3, #2
 8004170:	d908      	bls.n	8004184 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004172:	2303      	movs	r3, #3
 8004174:	e146      	b.n	8004404 <HAL_RCC_OscConfig+0x4f8>
 8004176:	bf00      	nop
 8004178:	40021000 	.word	0x40021000
 800417c:	42420000 	.word	0x42420000
 8004180:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004184:	4b92      	ldr	r3, [pc, #584]	; (80043d0 <HAL_RCC_OscConfig+0x4c4>)
 8004186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004188:	f003 0302 	and.w	r3, r3, #2
 800418c:	2b00      	cmp	r3, #0
 800418e:	d1e9      	bne.n	8004164 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 0304 	and.w	r3, r3, #4
 8004198:	2b00      	cmp	r3, #0
 800419a:	f000 80a6 	beq.w	80042ea <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800419e:	2300      	movs	r3, #0
 80041a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041a2:	4b8b      	ldr	r3, [pc, #556]	; (80043d0 <HAL_RCC_OscConfig+0x4c4>)
 80041a4:	69db      	ldr	r3, [r3, #28]
 80041a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d10d      	bne.n	80041ca <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041ae:	4b88      	ldr	r3, [pc, #544]	; (80043d0 <HAL_RCC_OscConfig+0x4c4>)
 80041b0:	69db      	ldr	r3, [r3, #28]
 80041b2:	4a87      	ldr	r2, [pc, #540]	; (80043d0 <HAL_RCC_OscConfig+0x4c4>)
 80041b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041b8:	61d3      	str	r3, [r2, #28]
 80041ba:	4b85      	ldr	r3, [pc, #532]	; (80043d0 <HAL_RCC_OscConfig+0x4c4>)
 80041bc:	69db      	ldr	r3, [r3, #28]
 80041be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041c2:	60bb      	str	r3, [r7, #8]
 80041c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041c6:	2301      	movs	r3, #1
 80041c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ca:	4b82      	ldr	r3, [pc, #520]	; (80043d4 <HAL_RCC_OscConfig+0x4c8>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d118      	bne.n	8004208 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041d6:	4b7f      	ldr	r3, [pc, #508]	; (80043d4 <HAL_RCC_OscConfig+0x4c8>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a7e      	ldr	r2, [pc, #504]	; (80043d4 <HAL_RCC_OscConfig+0x4c8>)
 80041dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041e2:	f7ff f8fd 	bl	80033e0 <HAL_GetTick>
 80041e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041e8:	e008      	b.n	80041fc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041ea:	f7ff f8f9 	bl	80033e0 <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	2b64      	cmp	r3, #100	; 0x64
 80041f6:	d901      	bls.n	80041fc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e103      	b.n	8004404 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041fc:	4b75      	ldr	r3, [pc, #468]	; (80043d4 <HAL_RCC_OscConfig+0x4c8>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004204:	2b00      	cmp	r3, #0
 8004206:	d0f0      	beq.n	80041ea <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d106      	bne.n	800421e <HAL_RCC_OscConfig+0x312>
 8004210:	4b6f      	ldr	r3, [pc, #444]	; (80043d0 <HAL_RCC_OscConfig+0x4c4>)
 8004212:	6a1b      	ldr	r3, [r3, #32]
 8004214:	4a6e      	ldr	r2, [pc, #440]	; (80043d0 <HAL_RCC_OscConfig+0x4c4>)
 8004216:	f043 0301 	orr.w	r3, r3, #1
 800421a:	6213      	str	r3, [r2, #32]
 800421c:	e02d      	b.n	800427a <HAL_RCC_OscConfig+0x36e>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10c      	bne.n	8004240 <HAL_RCC_OscConfig+0x334>
 8004226:	4b6a      	ldr	r3, [pc, #424]	; (80043d0 <HAL_RCC_OscConfig+0x4c4>)
 8004228:	6a1b      	ldr	r3, [r3, #32]
 800422a:	4a69      	ldr	r2, [pc, #420]	; (80043d0 <HAL_RCC_OscConfig+0x4c4>)
 800422c:	f023 0301 	bic.w	r3, r3, #1
 8004230:	6213      	str	r3, [r2, #32]
 8004232:	4b67      	ldr	r3, [pc, #412]	; (80043d0 <HAL_RCC_OscConfig+0x4c4>)
 8004234:	6a1b      	ldr	r3, [r3, #32]
 8004236:	4a66      	ldr	r2, [pc, #408]	; (80043d0 <HAL_RCC_OscConfig+0x4c4>)
 8004238:	f023 0304 	bic.w	r3, r3, #4
 800423c:	6213      	str	r3, [r2, #32]
 800423e:	e01c      	b.n	800427a <HAL_RCC_OscConfig+0x36e>
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	68db      	ldr	r3, [r3, #12]
 8004244:	2b05      	cmp	r3, #5
 8004246:	d10c      	bne.n	8004262 <HAL_RCC_OscConfig+0x356>
 8004248:	4b61      	ldr	r3, [pc, #388]	; (80043d0 <HAL_RCC_OscConfig+0x4c4>)
 800424a:	6a1b      	ldr	r3, [r3, #32]
 800424c:	4a60      	ldr	r2, [pc, #384]	; (80043d0 <HAL_RCC_OscConfig+0x4c4>)
 800424e:	f043 0304 	orr.w	r3, r3, #4
 8004252:	6213      	str	r3, [r2, #32]
 8004254:	4b5e      	ldr	r3, [pc, #376]	; (80043d0 <HAL_RCC_OscConfig+0x4c4>)
 8004256:	6a1b      	ldr	r3, [r3, #32]
 8004258:	4a5d      	ldr	r2, [pc, #372]	; (80043d0 <HAL_RCC_OscConfig+0x4c4>)
 800425a:	f043 0301 	orr.w	r3, r3, #1
 800425e:	6213      	str	r3, [r2, #32]
 8004260:	e00b      	b.n	800427a <HAL_RCC_OscConfig+0x36e>
 8004262:	4b5b      	ldr	r3, [pc, #364]	; (80043d0 <HAL_RCC_OscConfig+0x4c4>)
 8004264:	6a1b      	ldr	r3, [r3, #32]
 8004266:	4a5a      	ldr	r2, [pc, #360]	; (80043d0 <HAL_RCC_OscConfig+0x4c4>)
 8004268:	f023 0301 	bic.w	r3, r3, #1
 800426c:	6213      	str	r3, [r2, #32]
 800426e:	4b58      	ldr	r3, [pc, #352]	; (80043d0 <HAL_RCC_OscConfig+0x4c4>)
 8004270:	6a1b      	ldr	r3, [r3, #32]
 8004272:	4a57      	ldr	r2, [pc, #348]	; (80043d0 <HAL_RCC_OscConfig+0x4c4>)
 8004274:	f023 0304 	bic.w	r3, r3, #4
 8004278:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d015      	beq.n	80042ae <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004282:	f7ff f8ad 	bl	80033e0 <HAL_GetTick>
 8004286:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004288:	e00a      	b.n	80042a0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800428a:	f7ff f8a9 	bl	80033e0 <HAL_GetTick>
 800428e:	4602      	mov	r2, r0
 8004290:	693b      	ldr	r3, [r7, #16]
 8004292:	1ad3      	subs	r3, r2, r3
 8004294:	f241 3288 	movw	r2, #5000	; 0x1388
 8004298:	4293      	cmp	r3, r2
 800429a:	d901      	bls.n	80042a0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800429c:	2303      	movs	r3, #3
 800429e:	e0b1      	b.n	8004404 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042a0:	4b4b      	ldr	r3, [pc, #300]	; (80043d0 <HAL_RCC_OscConfig+0x4c4>)
 80042a2:	6a1b      	ldr	r3, [r3, #32]
 80042a4:	f003 0302 	and.w	r3, r3, #2
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d0ee      	beq.n	800428a <HAL_RCC_OscConfig+0x37e>
 80042ac:	e014      	b.n	80042d8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042ae:	f7ff f897 	bl	80033e0 <HAL_GetTick>
 80042b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042b4:	e00a      	b.n	80042cc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80042b6:	f7ff f893 	bl	80033e0 <HAL_GetTick>
 80042ba:	4602      	mov	r2, r0
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	1ad3      	subs	r3, r2, r3
 80042c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d901      	bls.n	80042cc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80042c8:	2303      	movs	r3, #3
 80042ca:	e09b      	b.n	8004404 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042cc:	4b40      	ldr	r3, [pc, #256]	; (80043d0 <HAL_RCC_OscConfig+0x4c4>)
 80042ce:	6a1b      	ldr	r3, [r3, #32]
 80042d0:	f003 0302 	and.w	r3, r3, #2
 80042d4:	2b00      	cmp	r3, #0
 80042d6:	d1ee      	bne.n	80042b6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80042d8:	7dfb      	ldrb	r3, [r7, #23]
 80042da:	2b01      	cmp	r3, #1
 80042dc:	d105      	bne.n	80042ea <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042de:	4b3c      	ldr	r3, [pc, #240]	; (80043d0 <HAL_RCC_OscConfig+0x4c4>)
 80042e0:	69db      	ldr	r3, [r3, #28]
 80042e2:	4a3b      	ldr	r2, [pc, #236]	; (80043d0 <HAL_RCC_OscConfig+0x4c4>)
 80042e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042e8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	69db      	ldr	r3, [r3, #28]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	f000 8087 	beq.w	8004402 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80042f4:	4b36      	ldr	r3, [pc, #216]	; (80043d0 <HAL_RCC_OscConfig+0x4c4>)
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f003 030c 	and.w	r3, r3, #12
 80042fc:	2b08      	cmp	r3, #8
 80042fe:	d061      	beq.n	80043c4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	69db      	ldr	r3, [r3, #28]
 8004304:	2b02      	cmp	r3, #2
 8004306:	d146      	bne.n	8004396 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004308:	4b33      	ldr	r3, [pc, #204]	; (80043d8 <HAL_RCC_OscConfig+0x4cc>)
 800430a:	2200      	movs	r2, #0
 800430c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800430e:	f7ff f867 	bl	80033e0 <HAL_GetTick>
 8004312:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004314:	e008      	b.n	8004328 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004316:	f7ff f863 	bl	80033e0 <HAL_GetTick>
 800431a:	4602      	mov	r2, r0
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	1ad3      	subs	r3, r2, r3
 8004320:	2b02      	cmp	r3, #2
 8004322:	d901      	bls.n	8004328 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004324:	2303      	movs	r3, #3
 8004326:	e06d      	b.n	8004404 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004328:	4b29      	ldr	r3, [pc, #164]	; (80043d0 <HAL_RCC_OscConfig+0x4c4>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004330:	2b00      	cmp	r3, #0
 8004332:	d1f0      	bne.n	8004316 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a1b      	ldr	r3, [r3, #32]
 8004338:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800433c:	d108      	bne.n	8004350 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800433e:	4b24      	ldr	r3, [pc, #144]	; (80043d0 <HAL_RCC_OscConfig+0x4c4>)
 8004340:	685b      	ldr	r3, [r3, #4]
 8004342:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	689b      	ldr	r3, [r3, #8]
 800434a:	4921      	ldr	r1, [pc, #132]	; (80043d0 <HAL_RCC_OscConfig+0x4c4>)
 800434c:	4313      	orrs	r3, r2
 800434e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004350:	4b1f      	ldr	r3, [pc, #124]	; (80043d0 <HAL_RCC_OscConfig+0x4c4>)
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6a19      	ldr	r1, [r3, #32]
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004360:	430b      	orrs	r3, r1
 8004362:	491b      	ldr	r1, [pc, #108]	; (80043d0 <HAL_RCC_OscConfig+0x4c4>)
 8004364:	4313      	orrs	r3, r2
 8004366:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004368:	4b1b      	ldr	r3, [pc, #108]	; (80043d8 <HAL_RCC_OscConfig+0x4cc>)
 800436a:	2201      	movs	r2, #1
 800436c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800436e:	f7ff f837 	bl	80033e0 <HAL_GetTick>
 8004372:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004374:	e008      	b.n	8004388 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004376:	f7ff f833 	bl	80033e0 <HAL_GetTick>
 800437a:	4602      	mov	r2, r0
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	1ad3      	subs	r3, r2, r3
 8004380:	2b02      	cmp	r3, #2
 8004382:	d901      	bls.n	8004388 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004384:	2303      	movs	r3, #3
 8004386:	e03d      	b.n	8004404 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004388:	4b11      	ldr	r3, [pc, #68]	; (80043d0 <HAL_RCC_OscConfig+0x4c4>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d0f0      	beq.n	8004376 <HAL_RCC_OscConfig+0x46a>
 8004394:	e035      	b.n	8004402 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004396:	4b10      	ldr	r3, [pc, #64]	; (80043d8 <HAL_RCC_OscConfig+0x4cc>)
 8004398:	2200      	movs	r2, #0
 800439a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800439c:	f7ff f820 	bl	80033e0 <HAL_GetTick>
 80043a0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043a2:	e008      	b.n	80043b6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043a4:	f7ff f81c 	bl	80033e0 <HAL_GetTick>
 80043a8:	4602      	mov	r2, r0
 80043aa:	693b      	ldr	r3, [r7, #16]
 80043ac:	1ad3      	subs	r3, r2, r3
 80043ae:	2b02      	cmp	r3, #2
 80043b0:	d901      	bls.n	80043b6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80043b2:	2303      	movs	r3, #3
 80043b4:	e026      	b.n	8004404 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80043b6:	4b06      	ldr	r3, [pc, #24]	; (80043d0 <HAL_RCC_OscConfig+0x4c4>)
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d1f0      	bne.n	80043a4 <HAL_RCC_OscConfig+0x498>
 80043c2:	e01e      	b.n	8004402 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	69db      	ldr	r3, [r3, #28]
 80043c8:	2b01      	cmp	r3, #1
 80043ca:	d107      	bne.n	80043dc <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	e019      	b.n	8004404 <HAL_RCC_OscConfig+0x4f8>
 80043d0:	40021000 	.word	0x40021000
 80043d4:	40007000 	.word	0x40007000
 80043d8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80043dc:	4b0b      	ldr	r3, [pc, #44]	; (800440c <HAL_RCC_OscConfig+0x500>)
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6a1b      	ldr	r3, [r3, #32]
 80043ec:	429a      	cmp	r2, r3
 80043ee:	d106      	bne.n	80043fe <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043fa:	429a      	cmp	r2, r3
 80043fc:	d001      	beq.n	8004402 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	e000      	b.n	8004404 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004402:	2300      	movs	r3, #0
}
 8004404:	4618      	mov	r0, r3
 8004406:	3718      	adds	r7, #24
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}
 800440c:	40021000 	.word	0x40021000

08004410 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d101      	bne.n	8004424 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004420:	2301      	movs	r3, #1
 8004422:	e0d0      	b.n	80045c6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004424:	4b6a      	ldr	r3, [pc, #424]	; (80045d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 0307 	and.w	r3, r3, #7
 800442c:	683a      	ldr	r2, [r7, #0]
 800442e:	429a      	cmp	r2, r3
 8004430:	d910      	bls.n	8004454 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004432:	4b67      	ldr	r3, [pc, #412]	; (80045d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f023 0207 	bic.w	r2, r3, #7
 800443a:	4965      	ldr	r1, [pc, #404]	; (80045d0 <HAL_RCC_ClockConfig+0x1c0>)
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	4313      	orrs	r3, r2
 8004440:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004442:	4b63      	ldr	r3, [pc, #396]	; (80045d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	f003 0307 	and.w	r3, r3, #7
 800444a:	683a      	ldr	r2, [r7, #0]
 800444c:	429a      	cmp	r2, r3
 800444e:	d001      	beq.n	8004454 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e0b8      	b.n	80045c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0302 	and.w	r3, r3, #2
 800445c:	2b00      	cmp	r3, #0
 800445e:	d020      	beq.n	80044a2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0304 	and.w	r3, r3, #4
 8004468:	2b00      	cmp	r3, #0
 800446a:	d005      	beq.n	8004478 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800446c:	4b59      	ldr	r3, [pc, #356]	; (80045d4 <HAL_RCC_ClockConfig+0x1c4>)
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	4a58      	ldr	r2, [pc, #352]	; (80045d4 <HAL_RCC_ClockConfig+0x1c4>)
 8004472:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004476:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0308 	and.w	r3, r3, #8
 8004480:	2b00      	cmp	r3, #0
 8004482:	d005      	beq.n	8004490 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004484:	4b53      	ldr	r3, [pc, #332]	; (80045d4 <HAL_RCC_ClockConfig+0x1c4>)
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	4a52      	ldr	r2, [pc, #328]	; (80045d4 <HAL_RCC_ClockConfig+0x1c4>)
 800448a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 800448e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004490:	4b50      	ldr	r3, [pc, #320]	; (80045d4 <HAL_RCC_ClockConfig+0x1c4>)
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	689b      	ldr	r3, [r3, #8]
 800449c:	494d      	ldr	r1, [pc, #308]	; (80045d4 <HAL_RCC_ClockConfig+0x1c4>)
 800449e:	4313      	orrs	r3, r2
 80044a0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f003 0301 	and.w	r3, r3, #1
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d040      	beq.n	8004530 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	685b      	ldr	r3, [r3, #4]
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d107      	bne.n	80044c6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044b6:	4b47      	ldr	r3, [pc, #284]	; (80045d4 <HAL_RCC_ClockConfig+0x1c4>)
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d115      	bne.n	80044ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044c2:	2301      	movs	r3, #1
 80044c4:	e07f      	b.n	80045c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	685b      	ldr	r3, [r3, #4]
 80044ca:	2b02      	cmp	r3, #2
 80044cc:	d107      	bne.n	80044de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044ce:	4b41      	ldr	r3, [pc, #260]	; (80045d4 <HAL_RCC_ClockConfig+0x1c4>)
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d109      	bne.n	80044ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	e073      	b.n	80045c6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044de:	4b3d      	ldr	r3, [pc, #244]	; (80045d4 <HAL_RCC_ClockConfig+0x1c4>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	f003 0302 	and.w	r3, r3, #2
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e06b      	b.n	80045c6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80044ee:	4b39      	ldr	r3, [pc, #228]	; (80045d4 <HAL_RCC_ClockConfig+0x1c4>)
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	f023 0203 	bic.w	r2, r3, #3
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	685b      	ldr	r3, [r3, #4]
 80044fa:	4936      	ldr	r1, [pc, #216]	; (80045d4 <HAL_RCC_ClockConfig+0x1c4>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004500:	f7fe ff6e 	bl	80033e0 <HAL_GetTick>
 8004504:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004506:	e00a      	b.n	800451e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004508:	f7fe ff6a 	bl	80033e0 <HAL_GetTick>
 800450c:	4602      	mov	r2, r0
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	1ad3      	subs	r3, r2, r3
 8004512:	f241 3288 	movw	r2, #5000	; 0x1388
 8004516:	4293      	cmp	r3, r2
 8004518:	d901      	bls.n	800451e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800451a:	2303      	movs	r3, #3
 800451c:	e053      	b.n	80045c6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800451e:	4b2d      	ldr	r3, [pc, #180]	; (80045d4 <HAL_RCC_ClockConfig+0x1c4>)
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	f003 020c 	and.w	r2, r3, #12
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	429a      	cmp	r2, r3
 800452e:	d1eb      	bne.n	8004508 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004530:	4b27      	ldr	r3, [pc, #156]	; (80045d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f003 0307 	and.w	r3, r3, #7
 8004538:	683a      	ldr	r2, [r7, #0]
 800453a:	429a      	cmp	r2, r3
 800453c:	d210      	bcs.n	8004560 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800453e:	4b24      	ldr	r3, [pc, #144]	; (80045d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f023 0207 	bic.w	r2, r3, #7
 8004546:	4922      	ldr	r1, [pc, #136]	; (80045d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	4313      	orrs	r3, r2
 800454c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800454e:	4b20      	ldr	r3, [pc, #128]	; (80045d0 <HAL_RCC_ClockConfig+0x1c0>)
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	f003 0307 	and.w	r3, r3, #7
 8004556:	683a      	ldr	r2, [r7, #0]
 8004558:	429a      	cmp	r2, r3
 800455a:	d001      	beq.n	8004560 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e032      	b.n	80045c6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	f003 0304 	and.w	r3, r3, #4
 8004568:	2b00      	cmp	r3, #0
 800456a:	d008      	beq.n	800457e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800456c:	4b19      	ldr	r3, [pc, #100]	; (80045d4 <HAL_RCC_ClockConfig+0x1c4>)
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	68db      	ldr	r3, [r3, #12]
 8004578:	4916      	ldr	r1, [pc, #88]	; (80045d4 <HAL_RCC_ClockConfig+0x1c4>)
 800457a:	4313      	orrs	r3, r2
 800457c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0308 	and.w	r3, r3, #8
 8004586:	2b00      	cmp	r3, #0
 8004588:	d009      	beq.n	800459e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800458a:	4b12      	ldr	r3, [pc, #72]	; (80045d4 <HAL_RCC_ClockConfig+0x1c4>)
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	00db      	lsls	r3, r3, #3
 8004598:	490e      	ldr	r1, [pc, #56]	; (80045d4 <HAL_RCC_ClockConfig+0x1c4>)
 800459a:	4313      	orrs	r3, r2
 800459c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800459e:	f000 f821 	bl	80045e4 <HAL_RCC_GetSysClockFreq>
 80045a2:	4602      	mov	r2, r0
 80045a4:	4b0b      	ldr	r3, [pc, #44]	; (80045d4 <HAL_RCC_ClockConfig+0x1c4>)
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	091b      	lsrs	r3, r3, #4
 80045aa:	f003 030f 	and.w	r3, r3, #15
 80045ae:	490a      	ldr	r1, [pc, #40]	; (80045d8 <HAL_RCC_ClockConfig+0x1c8>)
 80045b0:	5ccb      	ldrb	r3, [r1, r3]
 80045b2:	fa22 f303 	lsr.w	r3, r2, r3
 80045b6:	4a09      	ldr	r2, [pc, #36]	; (80045dc <HAL_RCC_ClockConfig+0x1cc>)
 80045b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80045ba:	4b09      	ldr	r3, [pc, #36]	; (80045e0 <HAL_RCC_ClockConfig+0x1d0>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	4618      	mov	r0, r3
 80045c0:	f7fe fecc 	bl	800335c <HAL_InitTick>

  return HAL_OK;
 80045c4:	2300      	movs	r3, #0
}
 80045c6:	4618      	mov	r0, r3
 80045c8:	3710      	adds	r7, #16
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	40022000 	.word	0x40022000
 80045d4:	40021000 	.word	0x40021000
 80045d8:	08005d84 	.word	0x08005d84
 80045dc:	20000014 	.word	0x20000014
 80045e0:	20000018 	.word	0x20000018

080045e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045e4:	b480      	push	{r7}
 80045e6:	b087      	sub	sp, #28
 80045e8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80045ea:	2300      	movs	r3, #0
 80045ec:	60fb      	str	r3, [r7, #12]
 80045ee:	2300      	movs	r3, #0
 80045f0:	60bb      	str	r3, [r7, #8]
 80045f2:	2300      	movs	r3, #0
 80045f4:	617b      	str	r3, [r7, #20]
 80045f6:	2300      	movs	r3, #0
 80045f8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80045fa:	2300      	movs	r3, #0
 80045fc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80045fe:	4b1e      	ldr	r3, [pc, #120]	; (8004678 <HAL_RCC_GetSysClockFreq+0x94>)
 8004600:	685b      	ldr	r3, [r3, #4]
 8004602:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	f003 030c 	and.w	r3, r3, #12
 800460a:	2b04      	cmp	r3, #4
 800460c:	d002      	beq.n	8004614 <HAL_RCC_GetSysClockFreq+0x30>
 800460e:	2b08      	cmp	r3, #8
 8004610:	d003      	beq.n	800461a <HAL_RCC_GetSysClockFreq+0x36>
 8004612:	e027      	b.n	8004664 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004614:	4b19      	ldr	r3, [pc, #100]	; (800467c <HAL_RCC_GetSysClockFreq+0x98>)
 8004616:	613b      	str	r3, [r7, #16]
      break;
 8004618:	e027      	b.n	800466a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	0c9b      	lsrs	r3, r3, #18
 800461e:	f003 030f 	and.w	r3, r3, #15
 8004622:	4a17      	ldr	r2, [pc, #92]	; (8004680 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004624:	5cd3      	ldrb	r3, [r2, r3]
 8004626:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800462e:	2b00      	cmp	r3, #0
 8004630:	d010      	beq.n	8004654 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004632:	4b11      	ldr	r3, [pc, #68]	; (8004678 <HAL_RCC_GetSysClockFreq+0x94>)
 8004634:	685b      	ldr	r3, [r3, #4]
 8004636:	0c5b      	lsrs	r3, r3, #17
 8004638:	f003 0301 	and.w	r3, r3, #1
 800463c:	4a11      	ldr	r2, [pc, #68]	; (8004684 <HAL_RCC_GetSysClockFreq+0xa0>)
 800463e:	5cd3      	ldrb	r3, [r2, r3]
 8004640:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a0d      	ldr	r2, [pc, #52]	; (800467c <HAL_RCC_GetSysClockFreq+0x98>)
 8004646:	fb03 f202 	mul.w	r2, r3, r2
 800464a:	68bb      	ldr	r3, [r7, #8]
 800464c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004650:	617b      	str	r3, [r7, #20]
 8004652:	e004      	b.n	800465e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a0c      	ldr	r2, [pc, #48]	; (8004688 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004658:	fb02 f303 	mul.w	r3, r2, r3
 800465c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800465e:	697b      	ldr	r3, [r7, #20]
 8004660:	613b      	str	r3, [r7, #16]
      break;
 8004662:	e002      	b.n	800466a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004664:	4b05      	ldr	r3, [pc, #20]	; (800467c <HAL_RCC_GetSysClockFreq+0x98>)
 8004666:	613b      	str	r3, [r7, #16]
      break;
 8004668:	bf00      	nop
    }
  }
  return sysclockfreq;
 800466a:	693b      	ldr	r3, [r7, #16]
}
 800466c:	4618      	mov	r0, r3
 800466e:	371c      	adds	r7, #28
 8004670:	46bd      	mov	sp, r7
 8004672:	bc80      	pop	{r7}
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	40021000 	.word	0x40021000
 800467c:	007a1200 	.word	0x007a1200
 8004680:	08005d9c 	.word	0x08005d9c
 8004684:	08005dac 	.word	0x08005dac
 8004688:	003d0900 	.word	0x003d0900

0800468c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800468c:	b480      	push	{r7}
 800468e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004690:	4b02      	ldr	r3, [pc, #8]	; (800469c <HAL_RCC_GetHCLKFreq+0x10>)
 8004692:	681b      	ldr	r3, [r3, #0]
}
 8004694:	4618      	mov	r0, r3
 8004696:	46bd      	mov	sp, r7
 8004698:	bc80      	pop	{r7}
 800469a:	4770      	bx	lr
 800469c:	20000014 	.word	0x20000014

080046a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046a0:	b580      	push	{r7, lr}
 80046a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80046a4:	f7ff fff2 	bl	800468c <HAL_RCC_GetHCLKFreq>
 80046a8:	4602      	mov	r2, r0
 80046aa:	4b05      	ldr	r3, [pc, #20]	; (80046c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	0a1b      	lsrs	r3, r3, #8
 80046b0:	f003 0307 	and.w	r3, r3, #7
 80046b4:	4903      	ldr	r1, [pc, #12]	; (80046c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80046b6:	5ccb      	ldrb	r3, [r1, r3]
 80046b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046bc:	4618      	mov	r0, r3
 80046be:	bd80      	pop	{r7, pc}
 80046c0:	40021000 	.word	0x40021000
 80046c4:	08005d94 	.word	0x08005d94

080046c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80046cc:	f7ff ffde 	bl	800468c <HAL_RCC_GetHCLKFreq>
 80046d0:	4602      	mov	r2, r0
 80046d2:	4b05      	ldr	r3, [pc, #20]	; (80046e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80046d4:	685b      	ldr	r3, [r3, #4]
 80046d6:	0adb      	lsrs	r3, r3, #11
 80046d8:	f003 0307 	and.w	r3, r3, #7
 80046dc:	4903      	ldr	r1, [pc, #12]	; (80046ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80046de:	5ccb      	ldrb	r3, [r1, r3]
 80046e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	bd80      	pop	{r7, pc}
 80046e8:	40021000 	.word	0x40021000
 80046ec:	08005d94 	.word	0x08005d94

080046f0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80046f0:	b480      	push	{r7}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80046f8:	4b0a      	ldr	r3, [pc, #40]	; (8004724 <RCC_Delay+0x34>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4a0a      	ldr	r2, [pc, #40]	; (8004728 <RCC_Delay+0x38>)
 80046fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004702:	0a5b      	lsrs	r3, r3, #9
 8004704:	687a      	ldr	r2, [r7, #4]
 8004706:	fb02 f303 	mul.w	r3, r2, r3
 800470a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800470c:	bf00      	nop
  }
  while (Delay --);
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	1e5a      	subs	r2, r3, #1
 8004712:	60fa      	str	r2, [r7, #12]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d1f9      	bne.n	800470c <RCC_Delay+0x1c>
}
 8004718:	bf00      	nop
 800471a:	bf00      	nop
 800471c:	3714      	adds	r7, #20
 800471e:	46bd      	mov	sp, r7
 8004720:	bc80      	pop	{r7}
 8004722:	4770      	bx	lr
 8004724:	20000014 	.word	0x20000014
 8004728:	10624dd3 	.word	0x10624dd3

0800472c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b082      	sub	sp, #8
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	2b00      	cmp	r3, #0
 8004738:	d101      	bne.n	800473e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800473a:	2301      	movs	r3, #1
 800473c:	e042      	b.n	80047c4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004744:	b2db      	uxtb	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d106      	bne.n	8004758 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	2200      	movs	r2, #0
 800474e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f7fe fc8c 	bl	8003070 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2224      	movs	r2, #36	; 0x24
 800475c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	68da      	ldr	r2, [r3, #12]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800476e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004770:	6878      	ldr	r0, [r7, #4]
 8004772:	f000 ff2f 	bl	80055d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	691a      	ldr	r2, [r3, #16]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004784:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	695a      	ldr	r2, [r3, #20]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004794:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	68da      	ldr	r2, [r3, #12]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2220      	movs	r2, #32
 80047b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2220      	movs	r2, #32
 80047b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2200      	movs	r2, #0
 80047c0:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80047c2:	2300      	movs	r3, #0
}
 80047c4:	4618      	mov	r0, r3
 80047c6:	3708      	adds	r7, #8
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}

080047cc <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b08c      	sub	sp, #48	; 0x30
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	60f8      	str	r0, [r7, #12]
 80047d4:	60b9      	str	r1, [r7, #8]
 80047d6:	4613      	mov	r3, r2
 80047d8:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	2b20      	cmp	r3, #32
 80047e4:	d156      	bne.n	8004894 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d002      	beq.n	80047f2 <HAL_UART_Transmit_DMA+0x26>
 80047ec:	88fb      	ldrh	r3, [r7, #6]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d101      	bne.n	80047f6 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80047f2:	2301      	movs	r3, #1
 80047f4:	e04f      	b.n	8004896 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 80047f6:	68ba      	ldr	r2, [r7, #8]
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	88fa      	ldrh	r2, [r7, #6]
 8004800:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	88fa      	ldrh	r2, [r7, #6]
 8004806:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2221      	movs	r2, #33	; 0x21
 8004812:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800481a:	4a21      	ldr	r2, [pc, #132]	; (80048a0 <HAL_UART_Transmit_DMA+0xd4>)
 800481c:	629a      	str	r2, [r3, #40]	; 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004822:	4a20      	ldr	r2, [pc, #128]	; (80048a4 <HAL_UART_Transmit_DMA+0xd8>)
 8004824:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800482a:	4a1f      	ldr	r2, [pc, #124]	; (80048a8 <HAL_UART_Transmit_DMA+0xdc>)
 800482c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004832:	2200      	movs	r2, #0
 8004834:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the UART transmit DMA channel */
    tmp = (const uint32_t *)&pData;
 8004836:	f107 0308 	add.w	r3, r7, #8
 800483a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8004840:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004842:	6819      	ldr	r1, [r3, #0]
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	3304      	adds	r3, #4
 800484a:	461a      	mov	r2, r3
 800484c:	88fb      	ldrh	r3, [r7, #6]
 800484e:	f7fe ff39 	bl	80036c4 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800485a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	3314      	adds	r3, #20
 8004862:	61bb      	str	r3, [r7, #24]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004864:	69bb      	ldr	r3, [r7, #24]
 8004866:	e853 3f00 	ldrex	r3, [r3]
 800486a:	617b      	str	r3, [r7, #20]
   return(result);
 800486c:	697b      	ldr	r3, [r7, #20]
 800486e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004872:	62bb      	str	r3, [r7, #40]	; 0x28
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	3314      	adds	r3, #20
 800487a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800487c:	627a      	str	r2, [r7, #36]	; 0x24
 800487e:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004880:	6a39      	ldr	r1, [r7, #32]
 8004882:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004884:	e841 2300 	strex	r3, r2, [r1]
 8004888:	61fb      	str	r3, [r7, #28]
   return(result);
 800488a:	69fb      	ldr	r3, [r7, #28]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d1e5      	bne.n	800485c <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 8004890:	2300      	movs	r3, #0
 8004892:	e000      	b.n	8004896 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 8004894:	2302      	movs	r3, #2
  }
}
 8004896:	4618      	mov	r0, r3
 8004898:	3730      	adds	r7, #48	; 0x30
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
 800489e:	bf00      	nop
 80048a0:	08004e69 	.word	0x08004e69
 80048a4:	08004f03 	.word	0x08004f03
 80048a8:	08005087 	.word	0x08005087

080048ac <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b084      	sub	sp, #16
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	4613      	mov	r3, r2
 80048b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80048c0:	b2db      	uxtb	r3, r3
 80048c2:	2b20      	cmp	r3, #32
 80048c4:	d112      	bne.n	80048ec <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80048c6:	68bb      	ldr	r3, [r7, #8]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d002      	beq.n	80048d2 <HAL_UART_Receive_DMA+0x26>
 80048cc:	88fb      	ldrh	r3, [r7, #6]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d101      	bne.n	80048d6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80048d2:	2301      	movs	r3, #1
 80048d4:	e00b      	b.n	80048ee <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2200      	movs	r2, #0
 80048da:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 80048dc:	88fb      	ldrh	r3, [r7, #6]
 80048de:	461a      	mov	r2, r3
 80048e0:	68b9      	ldr	r1, [r7, #8]
 80048e2:	68f8      	ldr	r0, [r7, #12]
 80048e4:	f000 fc1a 	bl	800511c <UART_Start_Receive_DMA>
 80048e8:	4603      	mov	r3, r0
 80048ea:	e000      	b.n	80048ee <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 80048ec:	2302      	movs	r3, #2
  }
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3710      	adds	r7, #16
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
	...

080048f8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b0ba      	sub	sp, #232	; 0xe8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	68db      	ldr	r3, [r3, #12]
 8004910:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800491e:	2300      	movs	r3, #0
 8004920:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004924:	2300      	movs	r3, #0
 8004926:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800492a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800492e:	f003 030f 	and.w	r3, r3, #15
 8004932:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004936:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800493a:	2b00      	cmp	r3, #0
 800493c:	d10f      	bne.n	800495e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800493e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004942:	f003 0320 	and.w	r3, r3, #32
 8004946:	2b00      	cmp	r3, #0
 8004948:	d009      	beq.n	800495e <HAL_UART_IRQHandler+0x66>
 800494a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800494e:	f003 0320 	and.w	r3, r3, #32
 8004952:	2b00      	cmp	r3, #0
 8004954:	d003      	beq.n	800495e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 fd7e 	bl	8005458 <UART_Receive_IT>
      return;
 800495c:	e25b      	b.n	8004e16 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800495e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004962:	2b00      	cmp	r3, #0
 8004964:	f000 80de 	beq.w	8004b24 <HAL_UART_IRQHandler+0x22c>
 8004968:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800496c:	f003 0301 	and.w	r3, r3, #1
 8004970:	2b00      	cmp	r3, #0
 8004972:	d106      	bne.n	8004982 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004974:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004978:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800497c:	2b00      	cmp	r3, #0
 800497e:	f000 80d1 	beq.w	8004b24 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004982:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004986:	f003 0301 	and.w	r3, r3, #1
 800498a:	2b00      	cmp	r3, #0
 800498c:	d00b      	beq.n	80049a6 <HAL_UART_IRQHandler+0xae>
 800498e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004992:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004996:	2b00      	cmp	r3, #0
 8004998:	d005      	beq.n	80049a6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800499e:	f043 0201 	orr.w	r2, r3, #1
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049aa:	f003 0304 	and.w	r3, r3, #4
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00b      	beq.n	80049ca <HAL_UART_IRQHandler+0xd2>
 80049b2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049b6:	f003 0301 	and.w	r3, r3, #1
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d005      	beq.n	80049ca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049c2:	f043 0202 	orr.w	r2, r3, #2
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80049ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d00b      	beq.n	80049ee <HAL_UART_IRQHandler+0xf6>
 80049d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80049da:	f003 0301 	and.w	r3, r3, #1
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d005      	beq.n	80049ee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049e6:	f043 0204 	orr.w	r2, r3, #4
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80049ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049f2:	f003 0308 	and.w	r3, r3, #8
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d011      	beq.n	8004a1e <HAL_UART_IRQHandler+0x126>
 80049fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80049fe:	f003 0320 	and.w	r3, r3, #32
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d105      	bne.n	8004a12 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004a06:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004a0a:	f003 0301 	and.w	r3, r3, #1
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d005      	beq.n	8004a1e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a16:	f043 0208 	orr.w	r2, r3, #8
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	f000 81f2 	beq.w	8004e0c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a2c:	f003 0320 	and.w	r3, r3, #32
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d008      	beq.n	8004a46 <HAL_UART_IRQHandler+0x14e>
 8004a34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a38:	f003 0320 	and.w	r3, r3, #32
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d002      	beq.n	8004a46 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004a40:	6878      	ldr	r0, [r7, #4]
 8004a42:	f000 fd09 	bl	8005458 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	695b      	ldr	r3, [r3, #20]
 8004a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	bf14      	ite	ne
 8004a54:	2301      	movne	r3, #1
 8004a56:	2300      	moveq	r3, #0
 8004a58:	b2db      	uxtb	r3, r3
 8004a5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a62:	f003 0308 	and.w	r3, r3, #8
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d103      	bne.n	8004a72 <HAL_UART_IRQHandler+0x17a>
 8004a6a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d04f      	beq.n	8004b12 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 fc13 	bl	800529e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	695b      	ldr	r3, [r3, #20]
 8004a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d041      	beq.n	8004b0a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	3314      	adds	r3, #20
 8004a8c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a90:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004a94:	e853 3f00 	ldrex	r3, [r3]
 8004a98:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004a9c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004aa0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004aa4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	3314      	adds	r3, #20
 8004aae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004ab2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004ab6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004abe:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004ac2:	e841 2300 	strex	r3, r2, [r1]
 8004ac6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004aca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d1d9      	bne.n	8004a86 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d013      	beq.n	8004b02 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ade:	4a7e      	ldr	r2, [pc, #504]	; (8004cd8 <HAL_UART_IRQHandler+0x3e0>)
 8004ae0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ae6:	4618      	mov	r0, r3
 8004ae8:	f7fe fe88 	bl	80037fc <HAL_DMA_Abort_IT>
 8004aec:	4603      	mov	r3, r0
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d016      	beq.n	8004b20 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004afc:	4610      	mov	r0, r2
 8004afe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b00:	e00e      	b.n	8004b20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004b02:	6878      	ldr	r0, [r7, #4]
 8004b04:	f000 f99c 	bl	8004e40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b08:	e00a      	b.n	8004b20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f000 f998 	bl	8004e40 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b10:	e006      	b.n	8004b20 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f000 f994 	bl	8004e40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004b1e:	e175      	b.n	8004e0c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b20:	bf00      	nop
    return;
 8004b22:	e173      	b.n	8004e0c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b28:	2b01      	cmp	r3, #1
 8004b2a:	f040 814f 	bne.w	8004dcc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b32:	f003 0310 	and.w	r3, r3, #16
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	f000 8148 	beq.w	8004dcc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004b3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b40:	f003 0310 	and.w	r3, r3, #16
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	f000 8141 	beq.w	8004dcc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	60bb      	str	r3, [r7, #8]
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	60bb      	str	r3, [r7, #8]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	60bb      	str	r3, [r7, #8]
 8004b5e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	695b      	ldr	r3, [r3, #20]
 8004b66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	f000 80b6 	beq.w	8004cdc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004b7c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	f000 8145 	beq.w	8004e10 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004b8a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	f080 813e 	bcs.w	8004e10 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004b9a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ba0:	699b      	ldr	r3, [r3, #24]
 8004ba2:	2b20      	cmp	r3, #32
 8004ba4:	f000 8088 	beq.w	8004cb8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	330c      	adds	r3, #12
 8004bae:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004bb6:	e853 3f00 	ldrex	r3, [r3]
 8004bba:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004bbe:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004bc2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bc6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	330c      	adds	r3, #12
 8004bd0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004bd4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004bd8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bdc:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004be0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004be4:	e841 2300 	strex	r3, r2, [r1]
 8004be8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004bec:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d1d9      	bne.n	8004ba8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	3314      	adds	r3, #20
 8004bfa:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bfc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bfe:	e853 3f00 	ldrex	r3, [r3]
 8004c02:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004c04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004c06:	f023 0301 	bic.w	r3, r3, #1
 8004c0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	3314      	adds	r3, #20
 8004c14:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004c18:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004c1c:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c1e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004c20:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004c24:	e841 2300 	strex	r3, r2, [r1]
 8004c28:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004c2a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d1e1      	bne.n	8004bf4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	3314      	adds	r3, #20
 8004c36:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004c3a:	e853 3f00 	ldrex	r3, [r3]
 8004c3e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004c40:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c42:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c46:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	3314      	adds	r3, #20
 8004c50:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004c54:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004c56:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c58:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004c5a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004c5c:	e841 2300 	strex	r3, r2, [r1]
 8004c60:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004c62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d1e3      	bne.n	8004c30 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	2220      	movs	r2, #32
 8004c6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	330c      	adds	r3, #12
 8004c7c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c80:	e853 3f00 	ldrex	r3, [r3]
 8004c84:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004c86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c88:	f023 0310 	bic.w	r3, r3, #16
 8004c8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	330c      	adds	r3, #12
 8004c96:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004c9a:	65ba      	str	r2, [r7, #88]	; 0x58
 8004c9c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c9e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004ca0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004ca2:	e841 2300 	strex	r3, r2, [r1]
 8004ca6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004ca8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1e3      	bne.n	8004c76 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cb2:	4618      	mov	r0, r3
 8004cb4:	f7fe fd66 	bl	8003784 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	2202      	movs	r2, #2
 8004cbc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cc6:	b29b      	uxth	r3, r3
 8004cc8:	1ad3      	subs	r3, r2, r3
 8004cca:	b29b      	uxth	r3, r3
 8004ccc:	4619      	mov	r1, r3
 8004cce:	6878      	ldr	r0, [r7, #4]
 8004cd0:	f000 f8bf 	bl	8004e52 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004cd4:	e09c      	b.n	8004e10 <HAL_UART_IRQHandler+0x518>
 8004cd6:	bf00      	nop
 8004cd8:	08005363 	.word	0x08005363
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	1ad3      	subs	r3, r2, r3
 8004ce8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	f000 808e 	beq.w	8004e14 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004cf8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	f000 8089 	beq.w	8004e14 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	330c      	adds	r3, #12
 8004d08:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d0c:	e853 3f00 	ldrex	r3, [r3]
 8004d10:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004d12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d14:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004d18:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	330c      	adds	r3, #12
 8004d22:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004d26:	647a      	str	r2, [r7, #68]	; 0x44
 8004d28:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d2a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004d2c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004d2e:	e841 2300 	strex	r3, r2, [r1]
 8004d32:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1e3      	bne.n	8004d02 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	3314      	adds	r3, #20
 8004d40:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d44:	e853 3f00 	ldrex	r3, [r3]
 8004d48:	623b      	str	r3, [r7, #32]
   return(result);
 8004d4a:	6a3b      	ldr	r3, [r7, #32]
 8004d4c:	f023 0301 	bic.w	r3, r3, #1
 8004d50:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	3314      	adds	r3, #20
 8004d5a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004d5e:	633a      	str	r2, [r7, #48]	; 0x30
 8004d60:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004d64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d66:	e841 2300 	strex	r3, r2, [r1]
 8004d6a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d1e3      	bne.n	8004d3a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2220      	movs	r2, #32
 8004d76:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	330c      	adds	r3, #12
 8004d86:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d88:	693b      	ldr	r3, [r7, #16]
 8004d8a:	e853 3f00 	ldrex	r3, [r3]
 8004d8e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	f023 0310 	bic.w	r3, r3, #16
 8004d96:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	330c      	adds	r3, #12
 8004da0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004da4:	61fa      	str	r2, [r7, #28]
 8004da6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da8:	69b9      	ldr	r1, [r7, #24]
 8004daa:	69fa      	ldr	r2, [r7, #28]
 8004dac:	e841 2300 	strex	r3, r2, [r1]
 8004db0:	617b      	str	r3, [r7, #20]
   return(result);
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d1e3      	bne.n	8004d80 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2202      	movs	r2, #2
 8004dbc:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004dbe:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004dc2:	4619      	mov	r1, r3
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f000 f844 	bl	8004e52 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004dca:	e023      	b.n	8004e14 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004dcc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dd0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d009      	beq.n	8004dec <HAL_UART_IRQHandler+0x4f4>
 8004dd8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ddc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d003      	beq.n	8004dec <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004de4:	6878      	ldr	r0, [r7, #4]
 8004de6:	f000 fad0 	bl	800538a <UART_Transmit_IT>
    return;
 8004dea:	e014      	b.n	8004e16 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004dec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00e      	beq.n	8004e16 <HAL_UART_IRQHandler+0x51e>
 8004df8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004dfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d008      	beq.n	8004e16 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 fb0f 	bl	8005428 <UART_EndTransmit_IT>
    return;
 8004e0a:	e004      	b.n	8004e16 <HAL_UART_IRQHandler+0x51e>
    return;
 8004e0c:	bf00      	nop
 8004e0e:	e002      	b.n	8004e16 <HAL_UART_IRQHandler+0x51e>
      return;
 8004e10:	bf00      	nop
 8004e12:	e000      	b.n	8004e16 <HAL_UART_IRQHandler+0x51e>
      return;
 8004e14:	bf00      	nop
  }
}
 8004e16:	37e8      	adds	r7, #232	; 0xe8
 8004e18:	46bd      	mov	sp, r7
 8004e1a:	bd80      	pop	{r7, pc}

08004e1c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004e1c:	b480      	push	{r7}
 8004e1e:	b083      	sub	sp, #12
 8004e20:	af00      	add	r7, sp, #0
 8004e22:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8004e24:	bf00      	nop
 8004e26:	370c      	adds	r7, #12
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	bc80      	pop	{r7}
 8004e2c:	4770      	bx	lr

08004e2e <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004e2e:	b480      	push	{r7}
 8004e30:	b083      	sub	sp, #12
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8004e36:	bf00      	nop
 8004e38:	370c      	adds	r7, #12
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bc80      	pop	{r7}
 8004e3e:	4770      	bx	lr

08004e40 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004e48:	bf00      	nop
 8004e4a:	370c      	adds	r7, #12
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	bc80      	pop	{r7}
 8004e50:	4770      	bx	lr

08004e52 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004e52:	b480      	push	{r7}
 8004e54:	b083      	sub	sp, #12
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
 8004e5a:	460b      	mov	r3, r1
 8004e5c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004e5e:	bf00      	nop
 8004e60:	370c      	adds	r7, #12
 8004e62:	46bd      	mov	sp, r7
 8004e64:	bc80      	pop	{r7}
 8004e66:	4770      	bx	lr

08004e68 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b090      	sub	sp, #64	; 0x40
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e74:	63fb      	str	r3, [r7, #60]	; 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f003 0320 	and.w	r3, r3, #32
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d137      	bne.n	8004ef4 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8004e84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e86:	2200      	movs	r2, #0
 8004e88:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8004e8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	3314      	adds	r3, #20
 8004e90:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e94:	e853 3f00 	ldrex	r3, [r3]
 8004e98:	623b      	str	r3, [r7, #32]
   return(result);
 8004e9a:	6a3b      	ldr	r3, [r7, #32]
 8004e9c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ea0:	63bb      	str	r3, [r7, #56]	; 0x38
 8004ea2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	3314      	adds	r3, #20
 8004ea8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004eaa:	633a      	str	r2, [r7, #48]	; 0x30
 8004eac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004eb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004eb2:	e841 2300 	strex	r3, r2, [r1]
 8004eb6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d1e5      	bne.n	8004e8a <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	330c      	adds	r3, #12
 8004ec4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	e853 3f00 	ldrex	r3, [r3]
 8004ecc:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004ed4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ed6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	330c      	adds	r3, #12
 8004edc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004ede:	61fa      	str	r2, [r7, #28]
 8004ee0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee2:	69b9      	ldr	r1, [r7, #24]
 8004ee4:	69fa      	ldr	r2, [r7, #28]
 8004ee6:	e841 2300 	strex	r3, r2, [r1]
 8004eea:	617b      	str	r3, [r7, #20]
   return(result);
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d1e5      	bne.n	8004ebe <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004ef2:	e002      	b.n	8004efa <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8004ef4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8004ef6:	f7fd f98f 	bl	8002218 <HAL_UART_TxCpltCallback>
}
 8004efa:	bf00      	nop
 8004efc:	3740      	adds	r7, #64	; 0x40
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}

08004f02 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004f02:	b580      	push	{r7, lr}
 8004f04:	b084      	sub	sp, #16
 8004f06:	af00      	add	r7, sp, #0
 8004f08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f0e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8004f10:	68f8      	ldr	r0, [r7, #12]
 8004f12:	f7ff ff83 	bl	8004e1c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f16:	bf00      	nop
 8004f18:	3710      	adds	r7, #16
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	bd80      	pop	{r7, pc}

08004f1e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004f1e:	b580      	push	{r7, lr}
 8004f20:	b09c      	sub	sp, #112	; 0x70
 8004f22:	af00      	add	r7, sp, #0
 8004f24:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f2a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f003 0320 	and.w	r3, r3, #32
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d172      	bne.n	8005020 <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8004f3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f3c:	2200      	movs	r2, #0
 8004f3e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004f40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	330c      	adds	r3, #12
 8004f46:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f4a:	e853 3f00 	ldrex	r3, [r3]
 8004f4e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004f50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f52:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f56:	66bb      	str	r3, [r7, #104]	; 0x68
 8004f58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	330c      	adds	r3, #12
 8004f5e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004f60:	65ba      	str	r2, [r7, #88]	; 0x58
 8004f62:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f64:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004f66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f68:	e841 2300 	strex	r3, r2, [r1]
 8004f6c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004f6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d1e5      	bne.n	8004f40 <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	3314      	adds	r3, #20
 8004f7a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f7e:	e853 3f00 	ldrex	r3, [r3]
 8004f82:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004f84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f86:	f023 0301 	bic.w	r3, r3, #1
 8004f8a:	667b      	str	r3, [r7, #100]	; 0x64
 8004f8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	3314      	adds	r3, #20
 8004f92:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004f94:	647a      	str	r2, [r7, #68]	; 0x44
 8004f96:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f98:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004f9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f9c:	e841 2300 	strex	r3, r2, [r1]
 8004fa0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004fa2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d1e5      	bne.n	8004f74 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004fa8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	3314      	adds	r3, #20
 8004fae:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fb2:	e853 3f00 	ldrex	r3, [r3]
 8004fb6:	623b      	str	r3, [r7, #32]
   return(result);
 8004fb8:	6a3b      	ldr	r3, [r7, #32]
 8004fba:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004fbe:	663b      	str	r3, [r7, #96]	; 0x60
 8004fc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	3314      	adds	r3, #20
 8004fc6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004fc8:	633a      	str	r2, [r7, #48]	; 0x30
 8004fca:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fcc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004fce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fd0:	e841 2300 	strex	r3, r2, [r1]
 8004fd4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d1e5      	bne.n	8004fa8 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004fdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fde:	2220      	movs	r2, #32
 8004fe0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004fe4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fe6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe8:	2b01      	cmp	r3, #1
 8004fea:	d119      	bne.n	8005020 <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004fec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	330c      	adds	r3, #12
 8004ff2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ff4:	693b      	ldr	r3, [r7, #16]
 8004ff6:	e853 3f00 	ldrex	r3, [r3]
 8004ffa:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f023 0310 	bic.w	r3, r3, #16
 8005002:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	330c      	adds	r3, #12
 800500a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800500c:	61fa      	str	r2, [r7, #28]
 800500e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005010:	69b9      	ldr	r1, [r7, #24]
 8005012:	69fa      	ldr	r2, [r7, #28]
 8005014:	e841 2300 	strex	r3, r2, [r1]
 8005018:	617b      	str	r3, [r7, #20]
   return(result);
 800501a:	697b      	ldr	r3, [r7, #20]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d1e5      	bne.n	8004fec <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005020:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005022:	2200      	movs	r2, #0
 8005024:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005026:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800502a:	2b01      	cmp	r3, #1
 800502c:	d106      	bne.n	800503c <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800502e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005030:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005032:	4619      	mov	r1, r3
 8005034:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005036:	f7ff ff0c 	bl	8004e52 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800503a:	e002      	b.n	8005042 <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 800503c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800503e:	f7fd f8fd 	bl	800223c <HAL_UART_RxCpltCallback>
}
 8005042:	bf00      	nop
 8005044:	3770      	adds	r7, #112	; 0x70
 8005046:	46bd      	mov	sp, r7
 8005048:	bd80      	pop	{r7, pc}

0800504a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800504a:	b580      	push	{r7, lr}
 800504c:	b084      	sub	sp, #16
 800504e:	af00      	add	r7, sp, #0
 8005050:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005056:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	2201      	movs	r2, #1
 800505c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005062:	2b01      	cmp	r3, #1
 8005064:	d108      	bne.n	8005078 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800506a:	085b      	lsrs	r3, r3, #1
 800506c:	b29b      	uxth	r3, r3
 800506e:	4619      	mov	r1, r3
 8005070:	68f8      	ldr	r0, [r7, #12]
 8005072:	f7ff feee 	bl	8004e52 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005076:	e002      	b.n	800507e <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005078:	68f8      	ldr	r0, [r7, #12]
 800507a:	f7ff fed8 	bl	8004e2e <HAL_UART_RxHalfCpltCallback>
}
 800507e:	bf00      	nop
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}

08005086 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005086:	b580      	push	{r7, lr}
 8005088:	b084      	sub	sp, #16
 800508a:	af00      	add	r7, sp, #0
 800508c:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800508e:	2300      	movs	r3, #0
 8005090:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005096:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005098:	68bb      	ldr	r3, [r7, #8]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	695b      	ldr	r3, [r3, #20]
 800509e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	bf14      	ite	ne
 80050a6:	2301      	movne	r3, #1
 80050a8:	2300      	moveq	r3, #0
 80050aa:	b2db      	uxtb	r3, r3
 80050ac:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80050ae:	68bb      	ldr	r3, [r7, #8]
 80050b0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050b4:	b2db      	uxtb	r3, r3
 80050b6:	2b21      	cmp	r3, #33	; 0x21
 80050b8:	d108      	bne.n	80050cc <UART_DMAError+0x46>
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d005      	beq.n	80050cc <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	2200      	movs	r2, #0
 80050c4:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80050c6:	68b8      	ldr	r0, [r7, #8]
 80050c8:	f000 f8c2 	bl	8005250 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	695b      	ldr	r3, [r3, #20]
 80050d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	bf14      	ite	ne
 80050da:	2301      	movne	r3, #1
 80050dc:	2300      	moveq	r3, #0
 80050de:	b2db      	uxtb	r3, r3
 80050e0:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80050e2:	68bb      	ldr	r3, [r7, #8]
 80050e4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80050e8:	b2db      	uxtb	r3, r3
 80050ea:	2b22      	cmp	r3, #34	; 0x22
 80050ec:	d108      	bne.n	8005100 <UART_DMAError+0x7a>
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d005      	beq.n	8005100 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80050f4:	68bb      	ldr	r3, [r7, #8]
 80050f6:	2200      	movs	r2, #0
 80050f8:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80050fa:	68b8      	ldr	r0, [r7, #8]
 80050fc:	f000 f8cf 	bl	800529e <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8005100:	68bb      	ldr	r3, [r7, #8]
 8005102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005104:	f043 0210 	orr.w	r2, r3, #16
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	645a      	str	r2, [r3, #68]	; 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800510c:	68b8      	ldr	r0, [r7, #8]
 800510e:	f7ff fe97 	bl	8004e40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005112:	bf00      	nop
 8005114:	3710      	adds	r7, #16
 8005116:	46bd      	mov	sp, r7
 8005118:	bd80      	pop	{r7, pc}
	...

0800511c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b098      	sub	sp, #96	; 0x60
 8005120:	af00      	add	r7, sp, #0
 8005122:	60f8      	str	r0, [r7, #12]
 8005124:	60b9      	str	r1, [r7, #8]
 8005126:	4613      	mov	r3, r2
 8005128:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800512a:	68ba      	ldr	r2, [r7, #8]
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	88fa      	ldrh	r2, [r7, #6]
 8005134:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	2200      	movs	r2, #0
 800513a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	2222      	movs	r2, #34	; 0x22
 8005140:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005148:	4a3e      	ldr	r2, [pc, #248]	; (8005244 <UART_Start_Receive_DMA+0x128>)
 800514a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005150:	4a3d      	ldr	r2, [pc, #244]	; (8005248 <UART_Start_Receive_DMA+0x12c>)
 8005152:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005158:	4a3c      	ldr	r2, [pc, #240]	; (800524c <UART_Start_Receive_DMA+0x130>)
 800515a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005160:	2200      	movs	r2, #0
 8005162:	635a      	str	r2, [r3, #52]	; 0x34

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8005164:	f107 0308 	add.w	r3, r7, #8
 8005168:	65fb      	str	r3, [r7, #92]	; 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800516a:	68fb      	ldr	r3, [r7, #12]
 800516c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	3304      	adds	r3, #4
 8005174:	4619      	mov	r1, r3
 8005176:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005178:	681a      	ldr	r2, [r3, #0]
 800517a:	88fb      	ldrh	r3, [r7, #6]
 800517c:	f7fe faa2 	bl	80036c4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8005180:	2300      	movs	r3, #0
 8005182:	613b      	str	r3, [r7, #16]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	613b      	str	r3, [r7, #16]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	685b      	ldr	r3, [r3, #4]
 8005192:	613b      	str	r3, [r7, #16]
 8005194:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	691b      	ldr	r3, [r3, #16]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d019      	beq.n	80051d2 <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	330c      	adds	r3, #12
 80051a4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051a8:	e853 3f00 	ldrex	r3, [r3]
 80051ac:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80051ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051b0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80051b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	330c      	adds	r3, #12
 80051bc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80051be:	64fa      	str	r2, [r7, #76]	; 0x4c
 80051c0:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80051c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80051c6:	e841 2300 	strex	r3, r2, [r1]
 80051ca:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80051cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d1e5      	bne.n	800519e <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051d2:	68fb      	ldr	r3, [r7, #12]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	3314      	adds	r3, #20
 80051d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051dc:	e853 3f00 	ldrex	r3, [r3]
 80051e0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80051e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e4:	f043 0301 	orr.w	r3, r3, #1
 80051e8:	657b      	str	r3, [r7, #84]	; 0x54
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	3314      	adds	r3, #20
 80051f0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80051f2:	63ba      	str	r2, [r7, #56]	; 0x38
 80051f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f6:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80051f8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051fa:	e841 2300 	strex	r3, r2, [r1]
 80051fe:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1e5      	bne.n	80051d2 <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	3314      	adds	r3, #20
 800520c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	e853 3f00 	ldrex	r3, [r3]
 8005214:	617b      	str	r3, [r7, #20]
   return(result);
 8005216:	697b      	ldr	r3, [r7, #20]
 8005218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800521c:	653b      	str	r3, [r7, #80]	; 0x50
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	3314      	adds	r3, #20
 8005224:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005226:	627a      	str	r2, [r7, #36]	; 0x24
 8005228:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522a:	6a39      	ldr	r1, [r7, #32]
 800522c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800522e:	e841 2300 	strex	r3, r2, [r1]
 8005232:	61fb      	str	r3, [r7, #28]
   return(result);
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d1e5      	bne.n	8005206 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 800523a:	2300      	movs	r3, #0
}
 800523c:	4618      	mov	r0, r3
 800523e:	3760      	adds	r7, #96	; 0x60
 8005240:	46bd      	mov	sp, r7
 8005242:	bd80      	pop	{r7, pc}
 8005244:	08004f1f 	.word	0x08004f1f
 8005248:	0800504b 	.word	0x0800504b
 800524c:	08005087 	.word	0x08005087

08005250 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8005250:	b480      	push	{r7}
 8005252:	b089      	sub	sp, #36	; 0x24
 8005254:	af00      	add	r7, sp, #0
 8005256:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	330c      	adds	r3, #12
 800525e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	e853 3f00 	ldrex	r3, [r3]
 8005266:	60bb      	str	r3, [r7, #8]
   return(result);
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800526e:	61fb      	str	r3, [r7, #28]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	330c      	adds	r3, #12
 8005276:	69fa      	ldr	r2, [r7, #28]
 8005278:	61ba      	str	r2, [r7, #24]
 800527a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800527c:	6979      	ldr	r1, [r7, #20]
 800527e:	69ba      	ldr	r2, [r7, #24]
 8005280:	e841 2300 	strex	r3, r2, [r1]
 8005284:	613b      	str	r3, [r7, #16]
   return(result);
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	2b00      	cmp	r3, #0
 800528a:	d1e5      	bne.n	8005258 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2220      	movs	r2, #32
 8005290:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
}
 8005294:	bf00      	nop
 8005296:	3724      	adds	r7, #36	; 0x24
 8005298:	46bd      	mov	sp, r7
 800529a:	bc80      	pop	{r7}
 800529c:	4770      	bx	lr

0800529e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800529e:	b480      	push	{r7}
 80052a0:	b095      	sub	sp, #84	; 0x54
 80052a2:	af00      	add	r7, sp, #0
 80052a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	330c      	adds	r3, #12
 80052ac:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052b0:	e853 3f00 	ldrex	r3, [r3]
 80052b4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80052b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052b8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	330c      	adds	r3, #12
 80052c4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80052c6:	643a      	str	r2, [r7, #64]	; 0x40
 80052c8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052ca:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80052cc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052ce:	e841 2300 	strex	r3, r2, [r1]
 80052d2:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d1e5      	bne.n	80052a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	3314      	adds	r3, #20
 80052e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052e2:	6a3b      	ldr	r3, [r7, #32]
 80052e4:	e853 3f00 	ldrex	r3, [r3]
 80052e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	f023 0301 	bic.w	r3, r3, #1
 80052f0:	64bb      	str	r3, [r7, #72]	; 0x48
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	3314      	adds	r3, #20
 80052f8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052fa:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052fc:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052fe:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005300:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005302:	e841 2300 	strex	r3, r2, [r1]
 8005306:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800530a:	2b00      	cmp	r3, #0
 800530c:	d1e5      	bne.n	80052da <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005312:	2b01      	cmp	r3, #1
 8005314:	d119      	bne.n	800534a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	330c      	adds	r3, #12
 800531c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	e853 3f00 	ldrex	r3, [r3]
 8005324:	60bb      	str	r3, [r7, #8]
   return(result);
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	f023 0310 	bic.w	r3, r3, #16
 800532c:	647b      	str	r3, [r7, #68]	; 0x44
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	330c      	adds	r3, #12
 8005334:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005336:	61ba      	str	r2, [r7, #24]
 8005338:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800533a:	6979      	ldr	r1, [r7, #20]
 800533c:	69ba      	ldr	r2, [r7, #24]
 800533e:	e841 2300 	strex	r3, r2, [r1]
 8005342:	613b      	str	r3, [r7, #16]
   return(result);
 8005344:	693b      	ldr	r3, [r7, #16]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d1e5      	bne.n	8005316 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2220      	movs	r2, #32
 800534e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	2200      	movs	r2, #0
 8005356:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005358:	bf00      	nop
 800535a:	3754      	adds	r7, #84	; 0x54
 800535c:	46bd      	mov	sp, r7
 800535e:	bc80      	pop	{r7}
 8005360:	4770      	bx	lr

08005362 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005362:	b580      	push	{r7, lr}
 8005364:	b084      	sub	sp, #16
 8005366:	af00      	add	r7, sp, #0
 8005368:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	2200      	movs	r2, #0
 8005374:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	2200      	movs	r2, #0
 800537a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800537c:	68f8      	ldr	r0, [r7, #12]
 800537e:	f7ff fd5f 	bl	8004e40 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005382:	bf00      	nop
 8005384:	3710      	adds	r7, #16
 8005386:	46bd      	mov	sp, r7
 8005388:	bd80      	pop	{r7, pc}

0800538a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800538a:	b480      	push	{r7}
 800538c:	b085      	sub	sp, #20
 800538e:	af00      	add	r7, sp, #0
 8005390:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005398:	b2db      	uxtb	r3, r3
 800539a:	2b21      	cmp	r3, #33	; 0x21
 800539c:	d13e      	bne.n	800541c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053a6:	d114      	bne.n	80053d2 <UART_Transmit_IT+0x48>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	691b      	ldr	r3, [r3, #16]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d110      	bne.n	80053d2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a1b      	ldr	r3, [r3, #32]
 80053b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	881b      	ldrh	r3, [r3, #0]
 80053ba:	461a      	mov	r2, r3
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a1b      	ldr	r3, [r3, #32]
 80053ca:	1c9a      	adds	r2, r3, #2
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	621a      	str	r2, [r3, #32]
 80053d0:	e008      	b.n	80053e4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	6a1b      	ldr	r3, [r3, #32]
 80053d6:	1c59      	adds	r1, r3, #1
 80053d8:	687a      	ldr	r2, [r7, #4]
 80053da:	6211      	str	r1, [r2, #32]
 80053dc:	781a      	ldrb	r2, [r3, #0]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053e8:	b29b      	uxth	r3, r3
 80053ea:	3b01      	subs	r3, #1
 80053ec:	b29b      	uxth	r3, r3
 80053ee:	687a      	ldr	r2, [r7, #4]
 80053f0:	4619      	mov	r1, r3
 80053f2:	84d1      	strh	r1, [r2, #38]	; 0x26
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d10f      	bne.n	8005418 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	68da      	ldr	r2, [r3, #12]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005406:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68da      	ldr	r2, [r3, #12]
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005416:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005418:	2300      	movs	r3, #0
 800541a:	e000      	b.n	800541e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800541c:	2302      	movs	r3, #2
  }
}
 800541e:	4618      	mov	r0, r3
 8005420:	3714      	adds	r7, #20
 8005422:	46bd      	mov	sp, r7
 8005424:	bc80      	pop	{r7}
 8005426:	4770      	bx	lr

08005428 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005428:	b580      	push	{r7, lr}
 800542a:	b082      	sub	sp, #8
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	68da      	ldr	r2, [r3, #12]
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800543e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2220      	movs	r2, #32
 8005444:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005448:	6878      	ldr	r0, [r7, #4]
 800544a:	f7fc fee5 	bl	8002218 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800544e:	2300      	movs	r3, #0
}
 8005450:	4618      	mov	r0, r3
 8005452:	3708      	adds	r7, #8
 8005454:	46bd      	mov	sp, r7
 8005456:	bd80      	pop	{r7, pc}

08005458 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b08c      	sub	sp, #48	; 0x30
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005466:	b2db      	uxtb	r3, r3
 8005468:	2b22      	cmp	r3, #34	; 0x22
 800546a:	f040 80ae 	bne.w	80055ca <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005476:	d117      	bne.n	80054a8 <UART_Receive_IT+0x50>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	691b      	ldr	r3, [r3, #16]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d113      	bne.n	80054a8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005480:	2300      	movs	r3, #0
 8005482:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005488:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	685b      	ldr	r3, [r3, #4]
 8005490:	b29b      	uxth	r3, r3
 8005492:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005496:	b29a      	uxth	r2, r3
 8005498:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800549a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a0:	1c9a      	adds	r2, r3, #2
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	629a      	str	r2, [r3, #40]	; 0x28
 80054a6:	e026      	b.n	80054f6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80054ae:	2300      	movs	r3, #0
 80054b0:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ba:	d007      	beq.n	80054cc <UART_Receive_IT+0x74>
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	689b      	ldr	r3, [r3, #8]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d10a      	bne.n	80054da <UART_Receive_IT+0x82>
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	691b      	ldr	r3, [r3, #16]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d106      	bne.n	80054da <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	b2da      	uxtb	r2, r3
 80054d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054d6:	701a      	strb	r2, [r3, #0]
 80054d8:	e008      	b.n	80054ec <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	685b      	ldr	r3, [r3, #4]
 80054e0:	b2db      	uxtb	r3, r3
 80054e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054e6:	b2da      	uxtb	r2, r3
 80054e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ea:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054f0:	1c5a      	adds	r2, r3, #1
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054fa:	b29b      	uxth	r3, r3
 80054fc:	3b01      	subs	r3, #1
 80054fe:	b29b      	uxth	r3, r3
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	4619      	mov	r1, r3
 8005504:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005506:	2b00      	cmp	r3, #0
 8005508:	d15d      	bne.n	80055c6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	68da      	ldr	r2, [r3, #12]
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f022 0220 	bic.w	r2, r2, #32
 8005518:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	68da      	ldr	r2, [r3, #12]
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005528:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	695a      	ldr	r2, [r3, #20]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f022 0201 	bic.w	r2, r2, #1
 8005538:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	2220      	movs	r2, #32
 800553e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	2200      	movs	r2, #0
 8005546:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800554c:	2b01      	cmp	r3, #1
 800554e:	d135      	bne.n	80055bc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2200      	movs	r2, #0
 8005554:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	330c      	adds	r3, #12
 800555c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800555e:	697b      	ldr	r3, [r7, #20]
 8005560:	e853 3f00 	ldrex	r3, [r3]
 8005564:	613b      	str	r3, [r7, #16]
   return(result);
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	f023 0310 	bic.w	r3, r3, #16
 800556c:	627b      	str	r3, [r7, #36]	; 0x24
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	330c      	adds	r3, #12
 8005574:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005576:	623a      	str	r2, [r7, #32]
 8005578:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800557a:	69f9      	ldr	r1, [r7, #28]
 800557c:	6a3a      	ldr	r2, [r7, #32]
 800557e:	e841 2300 	strex	r3, r2, [r1]
 8005582:	61bb      	str	r3, [r7, #24]
   return(result);
 8005584:	69bb      	ldr	r3, [r7, #24]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d1e5      	bne.n	8005556 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f003 0310 	and.w	r3, r3, #16
 8005594:	2b10      	cmp	r3, #16
 8005596:	d10a      	bne.n	80055ae <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005598:	2300      	movs	r3, #0
 800559a:	60fb      	str	r3, [r7, #12]
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	60fb      	str	r3, [r7, #12]
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	685b      	ldr	r3, [r3, #4]
 80055aa:	60fb      	str	r3, [r7, #12]
 80055ac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80055b2:	4619      	mov	r1, r3
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f7ff fc4c 	bl	8004e52 <HAL_UARTEx_RxEventCallback>
 80055ba:	e002      	b.n	80055c2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80055bc:	6878      	ldr	r0, [r7, #4]
 80055be:	f7fc fe3d 	bl	800223c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80055c2:	2300      	movs	r3, #0
 80055c4:	e002      	b.n	80055cc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80055c6:	2300      	movs	r3, #0
 80055c8:	e000      	b.n	80055cc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80055ca:	2302      	movs	r3, #2
  }
}
 80055cc:	4618      	mov	r0, r3
 80055ce:	3730      	adds	r7, #48	; 0x30
 80055d0:	46bd      	mov	sp, r7
 80055d2:	bd80      	pop	{r7, pc}

080055d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b084      	sub	sp, #16
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	691b      	ldr	r3, [r3, #16]
 80055e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	68da      	ldr	r2, [r3, #12]
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	430a      	orrs	r2, r1
 80055f0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	689a      	ldr	r2, [r3, #8]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	431a      	orrs	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	695b      	ldr	r3, [r3, #20]
 8005600:	4313      	orrs	r3, r2
 8005602:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	68db      	ldr	r3, [r3, #12]
 800560a:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800560e:	f023 030c 	bic.w	r3, r3, #12
 8005612:	687a      	ldr	r2, [r7, #4]
 8005614:	6812      	ldr	r2, [r2, #0]
 8005616:	68b9      	ldr	r1, [r7, #8]
 8005618:	430b      	orrs	r3, r1
 800561a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	695b      	ldr	r3, [r3, #20]
 8005622:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	699a      	ldr	r2, [r3, #24]
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	430a      	orrs	r2, r1
 8005630:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	4a2c      	ldr	r2, [pc, #176]	; (80056e8 <UART_SetConfig+0x114>)
 8005638:	4293      	cmp	r3, r2
 800563a:	d103      	bne.n	8005644 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800563c:	f7ff f844 	bl	80046c8 <HAL_RCC_GetPCLK2Freq>
 8005640:	60f8      	str	r0, [r7, #12]
 8005642:	e002      	b.n	800564a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005644:	f7ff f82c 	bl	80046a0 <HAL_RCC_GetPCLK1Freq>
 8005648:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800564a:	68fa      	ldr	r2, [r7, #12]
 800564c:	4613      	mov	r3, r2
 800564e:	009b      	lsls	r3, r3, #2
 8005650:	4413      	add	r3, r2
 8005652:	009a      	lsls	r2, r3, #2
 8005654:	441a      	add	r2, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005660:	4a22      	ldr	r2, [pc, #136]	; (80056ec <UART_SetConfig+0x118>)
 8005662:	fba2 2303 	umull	r2, r3, r2, r3
 8005666:	095b      	lsrs	r3, r3, #5
 8005668:	0119      	lsls	r1, r3, #4
 800566a:	68fa      	ldr	r2, [r7, #12]
 800566c:	4613      	mov	r3, r2
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	4413      	add	r3, r2
 8005672:	009a      	lsls	r2, r3, #2
 8005674:	441a      	add	r2, r3
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	685b      	ldr	r3, [r3, #4]
 800567a:	009b      	lsls	r3, r3, #2
 800567c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005680:	4b1a      	ldr	r3, [pc, #104]	; (80056ec <UART_SetConfig+0x118>)
 8005682:	fba3 0302 	umull	r0, r3, r3, r2
 8005686:	095b      	lsrs	r3, r3, #5
 8005688:	2064      	movs	r0, #100	; 0x64
 800568a:	fb00 f303 	mul.w	r3, r0, r3
 800568e:	1ad3      	subs	r3, r2, r3
 8005690:	011b      	lsls	r3, r3, #4
 8005692:	3332      	adds	r3, #50	; 0x32
 8005694:	4a15      	ldr	r2, [pc, #84]	; (80056ec <UART_SetConfig+0x118>)
 8005696:	fba2 2303 	umull	r2, r3, r2, r3
 800569a:	095b      	lsrs	r3, r3, #5
 800569c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80056a0:	4419      	add	r1, r3
 80056a2:	68fa      	ldr	r2, [r7, #12]
 80056a4:	4613      	mov	r3, r2
 80056a6:	009b      	lsls	r3, r3, #2
 80056a8:	4413      	add	r3, r2
 80056aa:	009a      	lsls	r2, r3, #2
 80056ac:	441a      	add	r2, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	685b      	ldr	r3, [r3, #4]
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80056b8:	4b0c      	ldr	r3, [pc, #48]	; (80056ec <UART_SetConfig+0x118>)
 80056ba:	fba3 0302 	umull	r0, r3, r3, r2
 80056be:	095b      	lsrs	r3, r3, #5
 80056c0:	2064      	movs	r0, #100	; 0x64
 80056c2:	fb00 f303 	mul.w	r3, r0, r3
 80056c6:	1ad3      	subs	r3, r2, r3
 80056c8:	011b      	lsls	r3, r3, #4
 80056ca:	3332      	adds	r3, #50	; 0x32
 80056cc:	4a07      	ldr	r2, [pc, #28]	; (80056ec <UART_SetConfig+0x118>)
 80056ce:	fba2 2303 	umull	r2, r3, r2, r3
 80056d2:	095b      	lsrs	r3, r3, #5
 80056d4:	f003 020f 	and.w	r2, r3, #15
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	440a      	add	r2, r1
 80056de:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80056e0:	bf00      	nop
 80056e2:	3710      	adds	r7, #16
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}
 80056e8:	40013800 	.word	0x40013800
 80056ec:	51eb851f 	.word	0x51eb851f

080056f0 <realloc>:
 80056f0:	4b02      	ldr	r3, [pc, #8]	; (80056fc <realloc+0xc>)
 80056f2:	460a      	mov	r2, r1
 80056f4:	4601      	mov	r1, r0
 80056f6:	6818      	ldr	r0, [r3, #0]
 80056f8:	f000 b802 	b.w	8005700 <_realloc_r>
 80056fc:	2000006c 	.word	0x2000006c

08005700 <_realloc_r>:
 8005700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005704:	4680      	mov	r8, r0
 8005706:	4614      	mov	r4, r2
 8005708:	460e      	mov	r6, r1
 800570a:	b921      	cbnz	r1, 8005716 <_realloc_r+0x16>
 800570c:	4611      	mov	r1, r2
 800570e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005712:	f000 b8cf 	b.w	80058b4 <_malloc_r>
 8005716:	b92a      	cbnz	r2, 8005724 <_realloc_r+0x24>
 8005718:	f000 f864 	bl	80057e4 <_free_r>
 800571c:	4625      	mov	r5, r4
 800571e:	4628      	mov	r0, r5
 8005720:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005724:	f000 f952 	bl	80059cc <_malloc_usable_size_r>
 8005728:	4284      	cmp	r4, r0
 800572a:	4607      	mov	r7, r0
 800572c:	d802      	bhi.n	8005734 <_realloc_r+0x34>
 800572e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005732:	d812      	bhi.n	800575a <_realloc_r+0x5a>
 8005734:	4621      	mov	r1, r4
 8005736:	4640      	mov	r0, r8
 8005738:	f000 f8bc 	bl	80058b4 <_malloc_r>
 800573c:	4605      	mov	r5, r0
 800573e:	2800      	cmp	r0, #0
 8005740:	d0ed      	beq.n	800571e <_realloc_r+0x1e>
 8005742:	42bc      	cmp	r4, r7
 8005744:	4622      	mov	r2, r4
 8005746:	4631      	mov	r1, r6
 8005748:	bf28      	it	cs
 800574a:	463a      	movcs	r2, r7
 800574c:	f000 f83c 	bl	80057c8 <memcpy>
 8005750:	4631      	mov	r1, r6
 8005752:	4640      	mov	r0, r8
 8005754:	f000 f846 	bl	80057e4 <_free_r>
 8005758:	e7e1      	b.n	800571e <_realloc_r+0x1e>
 800575a:	4635      	mov	r5, r6
 800575c:	e7df      	b.n	800571e <_realloc_r+0x1e>

0800575e <memset>:
 800575e:	4603      	mov	r3, r0
 8005760:	4402      	add	r2, r0
 8005762:	4293      	cmp	r3, r2
 8005764:	d100      	bne.n	8005768 <memset+0xa>
 8005766:	4770      	bx	lr
 8005768:	f803 1b01 	strb.w	r1, [r3], #1
 800576c:	e7f9      	b.n	8005762 <memset+0x4>
	...

08005770 <__errno>:
 8005770:	4b01      	ldr	r3, [pc, #4]	; (8005778 <__errno+0x8>)
 8005772:	6818      	ldr	r0, [r3, #0]
 8005774:	4770      	bx	lr
 8005776:	bf00      	nop
 8005778:	2000006c 	.word	0x2000006c

0800577c <__libc_init_array>:
 800577c:	b570      	push	{r4, r5, r6, lr}
 800577e:	2600      	movs	r6, #0
 8005780:	4d0c      	ldr	r5, [pc, #48]	; (80057b4 <__libc_init_array+0x38>)
 8005782:	4c0d      	ldr	r4, [pc, #52]	; (80057b8 <__libc_init_array+0x3c>)
 8005784:	1b64      	subs	r4, r4, r5
 8005786:	10a4      	asrs	r4, r4, #2
 8005788:	42a6      	cmp	r6, r4
 800578a:	d109      	bne.n	80057a0 <__libc_init_array+0x24>
 800578c:	f000 f936 	bl	80059fc <_init>
 8005790:	2600      	movs	r6, #0
 8005792:	4d0a      	ldr	r5, [pc, #40]	; (80057bc <__libc_init_array+0x40>)
 8005794:	4c0a      	ldr	r4, [pc, #40]	; (80057c0 <__libc_init_array+0x44>)
 8005796:	1b64      	subs	r4, r4, r5
 8005798:	10a4      	asrs	r4, r4, #2
 800579a:	42a6      	cmp	r6, r4
 800579c:	d105      	bne.n	80057aa <__libc_init_array+0x2e>
 800579e:	bd70      	pop	{r4, r5, r6, pc}
 80057a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80057a4:	4798      	blx	r3
 80057a6:	3601      	adds	r6, #1
 80057a8:	e7ee      	b.n	8005788 <__libc_init_array+0xc>
 80057aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80057ae:	4798      	blx	r3
 80057b0:	3601      	adds	r6, #1
 80057b2:	e7f2      	b.n	800579a <__libc_init_array+0x1e>
 80057b4:	08005db0 	.word	0x08005db0
 80057b8:	08005db0 	.word	0x08005db0
 80057bc:	08005db0 	.word	0x08005db0
 80057c0:	08005db8 	.word	0x08005db8

080057c4 <__retarget_lock_acquire_recursive>:
 80057c4:	4770      	bx	lr

080057c6 <__retarget_lock_release_recursive>:
 80057c6:	4770      	bx	lr

080057c8 <memcpy>:
 80057c8:	440a      	add	r2, r1
 80057ca:	4291      	cmp	r1, r2
 80057cc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80057d0:	d100      	bne.n	80057d4 <memcpy+0xc>
 80057d2:	4770      	bx	lr
 80057d4:	b510      	push	{r4, lr}
 80057d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80057da:	4291      	cmp	r1, r2
 80057dc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80057e0:	d1f9      	bne.n	80057d6 <memcpy+0xe>
 80057e2:	bd10      	pop	{r4, pc}

080057e4 <_free_r>:
 80057e4:	b538      	push	{r3, r4, r5, lr}
 80057e6:	4605      	mov	r5, r0
 80057e8:	2900      	cmp	r1, #0
 80057ea:	d040      	beq.n	800586e <_free_r+0x8a>
 80057ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80057f0:	1f0c      	subs	r4, r1, #4
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	bfb8      	it	lt
 80057f6:	18e4      	addlt	r4, r4, r3
 80057f8:	f000 f8dc 	bl	80059b4 <__malloc_lock>
 80057fc:	4a1c      	ldr	r2, [pc, #112]	; (8005870 <_free_r+0x8c>)
 80057fe:	6813      	ldr	r3, [r2, #0]
 8005800:	b933      	cbnz	r3, 8005810 <_free_r+0x2c>
 8005802:	6063      	str	r3, [r4, #4]
 8005804:	6014      	str	r4, [r2, #0]
 8005806:	4628      	mov	r0, r5
 8005808:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800580c:	f000 b8d8 	b.w	80059c0 <__malloc_unlock>
 8005810:	42a3      	cmp	r3, r4
 8005812:	d908      	bls.n	8005826 <_free_r+0x42>
 8005814:	6820      	ldr	r0, [r4, #0]
 8005816:	1821      	adds	r1, r4, r0
 8005818:	428b      	cmp	r3, r1
 800581a:	bf01      	itttt	eq
 800581c:	6819      	ldreq	r1, [r3, #0]
 800581e:	685b      	ldreq	r3, [r3, #4]
 8005820:	1809      	addeq	r1, r1, r0
 8005822:	6021      	streq	r1, [r4, #0]
 8005824:	e7ed      	b.n	8005802 <_free_r+0x1e>
 8005826:	461a      	mov	r2, r3
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	b10b      	cbz	r3, 8005830 <_free_r+0x4c>
 800582c:	42a3      	cmp	r3, r4
 800582e:	d9fa      	bls.n	8005826 <_free_r+0x42>
 8005830:	6811      	ldr	r1, [r2, #0]
 8005832:	1850      	adds	r0, r2, r1
 8005834:	42a0      	cmp	r0, r4
 8005836:	d10b      	bne.n	8005850 <_free_r+0x6c>
 8005838:	6820      	ldr	r0, [r4, #0]
 800583a:	4401      	add	r1, r0
 800583c:	1850      	adds	r0, r2, r1
 800583e:	4283      	cmp	r3, r0
 8005840:	6011      	str	r1, [r2, #0]
 8005842:	d1e0      	bne.n	8005806 <_free_r+0x22>
 8005844:	6818      	ldr	r0, [r3, #0]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	4408      	add	r0, r1
 800584a:	6010      	str	r0, [r2, #0]
 800584c:	6053      	str	r3, [r2, #4]
 800584e:	e7da      	b.n	8005806 <_free_r+0x22>
 8005850:	d902      	bls.n	8005858 <_free_r+0x74>
 8005852:	230c      	movs	r3, #12
 8005854:	602b      	str	r3, [r5, #0]
 8005856:	e7d6      	b.n	8005806 <_free_r+0x22>
 8005858:	6820      	ldr	r0, [r4, #0]
 800585a:	1821      	adds	r1, r4, r0
 800585c:	428b      	cmp	r3, r1
 800585e:	bf01      	itttt	eq
 8005860:	6819      	ldreq	r1, [r3, #0]
 8005862:	685b      	ldreq	r3, [r3, #4]
 8005864:	1809      	addeq	r1, r1, r0
 8005866:	6021      	streq	r1, [r4, #0]
 8005868:	6063      	str	r3, [r4, #4]
 800586a:	6054      	str	r4, [r2, #4]
 800586c:	e7cb      	b.n	8005806 <_free_r+0x22>
 800586e:	bd38      	pop	{r3, r4, r5, pc}
 8005870:	20000cc0 	.word	0x20000cc0

08005874 <sbrk_aligned>:
 8005874:	b570      	push	{r4, r5, r6, lr}
 8005876:	4e0e      	ldr	r6, [pc, #56]	; (80058b0 <sbrk_aligned+0x3c>)
 8005878:	460c      	mov	r4, r1
 800587a:	6831      	ldr	r1, [r6, #0]
 800587c:	4605      	mov	r5, r0
 800587e:	b911      	cbnz	r1, 8005886 <sbrk_aligned+0x12>
 8005880:	f000 f8ac 	bl	80059dc <_sbrk_r>
 8005884:	6030      	str	r0, [r6, #0]
 8005886:	4621      	mov	r1, r4
 8005888:	4628      	mov	r0, r5
 800588a:	f000 f8a7 	bl	80059dc <_sbrk_r>
 800588e:	1c43      	adds	r3, r0, #1
 8005890:	d00a      	beq.n	80058a8 <sbrk_aligned+0x34>
 8005892:	1cc4      	adds	r4, r0, #3
 8005894:	f024 0403 	bic.w	r4, r4, #3
 8005898:	42a0      	cmp	r0, r4
 800589a:	d007      	beq.n	80058ac <sbrk_aligned+0x38>
 800589c:	1a21      	subs	r1, r4, r0
 800589e:	4628      	mov	r0, r5
 80058a0:	f000 f89c 	bl	80059dc <_sbrk_r>
 80058a4:	3001      	adds	r0, #1
 80058a6:	d101      	bne.n	80058ac <sbrk_aligned+0x38>
 80058a8:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80058ac:	4620      	mov	r0, r4
 80058ae:	bd70      	pop	{r4, r5, r6, pc}
 80058b0:	20000cc4 	.word	0x20000cc4

080058b4 <_malloc_r>:
 80058b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80058b8:	1ccd      	adds	r5, r1, #3
 80058ba:	f025 0503 	bic.w	r5, r5, #3
 80058be:	3508      	adds	r5, #8
 80058c0:	2d0c      	cmp	r5, #12
 80058c2:	bf38      	it	cc
 80058c4:	250c      	movcc	r5, #12
 80058c6:	2d00      	cmp	r5, #0
 80058c8:	4607      	mov	r7, r0
 80058ca:	db01      	blt.n	80058d0 <_malloc_r+0x1c>
 80058cc:	42a9      	cmp	r1, r5
 80058ce:	d905      	bls.n	80058dc <_malloc_r+0x28>
 80058d0:	230c      	movs	r3, #12
 80058d2:	2600      	movs	r6, #0
 80058d4:	603b      	str	r3, [r7, #0]
 80058d6:	4630      	mov	r0, r6
 80058d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058dc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80059b0 <_malloc_r+0xfc>
 80058e0:	f000 f868 	bl	80059b4 <__malloc_lock>
 80058e4:	f8d8 3000 	ldr.w	r3, [r8]
 80058e8:	461c      	mov	r4, r3
 80058ea:	bb5c      	cbnz	r4, 8005944 <_malloc_r+0x90>
 80058ec:	4629      	mov	r1, r5
 80058ee:	4638      	mov	r0, r7
 80058f0:	f7ff ffc0 	bl	8005874 <sbrk_aligned>
 80058f4:	1c43      	adds	r3, r0, #1
 80058f6:	4604      	mov	r4, r0
 80058f8:	d155      	bne.n	80059a6 <_malloc_r+0xf2>
 80058fa:	f8d8 4000 	ldr.w	r4, [r8]
 80058fe:	4626      	mov	r6, r4
 8005900:	2e00      	cmp	r6, #0
 8005902:	d145      	bne.n	8005990 <_malloc_r+0xdc>
 8005904:	2c00      	cmp	r4, #0
 8005906:	d048      	beq.n	800599a <_malloc_r+0xe6>
 8005908:	6823      	ldr	r3, [r4, #0]
 800590a:	4631      	mov	r1, r6
 800590c:	4638      	mov	r0, r7
 800590e:	eb04 0903 	add.w	r9, r4, r3
 8005912:	f000 f863 	bl	80059dc <_sbrk_r>
 8005916:	4581      	cmp	r9, r0
 8005918:	d13f      	bne.n	800599a <_malloc_r+0xe6>
 800591a:	6821      	ldr	r1, [r4, #0]
 800591c:	4638      	mov	r0, r7
 800591e:	1a6d      	subs	r5, r5, r1
 8005920:	4629      	mov	r1, r5
 8005922:	f7ff ffa7 	bl	8005874 <sbrk_aligned>
 8005926:	3001      	adds	r0, #1
 8005928:	d037      	beq.n	800599a <_malloc_r+0xe6>
 800592a:	6823      	ldr	r3, [r4, #0]
 800592c:	442b      	add	r3, r5
 800592e:	6023      	str	r3, [r4, #0]
 8005930:	f8d8 3000 	ldr.w	r3, [r8]
 8005934:	2b00      	cmp	r3, #0
 8005936:	d038      	beq.n	80059aa <_malloc_r+0xf6>
 8005938:	685a      	ldr	r2, [r3, #4]
 800593a:	42a2      	cmp	r2, r4
 800593c:	d12b      	bne.n	8005996 <_malloc_r+0xe2>
 800593e:	2200      	movs	r2, #0
 8005940:	605a      	str	r2, [r3, #4]
 8005942:	e00f      	b.n	8005964 <_malloc_r+0xb0>
 8005944:	6822      	ldr	r2, [r4, #0]
 8005946:	1b52      	subs	r2, r2, r5
 8005948:	d41f      	bmi.n	800598a <_malloc_r+0xd6>
 800594a:	2a0b      	cmp	r2, #11
 800594c:	d917      	bls.n	800597e <_malloc_r+0xca>
 800594e:	1961      	adds	r1, r4, r5
 8005950:	42a3      	cmp	r3, r4
 8005952:	6025      	str	r5, [r4, #0]
 8005954:	bf18      	it	ne
 8005956:	6059      	strne	r1, [r3, #4]
 8005958:	6863      	ldr	r3, [r4, #4]
 800595a:	bf08      	it	eq
 800595c:	f8c8 1000 	streq.w	r1, [r8]
 8005960:	5162      	str	r2, [r4, r5]
 8005962:	604b      	str	r3, [r1, #4]
 8005964:	4638      	mov	r0, r7
 8005966:	f104 060b 	add.w	r6, r4, #11
 800596a:	f000 f829 	bl	80059c0 <__malloc_unlock>
 800596e:	f026 0607 	bic.w	r6, r6, #7
 8005972:	1d23      	adds	r3, r4, #4
 8005974:	1af2      	subs	r2, r6, r3
 8005976:	d0ae      	beq.n	80058d6 <_malloc_r+0x22>
 8005978:	1b9b      	subs	r3, r3, r6
 800597a:	50a3      	str	r3, [r4, r2]
 800597c:	e7ab      	b.n	80058d6 <_malloc_r+0x22>
 800597e:	42a3      	cmp	r3, r4
 8005980:	6862      	ldr	r2, [r4, #4]
 8005982:	d1dd      	bne.n	8005940 <_malloc_r+0x8c>
 8005984:	f8c8 2000 	str.w	r2, [r8]
 8005988:	e7ec      	b.n	8005964 <_malloc_r+0xb0>
 800598a:	4623      	mov	r3, r4
 800598c:	6864      	ldr	r4, [r4, #4]
 800598e:	e7ac      	b.n	80058ea <_malloc_r+0x36>
 8005990:	4634      	mov	r4, r6
 8005992:	6876      	ldr	r6, [r6, #4]
 8005994:	e7b4      	b.n	8005900 <_malloc_r+0x4c>
 8005996:	4613      	mov	r3, r2
 8005998:	e7cc      	b.n	8005934 <_malloc_r+0x80>
 800599a:	230c      	movs	r3, #12
 800599c:	4638      	mov	r0, r7
 800599e:	603b      	str	r3, [r7, #0]
 80059a0:	f000 f80e 	bl	80059c0 <__malloc_unlock>
 80059a4:	e797      	b.n	80058d6 <_malloc_r+0x22>
 80059a6:	6025      	str	r5, [r4, #0]
 80059a8:	e7dc      	b.n	8005964 <_malloc_r+0xb0>
 80059aa:	605b      	str	r3, [r3, #4]
 80059ac:	deff      	udf	#255	; 0xff
 80059ae:	bf00      	nop
 80059b0:	20000cc0 	.word	0x20000cc0

080059b4 <__malloc_lock>:
 80059b4:	4801      	ldr	r0, [pc, #4]	; (80059bc <__malloc_lock+0x8>)
 80059b6:	f7ff bf05 	b.w	80057c4 <__retarget_lock_acquire_recursive>
 80059ba:	bf00      	nop
 80059bc:	20000cbc 	.word	0x20000cbc

080059c0 <__malloc_unlock>:
 80059c0:	4801      	ldr	r0, [pc, #4]	; (80059c8 <__malloc_unlock+0x8>)
 80059c2:	f7ff bf00 	b.w	80057c6 <__retarget_lock_release_recursive>
 80059c6:	bf00      	nop
 80059c8:	20000cbc 	.word	0x20000cbc

080059cc <_malloc_usable_size_r>:
 80059cc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80059d0:	1f18      	subs	r0, r3, #4
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	bfbc      	itt	lt
 80059d6:	580b      	ldrlt	r3, [r1, r0]
 80059d8:	18c0      	addlt	r0, r0, r3
 80059da:	4770      	bx	lr

080059dc <_sbrk_r>:
 80059dc:	b538      	push	{r3, r4, r5, lr}
 80059de:	2300      	movs	r3, #0
 80059e0:	4d05      	ldr	r5, [pc, #20]	; (80059f8 <_sbrk_r+0x1c>)
 80059e2:	4604      	mov	r4, r0
 80059e4:	4608      	mov	r0, r1
 80059e6:	602b      	str	r3, [r5, #0]
 80059e8:	f7fd fc40 	bl	800326c <_sbrk>
 80059ec:	1c43      	adds	r3, r0, #1
 80059ee:	d102      	bne.n	80059f6 <_sbrk_r+0x1a>
 80059f0:	682b      	ldr	r3, [r5, #0]
 80059f2:	b103      	cbz	r3, 80059f6 <_sbrk_r+0x1a>
 80059f4:	6023      	str	r3, [r4, #0]
 80059f6:	bd38      	pop	{r3, r4, r5, pc}
 80059f8:	20000cb8 	.word	0x20000cb8

080059fc <_init>:
 80059fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059fe:	bf00      	nop
 8005a00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a02:	bc08      	pop	{r3}
 8005a04:	469e      	mov	lr, r3
 8005a06:	4770      	bx	lr

08005a08 <_fini>:
 8005a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a0a:	bf00      	nop
 8005a0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005a0e:	bc08      	pop	{r3}
 8005a10:	469e      	mov	lr, r3
 8005a12:	4770      	bx	lr
